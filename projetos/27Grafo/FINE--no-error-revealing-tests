Applying visitor class randoop.reflection.DeclarationExtractor to class ds.Grafo
ReflectionManager.apply
  class ds.Grafo
  getMethods = 18
  getDeclaredMethods = 9
  visitor = class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager visiting method public boolean ds.Grafo.existeAresta(int,int), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager visiting method public ds.Grafo ds.Grafo.grafoTransposto(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public void ds.Grafo.imprime()
ReflectionManager visiting method public void ds.Grafo.imprime(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager visiting method public void ds.Grafo.insereAresta(int,int,int), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager visiting method public boolean ds.Grafo.listaAdjVazia(int), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public int ds.Grafo.numVertices()
ReflectionManager visiting method public int ds.Grafo.numVertices(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.proxAdj(int), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply done with getMethods for class class ds.Grafo
ReflectionManager.apply considering declared method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager.apply considering declared method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager.apply considering declared method public void ds.Grafo.imprime()
ReflectionManager.apply considering declared method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager.apply considering declared method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager.apply considering declared method public int ds.Grafo.numVertices()
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo
Visiting constructor public ds.Grafo(int)
Visiting member class class ds.Grafo$Aresta
Applying visitor class randoop.reflection.DeclarationExtractor to class ds.Grafo$Aresta
ReflectionManager.apply
  class ds.Grafo$Aresta
  getMethods = 12
  getDeclaredMethods = 3
  visitor = class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.peso()
ReflectionManager visiting method public int ds.Grafo$Aresta.peso(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.v1()
ReflectionManager visiting method public int ds.Grafo$Aresta.v1(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.v2()
ReflectionManager visiting method public int ds.Grafo$Aresta.v2(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply done with getMethods for class class ds.Grafo$Aresta
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.peso()
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.v1()
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.v2()
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo$Aresta
Visiting constructor public ds.Grafo$Aresta(int,int,int)
Applying visitor class randoop.reflection.TypeExtractor to class ds.Grafo
ReflectionManager.apply
  class ds.Grafo
  getMethods = 18
  getDeclaredMethods = 9
  visitor = class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Object [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Boolean [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager visiting method public boolean ds.Grafo.existeAresta(int,int), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Boolean [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager visiting method public ds.Grafo ds.Grafo.grafoTransposto(), visitor=class randoop.reflection.TypeExtractor
Adding ds.Grafo [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public void ds.Grafo.imprime()
ReflectionManager visiting method public void ds.Grafo.imprime(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager visiting method public void ds.Grafo.insereAresta(int,int,int), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager visiting method public boolean ds.Grafo.listaAdjVazia(int), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Boolean [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public int ds.Grafo.numVertices()
ReflectionManager visiting method public int ds.Grafo.numVertices(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding ds.Grafo$Aresta [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.proxAdj(int), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding ds.Grafo$Aresta [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding ds.Grafo$Aresta [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.String [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Long [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Long [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply done with getMethods for class class ds.Grafo
ReflectionManager.apply considering declared method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager.apply considering declared method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager.apply considering declared method public void ds.Grafo.imprime()
ReflectionManager.apply considering declared method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager.apply considering declared method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager.apply considering declared method public int ds.Grafo.numVertices()
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo
Visiting constructor public ds.Grafo(int)
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Visiting member class class ds.Grafo$Aresta
Adding ds.Grafo$Aresta [class randoop.types.NonParameterizedType] as candidate parameter type
Applying visitor class randoop.reflection.TypeExtractor to class ds.Grafo$Aresta
ReflectionManager.apply
  class ds.Grafo$Aresta
  getMethods = 12
  getDeclaredMethods = 3
  visitor = class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Object [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Boolean [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.peso()
ReflectionManager visiting method public int ds.Grafo$Aresta.peso(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.String [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public int ds.Grafo$Aresta.v1()
ReflectionManager visiting method public int ds.Grafo$Aresta.v1(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public int ds.Grafo$Aresta.v2()
ReflectionManager visiting method public int ds.Grafo$Aresta.v2(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Long [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Long [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply done with getMethods for class class ds.Grafo$Aresta
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.peso()
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.v1()
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.v2()
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo$Aresta
Visiting constructor public ds.Grafo$Aresta(int,int,int)
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
Applying visitor class randoop.reflection.TestValueExtractor to class ds.Grafo
ReflectionManager.apply
  class ds.Grafo
  getMethods = 18
  getDeclaredMethods = 9
  visitor = class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager visiting method public boolean ds.Grafo.existeAresta(int,int), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager visiting method public ds.Grafo ds.Grafo.grafoTransposto(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public void ds.Grafo.imprime()
ReflectionManager visiting method public void ds.Grafo.imprime(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager visiting method public void ds.Grafo.insereAresta(int,int,int), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager visiting method public boolean ds.Grafo.listaAdjVazia(int), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public int ds.Grafo.numVertices()
ReflectionManager visiting method public int ds.Grafo.numVertices(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.proxAdj(int), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply done with getMethods for class class ds.Grafo
ReflectionManager.apply considering declared method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager.apply considering declared method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager.apply considering declared method public void ds.Grafo.imprime()
ReflectionManager.apply considering declared method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager.apply considering declared method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager.apply considering declared method public int ds.Grafo.numVertices()
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo
Visiting constructor public ds.Grafo(int)
Visiting member class class ds.Grafo$Aresta
Applying visitor class randoop.reflection.CheckRepExtractor to class ds.Grafo
ReflectionManager.apply
  class ds.Grafo
  getMethods = 18
  getDeclaredMethods = 9
  visitor = class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager visiting method public boolean ds.Grafo.existeAresta(int,int), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager visiting method public ds.Grafo ds.Grafo.grafoTransposto(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public void ds.Grafo.imprime()
ReflectionManager visiting method public void ds.Grafo.imprime(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager visiting method public void ds.Grafo.insereAresta(int,int,int), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager visiting method public boolean ds.Grafo.listaAdjVazia(int), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public int ds.Grafo.numVertices()
ReflectionManager visiting method public int ds.Grafo.numVertices(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.proxAdj(int), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply done with getMethods for class class ds.Grafo
ReflectionManager.apply considering declared method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager.apply considering declared method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager.apply considering declared method public void ds.Grafo.imprime()
ReflectionManager.apply considering declared method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager.apply considering declared method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager.apply considering declared method public int ds.Grafo.numVertices()
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo
Visiting constructor public ds.Grafo(int)
Visiting member class class ds.Grafo$Aresta
Applying visitor class randoop.reflection.OperationExtractor to class ds.Grafo
ReflectionManager.apply
  class ds.Grafo
  getMethods = 18
  getDeclaredMethods = 9
  visitor = class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager visiting method public boolean ds.Grafo.existeAresta(int,int), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager visiting method public ds.Grafo ds.Grafo.grafoTransposto(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public void ds.Grafo.imprime()
ReflectionManager visiting method public void ds.Grafo.imprime(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager visiting method public void ds.Grafo.insereAresta(int,int,int), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager visiting method public boolean ds.Grafo.listaAdjVazia(int), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public int ds.Grafo.numVertices()
ReflectionManager visiting method public int ds.Grafo.numVertices(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.proxAdj(int), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager visiting method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply done with getMethods for class class ds.Grafo
ReflectionManager.apply considering declared method public boolean ds.Grafo.existeAresta(int,int)
ReflectionManager.apply considering declared method public ds.Grafo ds.Grafo.grafoTransposto()
ReflectionManager.apply considering declared method public void ds.Grafo.imprime()
ReflectionManager.apply considering declared method public void ds.Grafo.insereAresta(int,int,int)
ReflectionManager.apply considering declared method public boolean ds.Grafo.listaAdjVazia(int)
ReflectionManager.apply considering declared method public int ds.Grafo.numVertices()
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
ReflectionManager.apply considering declared method public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo
Visiting constructor public ds.Grafo(int)
Visiting member class class ds.Grafo$Aresta
Applying visitor class randoop.reflection.OperationExtractor to class ds.Grafo$Aresta
ReflectionManager.apply
  class ds.Grafo$Aresta
  getMethods = 12
  getDeclaredMethods = 3
  visitor = class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.peso()
ReflectionManager visiting method public int ds.Grafo$Aresta.peso(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.v1()
ReflectionManager visiting method public int ds.Grafo$Aresta.v1(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public int ds.Grafo$Aresta.v2()
ReflectionManager visiting method public int ds.Grafo$Aresta.v2(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply done with getMethods for class class ds.Grafo$Aresta
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.peso()
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.v1()
ReflectionManager.apply considering declared method public int ds.Grafo$Aresta.v2()
ReflectionManager.apply done with getDeclaredMethods for class class ds.Grafo$Aresta
Visiting constructor public ds.Grafo$Aresta(int,int,int)
Adding sequence #1 of type byte of length 1
Adding sequence #2 of type byte of length 1
Adding sequence #3 of type byte of length 1
Adding sequence #4 of type byte of length 1
Adding sequence #5 of type byte of length 1
Adding sequence #1 of type short of length 1
Adding sequence #2 of type short of length 1
Adding sequence #3 of type short of length 1
Adding sequence #4 of type short of length 1
Adding sequence #5 of type short of length 1
Adding sequence #1 of type int of length 1
Adding sequence #2 of type int of length 1
Adding sequence #3 of type int of length 1
Adding sequence #4 of type int of length 1
Adding sequence #5 of type int of length 1
Adding sequence #1 of type long of length 1
Adding sequence #2 of type long of length 1
Adding sequence #3 of type long of length 1
Adding sequence #4 of type long of length 1
Adding sequence #5 of type long of length 1
Adding sequence #1 of type float of length 1
Adding sequence #2 of type float of length 1
Adding sequence #3 of type float of length 1
Adding sequence #4 of type float of length 1
Adding sequence #5 of type float of length 1
Adding sequence #1 of type double of length 1
Adding sequence #2 of type double of length 1
Adding sequence #3 of type double of length 1
Adding sequence #4 of type double of length 1
Adding sequence #5 of type double of length 1
Adding sequence #1 of type char of length 1
Adding sequence #2 of type char of length 1
Adding sequence #3 of type char of length 1
Adding sequence #4 of type char of length 1
Adding sequence #1 of type boolean of length 1
Adding sequence #2 of type boolean of length 1
Adding sequence #1 of type java.lang.String of length 1
Adding sequence #2 of type java.lang.String of length 1
getSequencesForType(boolean, true, false)
getSequencesForType(boolean) => 2 sequences.
getSequencesForType(byte, true, false)
getSequencesForType(byte) => 5 sequences.
getSequencesForType(char, true, false)
getSequencesForType(char) => 4 sequences.
getSequencesForType(double, true, false)
getSequencesForType(double) => 5 sequences.
getSequencesForType(float, true, false)
getSequencesForType(float) => 5 sequences.
getSequencesForType(int, true, false)
getSequencesForType(int) => 5 sequences.
getSequencesForType(long, true, false)
getSequencesForType(long) => 5 sequences.
getSequencesForType(short, true, false)
getSequencesForType(short) => 5 sequences.
getSequencesForType(java.lang.String, true, false)
getSequencesForType(java.lang.String) => 2 sequences.
Operations: 
  ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
  ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
  ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
  ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
  ds.Grafo.<init> : (int) -> ds.Grafo
  ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
  ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
  ds.Grafo.imprime : (ds.Grafo) -> void
  ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
  ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
  ds.Grafo.numVertices : (ds.Grafo) -> int
  ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
  ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
  ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
  java.lang.Object.<init> : () -> java.lang.Object
  java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Initial sequences (seeds):
Type byte: 5 sequences
  #0: byte byte0 = (byte)-1;
  #1: byte byte0 = (byte)0;
  #2: byte byte0 = (byte)1;
  #3: byte byte0 = (byte)10;
  #4: byte byte0 = (byte)100;
Type short: 5 sequences
  #0: short short0 = (short)-1;
  #1: short short0 = (short)0;
  #2: short short0 = (short)1;
  #3: short short0 = (short)10;
  #4: short short0 = (short)100;
Type int: 5 sequences
  #0: int int0 = (-1);
  #1: int int0 = 0;
  #2: int int0 = 1;
  #3: int int0 = 10;
  #4: int int0 = 100;
Type long: 5 sequences
  #0: long long0 = (-1L);
  #1: long long0 = 0L;
  #2: long long0 = 1L;
  #3: long long0 = 10L;
  #4: long long0 = 100L;
Type float: 5 sequences
  #0: float float0 = (-1.0f);
  #1: float float0 = 0.0f;
  #2: float float0 = 1.0f;
  #3: float float0 = 10.0f;
  #4: float float0 = 100.0f;
Type double: 5 sequences
  #0: double double0 = (-1.0d);
  #1: double double0 = 0.0d;
  #2: double double0 = 1.0d;
  #3: double double0 = 10.0d;
  #4: double double0 = 100.0d;
Type char: 4 sequences
  #0: char char0 = '#';
  #1: char char0 = ' ';
  #2: char char0 = '4';
  #3: char char0 = 'a';
Type boolean: 2 sequences
  #0: boolean boolean0 = true;
  #1: boolean boolean0 = false;
Type java.lang.String: 2 sequences
  #0: java.lang.String str0 = "";
  #1: java.lang.String str0 = "hi!";
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.numVertices : (ds.Grafo) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 3 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 4 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 5 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.imprime : (ds.Grafo) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 6 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 7 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 8 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 9 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 10 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.numVertices : (ds.Grafo) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 11 calls to Random so far
Selected operation: java.lang.Object.<init> : () -> java.lang.Object
selectInputs:  inputTypes=()
Successfully created new unique sequence:
java.lang.Object obj0 = new java.lang.Object();

isSideEffectFree => false for Statement [ java.lang.Object.<init> : () -> java.lang.Object]
Making index 0 active.
Adding sequence #1 of type java.lang.Object of length 1
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 12 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.numVertices : (ds.Grafo) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 13 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.imprime : (ds.Grafo) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 14 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 15 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 16 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
getSequencesForType: found no sequences matching type ds.Grafo
getSequencesForType(ds.Grafo) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 17 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 18 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 19 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 20 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);

isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #1 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 21 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 1 methods.
getSequencesForType(java.lang.Object) => 2 sequences.
number of candidate components: 2
randoop.util.Randomness called by nextRandomInt: 22 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
java.lang.Class<?> wildcardClass2 = grafo1.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 2 active.
Adding sequence #1 of type java.lang.Class<?> of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 23 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 1 methods.
getSequencesForType(ds.Grafo) => 1 sequences.
number of candidate components: 1
randoop.util.Randomness called by nextRandomInt: 24 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 25 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 26 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 27 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 28 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 29 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 30 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence #2 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 31 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 32 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 2 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
getSequencesForType(java.lang.Object) => 3 sequences.
number of candidate components: 3
randoop.util.Randomness called by nextRandomInt: 33 calls to Random so far
chosenSeq: java.lang.Object obj0 = new java.lang.Object();

Successfully created new unique sequence:
java.lang.Object obj0 = new java.lang.Object();
java.lang.Class<?> wildcardClass1 = obj0.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class java.lang.Object [class java.lang.Class]
isSideEffectFree => false for Statement [ java.lang.Object.<init> : () -> java.lang.Object]
Making index 0 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 1 active.
Adding sequence #2 of type java.lang.Class<?> of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 34 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 2 methods.
getSequencesForType(ds.Grafo) => 2 sequences.
number of candidate components: 2
randoop.util.Randomness called by nextRandomInt: 35 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');

randoop.util.Randomness called by weightedCoinFlip: 36 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 37 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 38 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 39 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
ds.Grafo.Aresta aresta8 = grafo1.retiraAresta(0, (int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 8
  Statement: ds.Grafo.Aresta aresta8 = grafo1.retiraAresta(0, (int)' ');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 40 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 2 methods.
getSequencesForType(ds.Grafo) => 2 sequences.
number of candidate components: 2
randoop.util.Randomness called by nextRandomInt: 41 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');

randoop.util.Randomness called by weightedCoinFlip: 42 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 43 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 44 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 45 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 46 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence #3 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 47 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 3 methods.
getSequencesForType(ds.Grafo) => 3 sequences.
number of candidate components: 3
randoop.util.Randomness called by nextRandomInt: 48 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 49 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 50 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence #4 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 51 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 52 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 53 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 4 methods.
getSequencesForType(ds.Grafo) => 4 sequences.
number of candidate components: 4
randoop.util.Randomness called by nextRandomInt: 54 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 55 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 56 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia(100);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 3
  Statement: boolean boolean3 = grafo1.listaAdjVazia(100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.listaAdjVazia(Grafo.java:36)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 57 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 4 methods.
getSequencesForType(ds.Grafo) => 4 sequences.
number of candidate components: 4
randoop.util.Randomness called by nextRandomInt: 58 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

randoop.util.Randomness called by weightedCoinFlip: 59 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 60 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 61 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 62 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 63 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 64 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #5 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 65 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 5 methods.
getSequencesForType(ds.Grafo) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 66 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 67 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 68 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 69 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 70 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(short)-1, (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 16
  Statement: boolean boolean16 = grafo1.existeAresta((int)(short)-1, (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 71 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 72 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 5 methods.
getSequencesForType(ds.Grafo) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 73 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

randoop.util.Randomness called by weightedCoinFlip: 74 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 75 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence #6 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 76 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
getSequencesForType(java.lang.Object) => 7 sequences.
number of candidate components: 7
randoop.util.Randomness called by nextRandomInt: 77 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

randoop.util.Randomness called by nextRandomInt: 78 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
java.lang.Class<?> wildcardClass4 = grafo1.getClass();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #3 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 79 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 6 methods.
getSequencesForType(ds.Grafo) => 6 sequences.
number of candidate components: 6
randoop.util.Randomness called by nextRandomInt: 80 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');

randoop.util.Randomness called by weightedCoinFlip: 81 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 82 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 83 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 84 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
Adding sequence #7 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 85 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 7 methods.
getSequencesForType(ds.Grafo) => 7 sequences.
number of candidate components: 7
randoop.util.Randomness called by nextRandomInt: 86 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 87 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 88 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.proxAdj((int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 10
  Statement: ds.Grafo.Aresta aresta10 = grafo1.proxAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 89 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 7 methods.
getSequencesForType(ds.Grafo) => 7 sequences.
number of candidate components: 7
randoop.util.Randomness called by nextRandomInt: 90 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

randoop.util.Randomness called by weightedCoinFlip: 91 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 92 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 93 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 94 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Adding sequence #8 of type ds.Grafo of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 95 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 96 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 97 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');

isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #9 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 98 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 9 methods.
getSequencesForType(ds.Grafo) => 9 sequences.
number of candidate components: 9
randoop.util.Randomness called by nextRandomInt: 99 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');

randoop.util.Randomness called by weightedCoinFlip: 100 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 101 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
ds.Grafo.Aresta aresta7 = grafo1.proxAdj((-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo1.proxAdj((-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 102 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 9 methods.
getSequencesForType(ds.Grafo) => 9 sequences.
number of candidate components: 9
randoop.util.Randomness called by nextRandomInt: 103 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 104 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 105 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 106 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 107 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 108 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 109 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence #10 of type ds.Grafo of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 110 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 10 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
getSequencesForType(java.lang.Object) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 111 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
java.lang.Class<?> wildcardClass13 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 13 active.
Adding sequence #4 of type java.lang.Class<?> of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 112 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 113 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 114 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);

isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #11 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 115 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 116 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 11 methods.
getSequencesForType(ds.Grafo) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 117 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);

randoop.util.Randomness called by weightedCoinFlip: 118 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 119 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 120 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 121 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 122 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 123 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
grafo1.insereAresta((int)'#', 1, (int)(short)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 1 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: grafo1.insereAresta((int)'#', 1, (int)(short)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 124 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 11 methods.
getSequencesForType(ds.Grafo) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 125 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #12 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 126 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 127 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 128 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 12 methods.
getSequencesForType(ds.Grafo) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 129 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 130 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 131 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 132 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 133 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)(short)-1, (int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Short]
  Param 1 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 15
  Statement: ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)(short)-1, (int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 134 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 12 methods.
getSequencesForType(ds.Grafo) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 135 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 136 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 137 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence #13 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 138 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 13 methods.
getSequencesForType(ds.Grafo) => 13 sequences.
number of candidate components: 13
randoop.util.Randomness called by nextRandomInt: 139 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 140 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 141 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.proxAdj((int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo1.proxAdj((int)(short)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 142 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 13 methods.
getSequencesForType(ds.Grafo) => 13 sequences.
number of candidate components: 13
randoop.util.Randomness called by nextRandomInt: 143 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4bdea1cd [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
Adding sequence #14 of type ds.Grafo of length 16
Adding sequence #15 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 144 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 15 methods.
getSequencesForType(ds.Grafo) => 15 sequences.
number of candidate components: 15
randoop.util.Randomness called by nextRandomInt: 145 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@45e68d42 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
Adding sequence #16 of type ds.Grafo of length 5
Adding sequence #17 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 146 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 147 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 148 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);

isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #18 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 149 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 18 methods.
getSequencesForType(ds.Grafo) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 150 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@29654c65 [class ds.Grafo]
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Adding sequence #19 of type ds.Grafo of length 3
Adding sequence #20 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 151 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 20 methods.
getSequencesForType(ds.Grafo) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 152 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 153 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 154 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 155 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 156 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 157 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 158 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #21 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 159 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 21 methods.
getSequencesForType(ds.Grafo) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 160 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 161 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 162 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 163 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 164 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 165 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo1.retiraAresta((int)' ', (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1a9dd6aa [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 18
  Statement: ds.Grafo.Aresta aresta18 = grafo1.retiraAresta((int)' ', (int)'4');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 166 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 21 methods.
getSequencesForType(ds.Grafo) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 167 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 168 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 169 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 170 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 171 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)0, (-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Adding sequence #22 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 172 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 22 methods.
getSequencesForType(ds.Grafo) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 173 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 174 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 175 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 176 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 177 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Adding sequence #23 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 178 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 23 methods.
getSequencesForType(ds.Grafo) => 23 sequences.
number of candidate components: 23
randoop.util.Randomness called by nextRandomInt: 179 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence #24 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 180 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 24 methods.
getSequencesForType(ds.Grafo) => 24 sequences.
number of candidate components: 24
randoop.util.Randomness called by nextRandomInt: 181 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 182 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 183 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 184 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 185 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 186 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 187 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)(short)-1, (int)(byte)10, (int)(byte)10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 9
  Statement: grafo1.insereAresta((int)(short)-1, (int)(byte)10, (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 188 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 24 methods.
getSequencesForType(ds.Grafo) => 24 sequences.
number of candidate components: 24
randoop.util.Randomness called by nextRandomInt: 189 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@367fd94d [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Adding sequence #25 of type ds.Grafo of length 14
Adding sequence #26 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 190 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 26 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
getSequencesForType(java.lang.Object) => 27 sequences.
number of candidate components: 27
randoop.util.Randomness called by nextRandomInt: 191 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
java.lang.Class<?> wildcardClass2 = grafo1.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 2 active.
Adding sequence #5 of type java.lang.Class<?> of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 192 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 26 methods.
getSequencesForType(ds.Grafo) => 26 sequences.
number of candidate components: 26
randoop.util.Randomness called by nextRandomInt: 193 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 194 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 195 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 196 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 197 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
ds.Grafo.Aresta aresta4 = grafo1.retiraAresta(1, (int)'#');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.retiraAresta(1, (int)'#');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 198 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 199 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
getSequencesForType: found no sequences matching type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 200 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 26 methods.
getSequencesForType(ds.Grafo) => 26 sequences.
number of candidate components: 26
randoop.util.Randomness called by nextRandomInt: 201 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
Adding sequence #27 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 202 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 203 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 204 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 205 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 206 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 207 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 208 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');

isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #1 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 209 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 210 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 211 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);

isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #28 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 212 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 1 methods.
getSequencesForType(ds.Grafo$Aresta) => 1 sequences.
number of candidate components: 1
randoop.util.Randomness called by nextRandomInt: 213 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #6 of type int of length 1
Adding sequence #2 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 214 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 28 methods.
getSequencesForType(ds.Grafo) => 28 sequences.
number of candidate components: 28
randoop.util.Randomness called by nextRandomInt: 215 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@303e5874 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Adding sequence #29 of type ds.Grafo of length 14
Adding sequence #30 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 216 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 2 methods.
getSequencesForType(ds.Grafo$Aresta) => 2 sequences.
number of candidate components: 2
randoop.util.Randomness called by nextRandomInt: 217 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #3 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 218 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 30 methods.
getSequencesForType(ds.Grafo) => 30 sequences.
number of candidate components: 30
randoop.util.Randomness called by nextRandomInt: 219 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 220 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 221 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 222 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 223 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 224 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 225 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
grafo1.insereAresta((-1), (int)(byte)100, 10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 17
  Statement: grafo1.insereAresta((-1), (int)(byte)100, 10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 226 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 30 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 3 methods.
getSequencesForType(java.lang.Object) => 34 sequences.
number of candidate components: 34
randoop.util.Randomness called by nextRandomInt: 227 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
java.lang.Class<?> wildcardClass3 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 3 active.
Adding sequence #6 of type java.lang.Class<?> of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 228 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 30 methods.
getSequencesForType(ds.Grafo) => 30 sequences.
number of candidate components: 30
randoop.util.Randomness called by nextRandomInt: 229 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

randoop.util.Randomness called by weightedCoinFlip: 230 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 231 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 232 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 233 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 234 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 235 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #31 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 236 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 31 methods.
getSequencesForType(ds.Grafo) => 31 sequences.
number of candidate components: 31
randoop.util.Randomness called by nextRandomInt: 237 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 238 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 239 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 3 inactive (value is a primitive)
Adding sequence #32 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 240 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 3 methods.
getSequencesForType(ds.Grafo$Aresta) => 3 sequences.
number of candidate components: 3
randoop.util.Randomness called by nextRandomInt: 241 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 242 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 32 methods.
getSequencesForType(ds.Grafo) => 32 sequences.
number of candidate components: 32
randoop.util.Randomness called by nextRandomInt: 243 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 244 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 245 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
Adding sequence #33 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 246 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 247 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 248 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 249 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 250 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 251 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 252 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);

isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #4 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 253 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 33 methods.
getSequencesForType(ds.Grafo) => 33 sequences.
number of candidate components: 33
randoop.util.Randomness called by nextRandomInt: 254 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 255 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 256 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 257 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 258 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Adding sequence #34 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 259 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 4 methods.
getSequencesForType(ds.Grafo$Aresta) => 4 sequences.
number of candidate components: 4
randoop.util.Randomness called by nextRandomInt: 260 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 261 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 34 methods.
getSequencesForType(ds.Grafo) => 34 sequences.
number of candidate components: 34
randoop.util.Randomness called by nextRandomInt: 262 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 263 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 264 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 265 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 266 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 267 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 268 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #35 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 269 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 35 methods.
getSequencesForType(ds.Grafo) => 35 sequences.
number of candidate components: 35
randoop.util.Randomness called by nextRandomInt: 270 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #36 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 271 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 272 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 273 calls to Random so far
chosenSeq: short short0 = (short)10;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 274 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 36 methods.
getSequencesForType(ds.Grafo) => 36 sequences.
number of candidate components: 36
randoop.util.Randomness called by nextRandomInt: 275 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 276 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 277 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 278 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 36 methods.
getSequencesForType(ds.Grafo) => 36 sequences.
number of candidate components: 36
randoop.util.Randomness called by nextRandomInt: 279 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #37 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 280 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 37 methods.
getSequencesForType(ds.Grafo) => 37 sequences.
number of candidate components: 37
randoop.util.Randomness called by nextRandomInt: 281 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 282 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@54da6724 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 3 inactive (value is a primitive)
Adding sequence #38 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 283 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 284 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);

isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #39 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 285 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 39 methods.
getSequencesForType(ds.Grafo) => 39 sequences.
number of candidate components: 39
randoop.util.Randomness called by nextRandomInt: 286 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 287 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 288 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 289 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo1.primeiroListaAdj((int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@54933de2 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 17
  Statement: ds.Grafo.Aresta aresta17 = grafo1.primeiroListaAdj((int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 290 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 39 methods.
getSequencesForType(ds.Grafo) => 39 sequences.
number of candidate components: 39
randoop.util.Randomness called by nextRandomInt: 291 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 292 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@65643446 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
Adding sequence #40 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 293 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 294 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 295 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 296 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 297 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 298 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));

isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #5 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 299 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 300 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 301 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 302 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 303 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 304 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 305 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, (int)(byte)-1, (int)(byte)0);

isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #6 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 306 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 40 methods.
getSequencesForType(ds.Grafo) => 40 sequences.
number of candidate components: 40
randoop.util.Randomness called by nextRandomInt: 307 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 308 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 309 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 310 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@249b3fda [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
Adding sequence #41 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 311 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 6 methods.
getSequencesForType(ds.Grafo$Aresta) => 6 sequences.
number of candidate components: 6
randoop.util.Randomness called by nextRandomInt: 312 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #7 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 313 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 41 methods.
getSequencesForType(ds.Grafo) => 41 sequences.
number of candidate components: 41
randoop.util.Randomness called by nextRandomInt: 314 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 315 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 316 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 317 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7e0b5df [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
Adding sequence #42 of type ds.Grafo of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 318 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 42 methods.
getSequencesForType(ds.Grafo) => 42 sequences.
number of candidate components: 42
randoop.util.Randomness called by nextRandomInt: 319 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@58f4ace3 [class ds.Grafo]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #43 of type ds.Grafo of length 4
Adding sequence #44 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 320 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 44 methods.
getSequencesForType(ds.Grafo) => 44 sequences.
number of candidate components: 44
randoop.util.Randomness called by nextRandomInt: 321 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 322 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 323 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();
ds.Grafo.Aresta aresta5 = grafo2.proxAdj((int)'#');

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2a81c92 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo2.proxAdj((int)'#');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 324 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 325 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 326 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 327 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 328 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 329 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'a', (int)(short)10, 0);

isSideEffectFree => false for Statement [ a : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #8 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 330 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 331 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 332 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(32);

isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #45 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 333 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 334 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 6 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 335 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)100);

isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #46 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 336 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 46 methods.
getSequencesForType(ds.Grafo) => 46 sequences.
number of candidate components: 46
randoop.util.Randomness called by nextRandomInt: 337 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
Adding sequence #7 of type int of length 1
Adding sequence #47 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 338 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 47 methods.
getSequencesForType(ds.Grafo) => 47 sequences.
number of candidate components: 47
randoop.util.Randomness called by nextRandomInt: 339 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 340 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia(0);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 3 inactive (value is a primitive)
Adding sequence #48 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 341 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 48 methods.
getSequencesForType(ds.Grafo) => 48 sequences.
number of candidate components: 48
randoop.util.Randomness called by nextRandomInt: 342 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 343 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 344 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 345 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 346 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 347 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 348 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.insereAresta((int)'#', (int)(short)100, 100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: grafo1.insereAresta((int)'#', (int)(short)100, 100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 349 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 48 methods.
getSequencesForType(ds.Grafo) => 48 sequences.
number of candidate components: 48
randoop.util.Randomness called by nextRandomInt: 350 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

randoop.util.Randomness called by weightedCoinFlip: 351 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 352 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 353 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 354 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
Adding sequence #49 of type ds.Grafo of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 355 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 356 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 357 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 358 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 359 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 360 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 7 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 361 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #9 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 362 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 9 methods.
getSequencesForType(ds.Grafo$Aresta) => 9 sequences.
number of candidate components: 9
randoop.util.Randomness called by nextRandomInt: 363 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'a', (int)(short)10, 0);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'a', (int)(short)10, 0);
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ a : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #8 of type int of length 1
Adding sequence #10 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 364 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 49 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 10 methods.
getSequencesForType(java.lang.Object) => 60 sequences.
number of candidate components: 60
randoop.util.Randomness called by nextRandomInt: 365 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
java.lang.Class<?> wildcardClass4 = grafo1.getClass();

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 3 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #7 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 366 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 49 methods.
getSequencesForType(ds.Grafo) => 49 sequences.
number of candidate components: 49
randoop.util.Randomness called by nextRandomInt: 367 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
Adding sequence #50 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 368 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 50 methods.
getSequencesForType(ds.Grafo) => 50 sequences.
number of candidate components: 50
randoop.util.Randomness called by nextRandomInt: 369 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 370 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 371 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 372 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta16 = grafo1.retiraAresta(0, (int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo1.retiraAresta(0, (int)(short)0);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 373 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 50 methods.
getSequencesForType(ds.Grafo) => 50 sequences.
number of candidate components: 50
randoop.util.Randomness called by nextRandomInt: 374 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 375 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 376 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@47dc56d8 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #51 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 377 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 51 methods.
getSequencesForType(ds.Grafo) => 51 sequences.
number of candidate components: 51
randoop.util.Randomness called by nextRandomInt: 378 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 379 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 380 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
Adding sequence #52 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 381 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 52 methods.
getSequencesForType(ds.Grafo) => 52 sequences.
number of candidate components: 52
randoop.util.Randomness called by nextRandomInt: 382 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 383 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 384 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 385 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 386 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Adding sequence #53 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 387 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 53 methods.
getSequencesForType(ds.Grafo) => 53 sequences.
number of candidate components: 53
randoop.util.Randomness called by nextRandomInt: 388 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
Adding sequence #54 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 389 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 10 methods.
getSequencesForType(ds.Grafo$Aresta) => 10 sequences.
number of candidate components: 10
randoop.util.Randomness called by nextRandomInt: 390 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 391 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 392 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 393 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 394 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 395 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 396 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');

isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #11 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 397 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 54 methods.
getSequencesForType(ds.Grafo) => 54 sequences.
number of candidate components: 54
randoop.util.Randomness called by nextRandomInt: 398 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 399 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 400 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 401 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 402 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta7 = grafo1.retiraAresta(32, (int)(short)1);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo1.retiraAresta(32, (int)(short)1);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 403 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 54 methods.
getSequencesForType(ds.Grafo) => 54 sequences.
number of candidate components: 54
randoop.util.Randomness called by nextRandomInt: 404 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 405 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 406 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 407 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 408 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta21 = grafo1.retiraAresta((int)(byte)-1, (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 21
  Statement: ds.Grafo.Aresta aresta21 = grafo1.retiraAresta((int)(byte)-1, (int)(byte)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 409 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 54 methods.
getSequencesForType(ds.Grafo) => 54 sequences.
number of candidate components: 54
randoop.util.Randomness called by nextRandomInt: 410 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 411 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 412 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 413 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 54 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 11 methods.
getSequencesForType(java.lang.Object) => 66 sequences.
number of candidate components: 66
randoop.util.Randomness called by nextRandomInt: 414 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 415 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
java.lang.Class<?> wildcardClass3 = grafo2.getClass();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1f9fc478 [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 3 active.
Adding sequence #8 of type java.lang.Class<?> of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 416 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 54 methods.
getSequencesForType(ds.Grafo) => 54 sequences.
number of candidate components: 54
randoop.util.Randomness called by nextRandomInt: 417 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7775419 [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Adding sequence #55 of type ds.Grafo of length 3
Adding sequence #56 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 418 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 56 methods.
getSequencesForType(ds.Grafo) => 56 sequences.
number of candidate components: 56
randoop.util.Randomness called by nextRandomInt: 419 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 420 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 421 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();
boolean boolean4 = grafo1.listaAdjVazia((int)(byte)-1);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.listaAdjVazia((int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.listaAdjVazia(Grafo.java:36)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 422 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 56 methods.
getSequencesForType(ds.Grafo) => 56 sequences.
number of candidate components: 56
randoop.util.Randomness called by nextRandomInt: 423 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4dd72560 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
Adding sequence #57 of type ds.Grafo of length 11
Adding sequence #58 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 424 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 11 methods.
getSequencesForType(ds.Grafo$Aresta) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 425 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #12 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 426 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 58 methods.
getSequencesForType(ds.Grafo) => 58 sequences.
number of candidate components: 58
randoop.util.Randomness called by nextRandomInt: 427 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 428 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 429 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 430 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(35);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@27975aae [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.proxAdj(35);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 431 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 58 methods.
getSequencesForType(ds.Grafo) => 58 sequences.
number of candidate components: 58
randoop.util.Randomness called by nextRandomInt: 432 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 433 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 434 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 435 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 436 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 437 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 438 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 439 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
grafo1.insereAresta((int)' ', (int)(byte)-1, (int)(byte)10);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@26ce3ad5 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: grafo1.insereAresta((int)' ', (int)(byte)-1, (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 440 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 58 methods.
getSequencesForType(ds.Grafo) => 58 sequences.
number of candidate components: 58
randoop.util.Randomness called by nextRandomInt: 441 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);

randoop.util.Randomness called by weightedCoinFlip: 442 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 443 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
ds.Grafo.Aresta aresta17 = grafo13.proxAdj(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5856a715 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #59 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 444 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 59 methods.
getSequencesForType(ds.Grafo) => 59 sequences.
number of candidate components: 59
randoop.util.Randomness called by nextRandomInt: 445 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);

randoop.util.Randomness called by weightedCoinFlip: 446 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 447 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 448 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 449 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 13 inactive (value is a primitive)
Adding sequence #60 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 450 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 60 methods.
getSequencesForType(ds.Grafo) => 60 sequences.
number of candidate components: 60
randoop.util.Randomness called by nextRandomInt: 451 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 452 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 453 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 454 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 455 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 456 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 457 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)0, (int)(short)10, 100);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence #61 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 458 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 12 methods.
getSequencesForType(ds.Grafo$Aresta) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 459 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #13 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 460 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 61 methods.
getSequencesForType(ds.Grafo) => 61 sequences.
number of candidate components: 61
randoop.util.Randomness called by nextRandomInt: 461 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 462 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 463 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #62 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 464 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 62 methods.
getSequencesForType(ds.Grafo) => 62 sequences.
number of candidate components: 62
randoop.util.Randomness called by nextRandomInt: 465 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 466 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 467 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 468 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 469 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 470 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 471 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 472 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo15.insereAresta((int)(byte)10, (int)(byte)100, 97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7f10c991 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #63 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 473 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 63 methods.
getSequencesForType(ds.Grafo) => 63 sequences.
number of candidate components: 63
randoop.util.Randomness called by nextRandomInt: 474 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 475 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@314049d6 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
Adding sequence #64 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 476 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 64 methods.
getSequencesForType(ds.Grafo) => 64 sequences.
number of candidate components: 64
randoop.util.Randomness called by nextRandomInt: 477 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5640e97b [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
Adding sequence #65 of type ds.Grafo of length 15
Adding sequence #66 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 478 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 66 methods.
getSequencesForType(ds.Grafo) => 66 sequences.
number of candidate components: 66
randoop.util.Randomness called by nextRandomInt: 479 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 480 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 481 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo.Aresta aresta3 = grafo1.primeiroListaAdj(32);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 3
  Statement: ds.Grafo.Aresta aresta3 = grafo1.primeiroListaAdj(32);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 482 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 66 methods.
getSequencesForType(ds.Grafo) => 66 sequences.
number of candidate components: 66
randoop.util.Randomness called by nextRandomInt: 483 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 484 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 485 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 486 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 487 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 488 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo2.retiraAresta(32, (int)(short)-1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@242e152e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo2.retiraAresta(32, (int)(short)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 489 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 13 methods.
getSequencesForType(ds.Grafo$Aresta) => 13 sequences.
number of candidate components: 13
randoop.util.Randomness called by nextRandomInt: 490 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #14 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 491 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 66 methods.
getSequencesForType(ds.Grafo) => 66 sequences.
number of candidate components: 66
randoop.util.Randomness called by nextRandomInt: 492 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence #67 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 493 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 67 methods.
getSequencesForType(ds.Grafo) => 67 sequences.
number of candidate components: 67
randoop.util.Randomness called by nextRandomInt: 494 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 495 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 496 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 497 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 498 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 499 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 500 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@51bb167e [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #68 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 501 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 502 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 503 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((-1));

Excluding from extension pool due to exception or failure in statement 1
  Statement: ds.Grafo grafo1 = new ds.Grafo((-1));
  Result: [ExceptionalExecution, java.lang.NegativeArraySizeException, at ds.Grafo.<init>(Grafo.java:24)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 504 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 68 methods.
getSequencesForType(ds.Grafo) => 68 sequences.
number of candidate components: 68
randoop.util.Randomness called by nextRandomInt: 505 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 506 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 507 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 508 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 509 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 510 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta7 = grafo4.retiraAresta((-1), (int)(byte)100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@59248a23 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo4.retiraAresta((-1), (int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 511 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 68 methods.
getSequencesForType(ds.Grafo) => 68 sequences.
number of candidate components: 68
randoop.util.Randomness called by nextRandomInt: 512 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2598516b [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Adding sequence #69 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 513 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 69 methods.
getSequencesForType(ds.Grafo) => 69 sequences.
number of candidate components: 69
randoop.util.Randomness called by nextRandomInt: 514 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 515 calls to Random so far
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 516 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 69 methods.
getSequencesForType(ds.Grafo) => 69 sequences.
number of candidate components: 69
randoop.util.Randomness called by nextRandomInt: 517 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);

randoop.util.Randomness called by weightedCoinFlip: 518 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 519 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 520 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 521 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
boolean boolean4 = grafo1.existeAresta((int)(short)100, (int)(short)0);

MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 100 [class java.lang.Short]
  Param 1 = 0 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.existeAresta((int)(short)100, (int)(short)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 522 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 69 methods.
getSequencesForType(ds.Grafo) => 69 sequences.
number of candidate components: 69
randoop.util.Randomness called by nextRandomInt: 523 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 524 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 525 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 526 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 527 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 528 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 529 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence #70 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 530 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 70 methods.
getSequencesForType(ds.Grafo) => 70 sequences.
number of candidate components: 70
randoop.util.Randomness called by nextRandomInt: 531 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);

randoop.util.Randomness called by weightedCoinFlip: 532 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 533 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 534 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 535 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean23 = grafo1.existeAresta((int)'#', (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 23 inactive (value is a primitive)
Adding sequence #71 of type ds.Grafo of length 24
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 536 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 71 methods.
getSequencesForType(ds.Grafo) => 71 sequences.
number of candidate components: 71
randoop.util.Randomness called by nextRandomInt: 537 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@25c8fb2b [class ds.Grafo]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Adding sequence #72 of type ds.Grafo of length 3
Adding sequence #73 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 538 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 73 methods.
getSequencesForType(ds.Grafo) => 73 sequences.
number of candidate components: 73
randoop.util.Randomness called by nextRandomInt: 539 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);
ds.Grafo grafo10 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
Excluding from extension pool due to exception or failure in statement 10
  Statement: ds.Grafo grafo10 = grafo1.grafoTransposto();
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 540 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 73 methods.
getSequencesForType(ds.Grafo) => 73 sequences.
number of candidate components: 73
randoop.util.Randomness called by nextRandomInt: 541 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 542 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 543 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 544 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 545 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();
boolean boolean5 = grafo1.existeAresta((int)(byte)0, 0);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 5 inactive (value is a primitive)
Adding sequence #74 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 546 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 74 methods.
getSequencesForType(ds.Grafo) => 74 sequences.
number of candidate components: 74
randoop.util.Randomness called by nextRandomInt: 547 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 548 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 549 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence #75 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 550 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 14 methods.
getSequencesForType(ds.Grafo$Aresta) => 14 sequences.
number of candidate components: 14
randoop.util.Randomness called by nextRandomInt: 551 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, (int)(byte)-1, (int)(byte)0);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, (int)(byte)-1, (int)(byte)0);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #15 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 552 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 75 methods.
getSequencesForType(ds.Grafo) => 75 sequences.
number of candidate components: 75
randoop.util.Randomness called by nextRandomInt: 553 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@37201494 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@77a179d2 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
Adding sequence #76 of type ds.Grafo of length 8
Adding sequence #77 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 554 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 77 methods.
getSequencesForType(ds.Grafo) => 77 sequences.
number of candidate components: 77
randoop.util.Randomness called by nextRandomInt: 555 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 556 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 77 methods.
getSequencesForType(ds.Grafo) => 77 sequences.
number of candidate components: 77
randoop.util.Randomness called by nextRandomInt: 557 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 558 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6e53978c [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@60ff0da7 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
Adding sequence #78 of type ds.Grafo of length 15
Adding sequence #79 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 559 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 79 methods.
getSequencesForType(ds.Grafo) => 79 sequences.
number of candidate components: 79
randoop.util.Randomness called by nextRandomInt: 560 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 561 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 562 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 563 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 564 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');
ds.Grafo.Aresta aresta21 = grafo15.retiraAresta((int)'#', (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@779057db [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 21
  Statement: ds.Grafo.Aresta aresta21 = grafo15.retiraAresta((int)'#', (int)(byte)100);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 565 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 566 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 567 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'4');

isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #80 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 568 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 80 methods.
getSequencesForType(ds.Grafo) => 80 sequences.
number of candidate components: 80
randoop.util.Randomness called by nextRandomInt: 569 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@73594cee [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
Adding sequence #81 of type ds.Grafo of length 19
Adding sequence #82 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 570 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 15 methods.
getSequencesForType(ds.Grafo$Aresta) => 15 sequences.
number of candidate components: 15
randoop.util.Randomness called by nextRandomInt: 571 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #16 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 572 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
getSequencesForType(ds.Grafo) => 82 sequences.
number of candidate components: 82
randoop.util.Randomness called by nextRandomInt: 573 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 574 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 575 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 576 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta4 = grafo2.proxAdj((int)(short)0);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@616120e8 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo2.proxAdj((int)(short)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 577 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 578 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 579 calls to Random so far
chosenSeq: int int0 = (-1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 580 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
getSequencesForType(ds.Grafo) => 82 sequences.
number of candidate components: 82
randoop.util.Randomness called by nextRandomInt: 581 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 582 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 583 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 584 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 585 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 586 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 587 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
grafo1.insereAresta(100, 1, 0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 100 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 17
  Statement: grafo1.insereAresta(100, 1, 0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 588 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 16 methods.
getSequencesForType(java.lang.Object) => 99 sequences.
number of candidate components: 99
randoop.util.Randomness called by nextRandomInt: 589 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 590 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
java.lang.Class<?> wildcardClass3 = grafo2.getClass();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@f5d3fcf [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 3 active.
Adding sequence #9 of type java.lang.Class<?> of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 591 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 16 methods.
getSequencesForType(ds.Grafo$Aresta) => 16 sequences.
number of candidate components: 16
randoop.util.Randomness called by nextRandomInt: 592 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #17 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 593 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
getSequencesForType(ds.Grafo) => 82 sequences.
number of candidate components: 82
randoop.util.Randomness called by nextRandomInt: 594 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean23 = grafo1.existeAresta((int)'#', (int)'4');

randoop.util.Randomness called by weightedCoinFlip: 595 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 596 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean23 = grafo1.existeAresta((int)'#', (int)'4');
ds.Grafo.Aresta aresta25 = grafo1.primeiroListaAdj((int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 25
  Statement: ds.Grafo.Aresta aresta25 = grafo1.primeiroListaAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 597 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 17 methods.
getSequencesForType(ds.Grafo$Aresta) => 17 sequences.
number of candidate components: 17
randoop.util.Randomness called by nextRandomInt: 598 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 599 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 17 methods.
getSequencesForType(java.lang.Object) => 100 sequences.
number of candidate components: 100
randoop.util.Randomness called by nextRandomInt: 600 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();
java.lang.Class<?> wildcardClass3 = grafo1.getClass();

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 3 active.
Adding sequence #10 of type java.lang.Class<?> of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 601 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
getSequencesForType(ds.Grafo) => 82 sequences.
number of candidate components: 82
randoop.util.Randomness called by nextRandomInt: 602 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 603 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 82 methods.
getSequencesForType(ds.Grafo) => 82 sequences.
number of candidate components: 82
randoop.util.Randomness called by nextRandomInt: 604 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);

randoop.util.Randomness called by weightedCoinFlip: 605 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 606 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
Adding sequence #83 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 607 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 17 methods.
getSequencesForType(ds.Grafo$Aresta) => 17 sequences.
number of candidate components: 17
randoop.util.Randomness called by nextRandomInt: 608 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #18 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 609 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 83 methods.
getSequencesForType(ds.Grafo) => 83 sequences.
number of candidate components: 83
randoop.util.Randomness called by nextRandomInt: 610 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 611 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 612 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 613 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj((-1));

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@b4099a2 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj((-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 614 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 83 methods.
getSequencesForType(ds.Grafo) => 83 sequences.
number of candidate components: 83
randoop.util.Randomness called by nextRandomInt: 615 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 616 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 617 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 618 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 619 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 620 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta16 = grafo1.retiraAresta((int)(byte)10, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@61514dec [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo1.retiraAresta((int)(byte)10, 32);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 621 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 622 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 623 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 624 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 625 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 626 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 627 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, (int)(byte)0, (int)'a');

isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #19 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 628 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 83 methods.
getSequencesForType(ds.Grafo) => 83 sequences.
number of candidate components: 83
randoop.util.Randomness called by nextRandomInt: 629 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@28fc92eb [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Adding sequence #84 of type ds.Grafo of length 3
Adding sequence #85 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 630 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 85 methods.
getSequencesForType(ds.Grafo) => 85 sequences.
number of candidate components: 85
randoop.util.Randomness called by nextRandomInt: 631 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 632 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 633 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();
boolean boolean4 = grafo1.listaAdjVazia((int)' ');

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.listaAdjVazia((int)' ');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.listaAdjVazia(Grafo.java:36)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 634 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 85 methods.
getSequencesForType(ds.Grafo) => 85 sequences.
number of candidate components: 85
randoop.util.Randomness called by nextRandomInt: 635 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 636 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@478527d [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
Adding sequence #86 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 637 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 86 methods.
getSequencesForType(ds.Grafo) => 86 sequences.
number of candidate components: 86
randoop.util.Randomness called by nextRandomInt: 638 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)100);
int int2 = grafo1.numVertices();

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
Adding sequence #87 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 639 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 640 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 641 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'a');

isSideEffectFree => false for Statement [ a : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #88 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 642 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 88 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 19 methods.
getSequencesForType(java.lang.Object) => 108 sequences.
number of candidate components: 108
randoop.util.Randomness called by nextRandomInt: 643 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 644 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
java.lang.Class<?> wildcardClass3 = grafo2.getClass();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1ac8f289 [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 3 active.
Adding sequence #11 of type java.lang.Class<?> of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 645 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 88 methods.
getSequencesForType(ds.Grafo) => 88 sequences.
number of candidate components: 88
randoop.util.Randomness called by nextRandomInt: 646 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 647 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 648 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 649 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta16 = grafo14.primeiroListaAdj((int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@278537d5 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo14.primeiroListaAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 650 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 88 methods.
getSequencesForType(ds.Grafo) => 88 sequences.
number of candidate components: 88
randoop.util.Randomness called by nextRandomInt: 651 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
ds.Grafo grafo14 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@198d505c [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
Adding sequence #89 of type ds.Grafo of length 15
Adding sequence #90 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 652 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 90 methods.
getSequencesForType(ds.Grafo) => 90 sequences.
number of candidate components: 90
randoop.util.Randomness called by nextRandomInt: 653 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 654 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 655 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Adding sequence #91 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 656 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 19 methods.
getSequencesForType(ds.Grafo$Aresta) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 657 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #20 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 658 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 659 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 660 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);

isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #92 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 661 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 92 methods.
getSequencesForType(ds.Grafo) => 92 sequences.
number of candidate components: 92
randoop.util.Randomness called by nextRandomInt: 662 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 663 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 664 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 665 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1459739 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #93 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 666 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 20 methods.
getSequencesForType(ds.Grafo$Aresta) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 667 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 668 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 93 methods.
getSequencesForType(ds.Grafo) => 93 sequences.
number of candidate components: 93
randoop.util.Randomness called by nextRandomInt: 669 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 670 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 671 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 672 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 673 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 674 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 675 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 676 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
grafo2.insereAresta(97, (int)(byte)1, (int)(short)10);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@622c013e [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: grafo2.insereAresta(97, (int)(byte)1, (int)(short)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 677 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 93 methods.
getSequencesForType(ds.Grafo) => 93 sequences.
number of candidate components: 93
randoop.util.Randomness called by nextRandomInt: 678 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);

randoop.util.Randomness called by weightedCoinFlip: 679 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 680 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 681 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 682 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)'#', (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #94 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 683 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 684 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 685 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 686 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 687 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 688 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 689 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(97, (int)'a', 100);

isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #21 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 690 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 94 methods.
getSequencesForType(ds.Grafo) => 94 sequences.
number of candidate components: 94
randoop.util.Randomness called by nextRandomInt: 691 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 692 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 693 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 694 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 695 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 696 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@34888aa0 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #95 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 697 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 95 methods.
getSequencesForType(ds.Grafo) => 95 sequences.
number of candidate components: 95
randoop.util.Randomness called by nextRandomInt: 698 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 699 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 700 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 701 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 702 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 703 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7dd78a13 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Adding sequence #96 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 704 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 96 methods.
getSequencesForType(ds.Grafo) => 96 sequences.
number of candidate components: 96
randoop.util.Randomness called by nextRandomInt: 705 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 706 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 707 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 708 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6b4ab428 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@273a5be5 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence #97 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 709 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 97 methods.
getSequencesForType(ds.Grafo) => 97 sequences.
number of candidate components: 97
randoop.util.Randomness called by nextRandomInt: 710 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 711 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
grafo1.imprime();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@a8c1ddf [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence #98 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 712 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 713 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 714 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 715 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 716 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 717 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 718 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', (-1), 1);

isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #22 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 719 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 720 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 721 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 722 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 723 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 724 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 725 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');

isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #23 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 726 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 98 methods.
getSequencesForType(ds.Grafo) => 98 sequences.
number of candidate components: 98
randoop.util.Randomness called by nextRandomInt: 727 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@54851419 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
Adding sequence #99 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 728 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 23 methods.
getSequencesForType(ds.Grafo$Aresta) => 23 sequences.
number of candidate components: 23
randoop.util.Randomness called by nextRandomInt: 729 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 730 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 23 methods.
getSequencesForType(ds.Grafo$Aresta) => 23 sequences.
number of candidate components: 23
randoop.util.Randomness called by nextRandomInt: 731 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #24 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 732 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 99 methods.
getSequencesForType(ds.Grafo) => 99 sequences.
number of candidate components: 99
randoop.util.Randomness called by nextRandomInt: 733 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 734 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@62b612b9 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7b40ef51 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
Adding sequence #100 of type ds.Grafo of length 17
Adding sequence #101 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 735 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 24 methods.
getSequencesForType(ds.Grafo$Aresta) => 24 sequences.
number of candidate components: 24
randoop.util.Randomness called by nextRandomInt: 736 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #25 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 737 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 25 methods.
getSequencesForType(ds.Grafo$Aresta) => 25 sequences.
number of candidate components: 25
randoop.util.Randomness called by nextRandomInt: 738 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #26 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 739 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 101 methods.
getSequencesForType(ds.Grafo) => 101 sequences.
number of candidate components: 101
randoop.util.Randomness called by nextRandomInt: 740 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4b14d3b0 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@47e57000 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
Adding sequence #102 of type ds.Grafo of length 19
Adding sequence #103 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 741 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 103 methods.
getSequencesForType(ds.Grafo) => 103 sequences.
number of candidate components: 103
randoop.util.Randomness called by nextRandomInt: 742 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 743 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 744 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 745 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
boolean boolean4 = grafo2.listaAdjVazia((int)(byte)0);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@653183cc [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo2.listaAdjVazia((int)(byte)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.listaAdjVazia(Grafo.java:36)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 746 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 103 methods.
getSequencesForType(ds.Grafo) => 103 sequences.
number of candidate components: 103
randoop.util.Randomness called by nextRandomInt: 747 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
Adding sequence #104 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 748 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 104 methods.
getSequencesForType(ds.Grafo) => 104 sequences.
number of candidate components: 104
randoop.util.Randomness called by nextRandomInt: 749 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 750 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 751 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 752 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta4 = grafo2.primeiroListaAdj((int)'4');

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@188c613a [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo2.primeiroListaAdj((int)'4');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 753 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 26 methods.
getSequencesForType(ds.Grafo$Aresta) => 26 sequences.
number of candidate components: 26
randoop.util.Randomness called by nextRandomInt: 754 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #27 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 755 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 27 methods.
getSequencesForType(ds.Grafo$Aresta) => 27 sequences.
number of candidate components: 27
randoop.util.Randomness called by nextRandomInt: 756 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 757 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 758 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 759 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 760 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 761 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 762 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 763 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);

isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #28 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 764 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 104 methods.
getSequencesForType(ds.Grafo) => 104 sequences.
number of candidate components: 104
randoop.util.Randomness called by nextRandomInt: 765 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 766 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 767 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 768 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
ds.Grafo.Aresta aresta16 = grafo14.proxAdj((int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@69605cf6 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@10bdb1af [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo14.proxAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 769 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 28 methods.
getSequencesForType(ds.Grafo$Aresta) => 28 sequences.
number of candidate components: 28
randoop.util.Randomness called by nextRandomInt: 770 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #29 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 771 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 104 methods.
getSequencesForType(ds.Grafo) => 104 sequences.
number of candidate components: 104
randoop.util.Randomness called by nextRandomInt: 772 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 773 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 774 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.primeiroListaAdj(35);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@140141d4 [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 16 active.
Adding sequence #30 of type ds.Grafo$Aresta of length 17
Adding sequence #105 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 775 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 105 methods.
getSequencesForType(ds.Grafo) => 105 sequences.
number of candidate components: 105
randoop.util.Randomness called by nextRandomInt: 776 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 777 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 778 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.proxAdj((-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 779 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 105 methods.
getSequencesForType(ds.Grafo) => 105 sequences.
number of candidate components: 105
randoop.util.Randomness called by nextRandomInt: 780 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 781 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3dea9d4b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6fd824b6 [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #106 of type ds.Grafo of length 4
Adding sequence #107 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 782 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 107 methods.
getSequencesForType(ds.Grafo) => 107 sequences.
number of candidate components: 107
randoop.util.Randomness called by nextRandomInt: 783 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 784 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 785 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean15 = grafo1.listaAdjVazia((int)(byte)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
Adding sequence #108 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 786 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 108 methods.
getSequencesForType(ds.Grafo) => 108 sequences.
number of candidate components: 108
randoop.util.Randomness called by nextRandomInt: 787 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 788 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 789 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
Adding sequence #109 of type ds.Grafo of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 790 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 109 methods.
getSequencesForType(ds.Grafo) => 109 sequences.
number of candidate components: 109
randoop.util.Randomness called by nextRandomInt: 791 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 792 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 793 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 794 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 795 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 796 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 797 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');
grafo1.insereAresta(0, (int)'a', (int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = a [class java.lang.Character]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #110 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 798 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 30 methods.
getSequencesForType(ds.Grafo$Aresta) => 30 sequences.
number of candidate components: 30
randoop.util.Randomness called by nextRandomInt: 799 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.primeiroListaAdj(35);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.primeiroListaAdj(35);
int int17 = aresta16.peso();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@85ed5f5 [class ds.Grafo$Aresta]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 16 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 17 inactive (value is a primitive)
Adding sequence #31 of type ds.Grafo$Aresta of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 800 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 110 methods.
getSequencesForType(ds.Grafo) => 110 sequences.
number of candidate components: 110
randoop.util.Randomness called by nextRandomInt: 801 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 802 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 803 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 804 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 805 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 806 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 807 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 808 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #32 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 809 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 32 methods.
getSequencesForType(ds.Grafo$Aresta) => 32 sequences.
number of candidate components: 32
randoop.util.Randomness called by nextRandomInt: 810 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #33 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 811 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 110 methods.
getSequencesForType(ds.Grafo) => 110 sequences.
number of candidate components: 110
randoop.util.Randomness called by nextRandomInt: 812 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));

randoop.util.Randomness called by weightedCoinFlip: 813 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 814 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo.Aresta aresta17 = grafo1.primeiroListaAdj(1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #111 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 815 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 111 methods.
getSequencesForType(ds.Grafo) => 111 sequences.
number of candidate components: 111
randoop.util.Randomness called by nextRandomInt: 816 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 817 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 818 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'4');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 3
  Statement: ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'4');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 819 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 111 methods.
getSequencesForType(ds.Grafo) => 111 sequences.
number of candidate components: 111
randoop.util.Randomness called by nextRandomInt: 820 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 821 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 822 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 823 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 824 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo.Aresta aresta4 = grafo1.retiraAresta(35, (int)'#');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.retiraAresta(35, (int)'#');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 825 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 111 methods.
getSequencesForType(ds.Grafo) => 111 sequences.
number of candidate components: 111
randoop.util.Randomness called by nextRandomInt: 826 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 827 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 828 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@62d1c7aa [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6431549e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 11 inactive (value is a primitive)
Adding sequence #112 of type ds.Grafo of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 829 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 112 methods.
getSequencesForType(ds.Grafo) => 112 sequences.
number of candidate components: 112
randoop.util.Randomness called by nextRandomInt: 830 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 831 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 832 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 833 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta4 = grafo2.primeiroListaAdj((int)(byte)10);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3186eecc [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo2.primeiroListaAdj((int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 834 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 112 methods.
getSequencesForType(ds.Grafo) => 112 sequences.
number of candidate components: 112
randoop.util.Randomness called by nextRandomInt: 835 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)100);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 836 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 837 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)100);
int int2 = grafo1.numVertices();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)(short)100);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 838 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 112 methods.
getSequencesForType(ds.Grafo) => 112 sequences.
number of candidate components: 112
randoop.util.Randomness called by nextRandomInt: 839 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 840 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 841 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 842 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 843 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');
ds.Grafo.Aresta aresta18 = grafo1.retiraAresta((-1), (int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 18
  Statement: ds.Grafo.Aresta aresta18 = grafo1.retiraAresta((-1), (int)'#');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 844 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 112 methods.
getSequencesForType(ds.Grafo) => 112 sequences.
number of candidate components: 112
randoop.util.Randomness called by nextRandomInt: 845 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 846 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo1.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@25c0a9ec [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 3 inactive (value is a primitive)
Adding sequence #113 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 847 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 113 methods.
getSequencesForType(ds.Grafo) => 113 sequences.
number of candidate components: 113
randoop.util.Randomness called by nextRandomInt: 848 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 849 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 850 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 851 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 852 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
ds.Grafo.Aresta aresta8 = grafo1.retiraAresta(100, 100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 100 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 8
  Statement: ds.Grafo.Aresta aresta8 = grafo1.retiraAresta(100, 100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 853 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 113 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 33 methods.
getSequencesForType(java.lang.Object) => 147 sequences.
number of candidate components: 147
randoop.util.Randomness called by nextRandomInt: 854 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
java.lang.Class<?> wildcardClass2 = grafo1.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 2 active.
Adding sequence #12 of type java.lang.Class<?> of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 855 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 113 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 33 methods.
getSequencesForType(java.lang.Object) => 147 sequences.
number of candidate components: 147
randoop.util.Randomness called by nextRandomInt: 856 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
java.lang.Class<?> wildcardClass19 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@ce960a9 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 19 active.
Adding sequence #13 of type java.lang.Class<?> of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 857 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 113 methods.
getSequencesForType(ds.Grafo) => 113 sequences.
number of candidate components: 113
randoop.util.Randomness called by nextRandomInt: 858 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 859 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 860 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 861 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 862 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta(0, (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 15
  Statement: ds.Grafo.Aresta aresta15 = grafo1.retiraAresta(0, (int)'4');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 863 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 113 methods.
getSequencesForType(ds.Grafo) => 113 sequences.
number of candidate components: 113
randoop.util.Randomness called by nextRandomInt: 864 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)100);

randoop.util.Randomness called by weightedCoinFlip: 865 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 866 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 867 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 868 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)100);
ds.Grafo.Aresta aresta4 = grafo1.retiraAresta((int)'4', 10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 4 [class java.lang.Character]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.retiraAresta((int)'4', 10);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 869 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 113 methods.
getSequencesForType(ds.Grafo) => 113 sequences.
number of candidate components: 113
randoop.util.Randomness called by nextRandomInt: 870 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 871 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 872 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 873 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 874 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 875 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5a8a888b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7388fb62 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 17 inactive (value is a primitive)
Adding sequence #114 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 876 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 114 methods.
getSequencesForType(ds.Grafo) => 114 sequences.
number of candidate components: 114
randoop.util.Randomness called by nextRandomInt: 877 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 878 calls to Random so far
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 879 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 33 methods.
getSequencesForType(ds.Grafo$Aresta) => 33 sequences.
number of candidate components: 33
randoop.util.Randomness called by nextRandomInt: 880 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #34 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 881 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 114 methods.
getSequencesForType(ds.Grafo) => 114 sequences.
number of candidate components: 114
randoop.util.Randomness called by nextRandomInt: 882 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);

randoop.util.Randomness called by weightedCoinFlip: 883 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 884 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta19 = grafo1.primeiroListaAdj((int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #115 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 885 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 115 methods.
getSequencesForType(ds.Grafo) => 115 sequences.
number of candidate components: 115
randoop.util.Randomness called by nextRandomInt: 886 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 887 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 888 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 889 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 890 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 891 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 892 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.insereAresta((int)(byte)-1, 0, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@36349dc3 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 17
  Statement: grafo13.insereAresta((int)(byte)-1, 0, (int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 893 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 115 methods.
getSequencesForType(ds.Grafo) => 115 sequences.
number of candidate components: 115
randoop.util.Randomness called by nextRandomInt: 894 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 895 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 896 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 897 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 898 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 899 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta21 = grafo1.retiraAresta(97, 0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@22d318c3 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 21
  Statement: ds.Grafo.Aresta aresta21 = grafo1.retiraAresta(97, 0);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 900 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 115 methods.
getSequencesForType(ds.Grafo) => 115 sequences.
number of candidate components: 115
randoop.util.Randomness called by nextRandomInt: 901 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 902 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 903 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 904 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 905 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
ds.Grafo.Aresta aresta12 = grafo7.retiraAresta((int)' ', 0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1af2ebb [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@790dee73 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 12
  Statement: ds.Grafo.Aresta aresta12 = grafo7.retiraAresta((int)' ', 0);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 906 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 115 methods.
getSequencesForType(ds.Grafo) => 115 sequences.
number of candidate components: 115
randoop.util.Randomness called by nextRandomInt: 907 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 908 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 909 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 910 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 911 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 912 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 913 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 914 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(97, (int)(byte)100, (int)(short)100);

isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #35 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 915 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 115 methods.
getSequencesForType(ds.Grafo) => 115 sequences.
number of candidate components: 115
randoop.util.Randomness called by nextRandomInt: 916 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 917 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 918 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();
boolean boolean21 = grafo1.listaAdjVazia(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@59b96e3a [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #116 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 919 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 35 methods.
getSequencesForType(ds.Grafo$Aresta) => 35 sequences.
number of candidate components: 35
randoop.util.Randomness called by nextRandomInt: 920 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #36 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 921 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 922 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 923 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(97);

isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #117 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 924 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 117 methods.
getSequencesForType(ds.Grafo) => 117 sequences.
number of candidate components: 117
randoop.util.Randomness called by nextRandomInt: 925 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 926 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 927 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();
ds.Grafo.Aresta aresta4 = grafo1.proxAdj((-1));

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.proxAdj((-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 928 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 117 methods.
getSequencesForType(ds.Grafo) => 117 sequences.
number of candidate components: 117
randoop.util.Randomness called by nextRandomInt: 929 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);

randoop.util.Randomness called by weightedCoinFlip: 930 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 931 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 932 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 933 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@719063e5 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
Adding sequence #118 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 934 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 36 methods.
getSequencesForType(ds.Grafo$Aresta) => 36 sequences.
number of candidate components: 36
randoop.util.Randomness called by nextRandomInt: 935 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #37 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 936 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 118 methods.
getSequencesForType(ds.Grafo) => 118 sequences.
number of candidate components: 118
randoop.util.Randomness called by nextRandomInt: 937 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 938 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 939 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 940 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 941 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@652ee87b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@163c89c0 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
Adding sequence #119 of type ds.Grafo of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 942 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 119 methods.
getSequencesForType(ds.Grafo) => 119 sequences.
number of candidate components: 119
randoop.util.Randomness called by nextRandomInt: 943 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 944 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 945 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 946 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 947 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 948 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo10.retiraAresta((-1), 97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@605f3f5b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 13
  Statement: ds.Grafo.Aresta aresta13 = grafo10.retiraAresta((-1), 97);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 949 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 119 methods.
getSequencesForType(ds.Grafo) => 119 sequences.
number of candidate components: 119
randoop.util.Randomness called by nextRandomInt: 950 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 951 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 952 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();
ds.Grafo.Aresta aresta18 = grafo1.primeiroListaAdj(0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #120 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 953 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 120 methods.
getSequencesForType(ds.Grafo) => 120 sequences.
number of candidate components: 120
randoop.util.Randomness called by nextRandomInt: 954 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 955 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 956 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 957 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@33120583 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
Adding sequence #121 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 958 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 121 methods.
getSequencesForType(ds.Grafo) => 121 sequences.
number of candidate components: 121
randoop.util.Randomness called by nextRandomInt: 959 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 960 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 961 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 962 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 963 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 964 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
boolean boolean5 = grafo2.existeAresta((int)(short)-1, 32);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@15a7d125 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: boolean boolean5 = grafo2.existeAresta((int)(short)-1, 32);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 965 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 966 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 967 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 968 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 969 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 970 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 971 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);

isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #38 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 972 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 38 methods.
getSequencesForType(ds.Grafo$Aresta) => 38 sequences.
number of candidate components: 38
randoop.util.Randomness called by nextRandomInt: 973 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();
int int7 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #39 of type ds.Grafo$Aresta of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 974 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 121 methods.
getSequencesForType(ds.Grafo) => 121 sequences.
number of candidate components: 121
randoop.util.Randomness called by nextRandomInt: 975 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 976 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 977 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 978 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 979 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 980 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 981 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
grafo1.insereAresta((int)'a', 0, 100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@674fc71a [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence #122 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 982 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 122 methods.
getSequencesForType(ds.Grafo) => 122 sequences.
number of candidate components: 122
randoop.util.Randomness called by nextRandomInt: 983 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
int int19 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1626c17e [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 19 inactive (value is a primitive)
Adding sequence #123 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 984 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 123 methods.
getSequencesForType(ds.Grafo) => 123 sequences.
number of candidate components: 123
randoop.util.Randomness called by nextRandomInt: 985 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 986 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 987 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 988 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 989 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 990 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
grafo13.insereAresta((int)(short)1, 0, (int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7d5ff8c2 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Adding sequence #124 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 991 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 124 methods.
getSequencesForType(ds.Grafo) => 124 sequences.
number of candidate components: 124
randoop.util.Randomness called by nextRandomInt: 992 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@13b13cf4 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
Adding sequence #125 of type ds.Grafo of length 17
Adding sequence #126 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 993 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 126 methods.
getSequencesForType(ds.Grafo) => 126 sequences.
number of candidate components: 126
randoop.util.Randomness called by nextRandomInt: 994 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
grafo13.insereAresta((int)(short)1, 0, (int)(byte)-1);

randoop.util.Randomness called by weightedCoinFlip: 995 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 996 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
grafo13.insereAresta((int)(short)1, 0, (int)(byte)-1);
ds.Grafo.Aresta aresta24 = grafo13.proxAdj(32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@61782b00 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Sequence has failure: excluding from extension pool.
Failing sequence: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
grafo13.insereAresta((int)(short)1, 0, (int)(byte)-1);
// during test generation this statement threw an exception of type java.lang.NullPointerException in error
ds.Grafo.Aresta aresta24 = grafo13.proxAdj(32);


-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 997 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 126 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 39 methods.
getSequencesForType(java.lang.Object) => 166 sequences.
number of candidate components: 166
randoop.util.Randomness called by nextRandomInt: 998 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();
int int5 = aresta3.v1();
java.lang.Class<?> wildcardClass6 = aresta3.getClass();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 6 active.
Adding sequence #14 of type java.lang.Class<?> of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 999 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1000 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1001 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1002 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1003 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 1004 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)10, (int)(short)100, 0);

isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #40 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1005 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 126 methods.
getSequencesForType(ds.Grafo) => 126 sequences.
number of candidate components: 126
randoop.util.Randomness called by nextRandomInt: 1006 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@65dfd82b [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@393ced30 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 17 active.
Adding sequence #127 of type ds.Grafo of length 18
Adding sequence #128 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1007 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 128 methods.
getSequencesForType(ds.Grafo) => 128 sequences.
number of candidate components: 128
randoop.util.Randomness called by nextRandomInt: 1008 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');

randoop.util.Randomness called by weightedCoinFlip: 1009 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1010 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');
boolean boolean20 = grafo1.listaAdjVazia((int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 20 inactive (value is a primitive)
Adding sequence #129 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1011 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 129 methods.
getSequencesForType(ds.Grafo) => 129 sequences.
number of candidate components: 129
randoop.util.Randomness called by nextRandomInt: 1012 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1013 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1014 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1015 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 1016 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1017 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta16 = grafo13.retiraAresta((-1), (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4e9362d6 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo13.retiraAresta((-1), (int)(byte)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1018 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 129 methods.
getSequencesForType(ds.Grafo) => 129 sequences.
number of candidate components: 129
randoop.util.Randomness called by nextRandomInt: 1019 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1020 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1021 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta16 = grafo13.primeiroListaAdj((int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5613a15f [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo13.primeiroListaAdj((int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1022 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 129 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 40 methods.
getSequencesForType(java.lang.Object) => 170 sequences.
number of candidate components: 170
randoop.util.Randomness called by nextRandomInt: 1023 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();
java.lang.Class<?> wildcardClass7 = aresta3.getClass();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 7 active.
Adding sequence #15 of type java.lang.Class<?> of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1024 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 129 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 40 methods.
getSequencesForType(java.lang.Object) => 170 sequences.
number of candidate components: 170
randoop.util.Randomness called by nextRandomInt: 1025 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
java.lang.Class<?> wildcardClass6 = aresta3.getClass();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 6 active.
Adding sequence #16 of type java.lang.Class<?> of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1026 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 129 methods.
getSequencesForType(ds.Grafo) => 129 sequences.
number of candidate components: 129
randoop.util.Randomness called by nextRandomInt: 1027 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 1028 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1029 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 1030 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1031 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'4');
ds.Grafo.Aresta aresta4 = grafo1.retiraAresta((int)(byte)10, 0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.retiraAresta((int)(byte)10, 0);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1032 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 129 methods.
getSequencesForType(ds.Grafo) => 129 sequences.
number of candidate components: 129
randoop.util.Randomness called by nextRandomInt: 1033 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);

randoop.util.Randomness called by weightedCoinFlip: 1034 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1035 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1036 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1037 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1038 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1039 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
grafo1.insereAresta((int)(short)1, (int)(short)1, (int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = 1 [class java.lang.Short]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is null)
Adding sequence #130 of type ds.Grafo of length 25
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1040 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1041 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1042 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 1043 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1044 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1045 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1046 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (int)(byte)1, 1);

isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #41 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1047 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 130 methods.
getSequencesForType(ds.Grafo) => 130 sequences.
number of candidate components: 130
randoop.util.Randomness called by nextRandomInt: 1048 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1049 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1050 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 1051 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1052 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7d15eec0 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 17 inactive (value is a primitive)
Adding sequence #131 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1053 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 131 methods.
getSequencesForType(ds.Grafo) => 131 sequences.
number of candidate components: 131
randoop.util.Randomness called by nextRandomInt: 1054 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);

randoop.util.Randomness called by weightedCoinFlip: 1055 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1056 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence #132 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1057 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 132 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 41 methods.
getSequencesForType(java.lang.Object) => 174 sequences.
number of candidate components: 174
randoop.util.Randomness called by nextRandomInt: 1058 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by nextRandomInt: 1059 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
java.lang.Class<?> wildcardClass15 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 15 active.
Adding sequence #17 of type java.lang.Class<?> of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1060 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 41 methods.
getSequencesForType(ds.Grafo$Aresta) => 41 sequences.
number of candidate components: 41
randoop.util.Randomness called by nextRandomInt: 1061 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #42 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1062 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 132 methods.
getSequencesForType(ds.Grafo) => 132 sequences.
number of candidate components: 132
randoop.util.Randomness called by nextRandomInt: 1063 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1064 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1065 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1066 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1067 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1068 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo10.retiraAresta((int)' ', 10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1a8bcd0d [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #133 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1069 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 133 methods.
getSequencesForType(ds.Grafo) => 133 sequences.
number of candidate components: 133
randoop.util.Randomness called by nextRandomInt: 1070 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 1071 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1072 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'4');
ds.Grafo.Aresta aresta3 = grafo1.proxAdj(35);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence #134 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1073 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 134 methods.
getSequencesForType(ds.Grafo) => 134 sequences.
number of candidate components: 134
randoop.util.Randomness called by nextRandomInt: 1074 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();
boolean boolean5 = grafo1.existeAresta((int)(byte)0, 0);

randoop.util.Randomness called by weightedCoinFlip: 1075 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1076 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
int int2 = grafo1.numVertices();
boolean boolean5 = grafo1.existeAresta((int)(byte)0, 0);
boolean boolean7 = grafo1.listaAdjVazia(97);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 7
  Statement: boolean boolean7 = grafo1.listaAdjVazia(97);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1077 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 134 methods.
getSequencesForType(ds.Grafo) => 134 sequences.
number of candidate components: 134
randoop.util.Randomness called by nextRandomInt: 1078 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 1079 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 1080 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
boolean boolean17 = grafo1.existeAresta(0, 0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 17 inactive (value is a primitive)
Adding sequence #135 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1081 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 135 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 42 methods.
getSequencesForType(java.lang.Object) => 178 sequences.
number of candidate components: 178
randoop.util.Randomness called by nextRandomInt: 1082 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');
java.lang.Class<?> wildcardClass14 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 13 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 14 active.
Adding sequence #18 of type java.lang.Class<?> of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1083 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 135 methods.
getSequencesForType(ds.Grafo) => 135 sequences.
number of candidate components: 135
randoop.util.Randomness called by nextRandomInt: 1084 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1085 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1086 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 1087 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1088 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
ds.Grafo.Aresta aresta21 = grafo13.retiraAresta((int)'4', (int)(short)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5ca721f1 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 4 [class java.lang.Character]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 21
  Statement: ds.Grafo.Aresta aresta21 = grafo13.retiraAresta((int)'4', (int)(short)10);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1089 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 42 methods.
getSequencesForType(ds.Grafo$Aresta) => 42 sequences.
number of candidate components: 42
randoop.util.Randomness called by nextRandomInt: 1090 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(97, (int)(byte)100, (int)(short)100);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(97, (int)(byte)100, (int)(short)100);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #43 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1091 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 135 methods.
getSequencesForType(ds.Grafo) => 135 sequences.
number of candidate components: 135
randoop.util.Randomness called by nextRandomInt: 1092 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1093 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1094 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1095 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1096 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1097 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)' ', (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5f0b4914 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@611816df [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)' ', (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1098 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 43 methods.
getSequencesForType(ds.Grafo$Aresta) => 43 sequences.
number of candidate components: 43
randoop.util.Randomness called by nextRandomInt: 1099 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1100 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 135 methods.
getSequencesForType(ds.Grafo) => 135 sequences.
number of candidate components: 135
randoop.util.Randomness called by nextRandomInt: 1101 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)100);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1102 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 135 methods.
getSequencesForType(ds.Grafo) => 135 sequences.
number of candidate components: 135
randoop.util.Randomness called by nextRandomInt: 1103 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #136 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1104 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 136 methods.
getSequencesForType(ds.Grafo) => 136 sequences.
number of candidate components: 136
randoop.util.Randomness called by nextRandomInt: 1105 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@77783bb2 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 11 active.
Adding sequence #137 of type ds.Grafo of length 12
Adding sequence #138 of type ds.Grafo of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1106 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 138 methods.
getSequencesForType(ds.Grafo) => 138 sequences.
number of candidate components: 138
randoop.util.Randomness called by nextRandomInt: 1107 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1108 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1109 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1110 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta4 = grafo1.proxAdj((int)(short)0);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5163cbae [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.proxAdj((int)(short)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1111 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 138 methods.
getSequencesForType(ds.Grafo) => 138 sequences.
number of candidate components: 138
randoop.util.Randomness called by nextRandomInt: 1112 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 1113 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1114 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
boolean boolean14 = grafo1.listaAdjVazia((int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 14 inactive (value is a primitive)
Adding sequence #139 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1115 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 139 methods.
getSequencesForType(ds.Grafo) => 139 sequences.
number of candidate components: 139
randoop.util.Randomness called by nextRandomInt: 1116 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1117 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1118 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1119 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
boolean boolean4 = grafo1.listaAdjVazia(1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2a4f0347 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 4 inactive (value is a primitive)
Adding sequence #140 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1120 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 140 methods.
getSequencesForType(ds.Grafo) => 140 sequences.
number of candidate components: 140
randoop.util.Randomness called by nextRandomInt: 1121 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1122 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1123 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1124 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1125 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
boolean boolean21 = grafo13.existeAresta((int)(byte)1, 97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5c51c192 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #141 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1126 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 141 methods.
getSequencesForType(ds.Grafo) => 141 sequences.
number of candidate components: 141
randoop.util.Randomness called by nextRandomInt: 1127 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence #142 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1128 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 142 methods.
getSequencesForType(ds.Grafo) => 142 sequences.
number of candidate components: 142
randoop.util.Randomness called by nextRandomInt: 1129 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1130 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1131 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1132 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo1.proxAdj((int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@19c44400 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 11 active.
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #143 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1133 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 143 methods.
getSequencesForType(ds.Grafo) => 143 sequences.
number of candidate components: 143
randoop.util.Randomness called by nextRandomInt: 1134 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #144 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1135 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 43 methods.
getSequencesForType(ds.Grafo$Aresta) => 43 sequences.
number of candidate components: 43
randoop.util.Randomness called by nextRandomInt: 1136 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v1();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #44 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1137 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1138 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1139 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 1140 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1141 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 1142 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1143 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 32, 97);

isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #45 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1144 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 45 methods.
getSequencesForType(ds.Grafo$Aresta) => 45 sequences.
number of candidate components: 45
randoop.util.Randomness called by nextRandomInt: 1145 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #46 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1146 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 46 methods.
getSequencesForType(ds.Grafo$Aresta) => 46 sequences.
number of candidate components: 46
randoop.util.Randomness called by nextRandomInt: 1147 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #47 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1148 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 144 methods.
getSequencesForType(ds.Grafo) => 144 sequences.
number of candidate components: 144
randoop.util.Randomness called by nextRandomInt: 1149 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1150 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1151 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1152 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta20 = grafo18.primeiroListaAdj((int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@16e64c1b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #145 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1153 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 145 methods.
getSequencesForType(ds.Grafo) => 145 sequences.
number of candidate components: 145
randoop.util.Randomness called by nextRandomInt: 1154 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 1155 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1156 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.proxAdj(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence #146 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1157 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 146 methods.
getSequencesForType(ds.Grafo) => 146 sequences.
number of candidate components: 146
randoop.util.Randomness called by nextRandomInt: 1158 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1159 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1160 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1161 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 1162 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1163 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta(10, (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@21b1318d [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@24563368 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.retiraAresta(10, (int)'4');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1164 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1165 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1166 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(1);

isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #147 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1167 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 147 methods.
getSequencesForType(ds.Grafo) => 147 sequences.
number of candidate components: 147
randoop.util.Randomness called by nextRandomInt: 1168 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
int int7 = grafo1.numVertices();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #148 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1169 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 148 methods.
getSequencesForType(ds.Grafo) => 148 sequences.
number of candidate components: 148
randoop.util.Randomness called by nextRandomInt: 1170 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);

randoop.util.Randomness called by weightedCoinFlip: 1171 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1172 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@9023440 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2165e779 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence #149 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1173 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 149 methods.
getSequencesForType(ds.Grafo) => 149 sequences.
number of candidate components: 149
randoop.util.Randomness called by nextRandomInt: 1174 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #150 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1175 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 150 methods.
getSequencesForType(ds.Grafo) => 150 sequences.
number of candidate components: 150
randoop.util.Randomness called by nextRandomInt: 1176 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1177 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1178 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)(short)100);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1179 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 150 methods.
getSequencesForType(ds.Grafo) => 150 sequences.
number of candidate components: 150
randoop.util.Randomness called by nextRandomInt: 1180 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);

randoop.util.Randomness called by weightedCoinFlip: 1181 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1182 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@58133227 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
Adding sequence #151 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1183 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 151 methods.
getSequencesForType(ds.Grafo) => 151 sequences.
number of candidate components: 151
randoop.util.Randomness called by nextRandomInt: 1184 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);

randoop.util.Randomness called by weightedCoinFlip: 1185 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1186 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1187 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1188 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);
boolean boolean19 = grafo1.existeAresta((int)'a', 100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 19 inactive (value is a primitive)
Adding sequence #152 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1189 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 152 methods.
getSequencesForType(ds.Grafo) => 152 sequences.
number of candidate components: 152
randoop.util.Randomness called by nextRandomInt: 1190 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);

randoop.util.Randomness called by weightedCoinFlip: 1191 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1192 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1193 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1194 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1195 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1196 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);
grafo14.insereAresta((int)(short)-1, (int)(byte)1, 100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@211e860a [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@22529b29 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 21
  Statement: grafo14.insereAresta((int)(short)-1, (int)(byte)1, 100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1197 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1198 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1199 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1200 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1201 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 1202 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1203 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'#', 97, 10);

isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #48 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1204 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 152 methods.
getSequencesForType(ds.Grafo) => 152 sequences.
number of candidate components: 152
randoop.util.Randomness called by nextRandomInt: 1205 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
ds.Grafo grafo15 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6a4948d6 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5b330d41 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
Adding sequence #153 of type ds.Grafo of length 16
Adding sequence #154 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1206 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 154 methods.
getSequencesForType(ds.Grafo) => 154 sequences.
number of candidate components: 154
randoop.util.Randomness called by nextRandomInt: 1207 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1208 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1209 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1210 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1211 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1212 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@78782e07 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
Adding sequence #155 of type ds.Grafo of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1213 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 155 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 48 methods.
getSequencesForType(java.lang.Object) => 204 sequences.
number of candidate components: 204
randoop.util.Randomness called by nextRandomInt: 1214 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by nextRandomInt: 1215 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
java.lang.Class<?> wildcardClass15 = aresta14.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
Excluding from extension pool due to exception or failure in statement 15
  Statement: java.lang.Class<?> wildcardClass15 = aresta14.getClass();
  Result: [ExceptionalExecution, java.lang.NullPointerException, at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1216 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 155 methods.
getSequencesForType(ds.Grafo) => 155 sequences.
number of candidate components: 155
randoop.util.Randomness called by nextRandomInt: 1217 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence #156 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1218 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 156 methods.
getSequencesForType(ds.Grafo) => 156 sequences.
number of candidate components: 156
randoop.util.Randomness called by nextRandomInt: 1219 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1220 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo grafo17 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7adf263a [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5b7c3d13 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@969d09b [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 17 active.
Adding sequence #157 of type ds.Grafo of length 18
Adding sequence #158 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1221 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 158 methods.
getSequencesForType(ds.Grafo) => 158 sequences.
number of candidate components: 158
randoop.util.Randomness called by nextRandomInt: 1222 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1223 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 1224 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1225 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1226 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1227 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
grafo1.insereAresta(0, (int)(byte)100, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Adding sequence #159 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1228 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 159 methods.
getSequencesForType(ds.Grafo) => 159 sequences.
number of candidate components: 159
randoop.util.Randomness called by nextRandomInt: 1229 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
int int5 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #160 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1230 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 160 methods.
getSequencesForType(ds.Grafo) => 160 sequences.
number of candidate components: 160
randoop.util.Randomness called by nextRandomInt: 1231 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'a');

randoop.util.Randomness called by weightedCoinFlip: 1232 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1233 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 1234 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1235 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'a');
ds.Grafo.Aresta aresta4 = grafo1.retiraAresta((int)(byte)0, (int)' ');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Byte]
  Param 1 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.retiraAresta((int)(byte)0, (int)' ');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1236 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1237 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1238 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)' ');

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #161 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1239 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 161 methods.
getSequencesForType(ds.Grafo) => 161 sequences.
number of candidate components: 161
randoop.util.Randomness called by nextRandomInt: 1240 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
Adding sequence #162 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1241 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 162 methods.
getSequencesForType(ds.Grafo) => 162 sequences.
number of candidate components: 162
randoop.util.Randomness called by nextRandomInt: 1242 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');
int int14 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 14 inactive (value is a primitive)
Adding sequence #163 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1243 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1244 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1245 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)-1);

Excluding from extension pool due to exception or failure in statement 1
  Statement: ds.Grafo grafo1 = new ds.Grafo((int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.NegativeArraySizeException, at ds.Grafo.<init>(Grafo.java:24)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1246 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 163 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 48 methods.
getSequencesForType(java.lang.Object) => 212 sequences.
number of candidate components: 212
randoop.util.Randomness called by nextRandomInt: 1247 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (int)(byte)1, 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (int)(byte)1, 1);
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #19 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1248 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 163 methods.
getSequencesForType(ds.Grafo) => 163 sequences.
number of candidate components: 163
randoop.util.Randomness called by nextRandomInt: 1249 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);
boolean boolean19 = grafo1.existeAresta((int)'a', 100);

randoop.util.Randomness called by weightedCoinFlip: 1250 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1251 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);
boolean boolean19 = grafo1.existeAresta((int)'a', 100);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence #164 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1252 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 164 methods.
getSequencesForType(ds.Grafo) => 164 sequences.
number of candidate components: 164
randoop.util.Randomness called by nextRandomInt: 1253 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1254 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1255 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 1256 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1257 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1258 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1259 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
grafo1.insereAresta(97, (int)(byte)100, (int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: grafo1.insereAresta(97, (int)(byte)100, (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1260 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1261 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1262 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1263 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1264 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1265 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1266 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');

isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #49 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1267 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 164 methods.
getSequencesForType(ds.Grafo) => 164 sequences.
number of candidate components: 164
randoop.util.Randomness called by nextRandomInt: 1268 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1269 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1270 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 1271 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1272 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
boolean boolean21 = grafo13.existeAresta((int)(byte)10, (int)(byte)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6a1b444f [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #165 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1273 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1274 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1275 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1276 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1277 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1278 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1279 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)'a', (int)(byte)10);

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #50 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1280 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 165 methods.
getSequencesForType(ds.Grafo) => 165 sequences.
number of candidate components: 165
randoop.util.Randomness called by nextRandomInt: 1281 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo grafo7 = grafo3.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1ac70a44 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3617052e [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@719cf481 [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
Adding sequence #166 of type ds.Grafo of length 8
Adding sequence #167 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1282 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 167 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 50 methods.
getSequencesForType(java.lang.Object) => 218 sequences.
number of candidate components: 218
randoop.util.Randomness called by nextRandomInt: 1283 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta19 = grafo1.primeiroListaAdj((int)' ');

randoop.util.Randomness called by nextRandomInt: 1284 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta19 = grafo1.primeiroListaAdj((int)' ');
java.lang.Class<?> wildcardClass20 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 20 active.
Adding sequence #20 of type java.lang.Class<?> of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1285 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 167 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 50 methods.
getSequencesForType(java.lang.Object) => 218 sequences.
number of candidate components: 218
randoop.util.Randomness called by nextRandomInt: 1286 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1287 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 167 methods.
getSequencesForType(ds.Grafo) => 167 sequences.
number of candidate components: 167
randoop.util.Randomness called by nextRandomInt: 1288 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1289 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1290 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 1291 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1292 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1293 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1294 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo15.insereAresta(0, (int)(short)1, 10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@42bf1e22 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@40d72041 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #168 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1295 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1296 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1297 calls to Random so far
chosenSeq: char char0 = ' ';

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1298 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 168 methods.
getSequencesForType(ds.Grafo) => 168 sequences.
number of candidate components: 168
randoop.util.Randomness called by nextRandomInt: 1299 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1300 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1301 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1302 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo1.listaAdjVazia((int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7dc4c770 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
Adding sequence #169 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1303 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 169 methods.
getSequencesForType(ds.Grafo) => 169 sequences.
number of candidate components: 169
randoop.util.Randomness called by nextRandomInt: 1304 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 1305 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1306 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1307 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1308 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1309 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1310 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #170 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1311 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 170 methods.
getSequencesForType(ds.Grafo) => 170 sequences.
number of candidate components: 170
randoop.util.Randomness called by nextRandomInt: 1312 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #171 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1313 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 171 methods.
getSequencesForType(ds.Grafo) => 171 sequences.
number of candidate components: 171
randoop.util.Randomness called by nextRandomInt: 1314 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@441adc2f [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3db49e16 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5ac8d2a [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 9 active.
Adding sequence #172 of type ds.Grafo of length 10
Adding sequence #173 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1315 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 173 methods.
getSequencesForType(ds.Grafo) => 173 sequences.
number of candidate components: 173
randoop.util.Randomness called by nextRandomInt: 1316 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');
grafo7.imprime();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@56da73f5 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@9ceea37 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
Adding sequence #174 of type ds.Grafo of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1317 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 50 methods.
getSequencesForType(ds.Grafo$Aresta) => 50 sequences.
number of candidate components: 50
randoop.util.Randomness called by nextRandomInt: 1318 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();
int int6 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #51 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1319 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 174 methods.
getSequencesForType(ds.Grafo) => 174 sequences.
number of candidate components: 174
randoop.util.Randomness called by nextRandomInt: 1320 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1321 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1322 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1323 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();
boolean boolean11 = grafo9.listaAdjVazia(97);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4e321b53 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@262d1c57 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@59251fa3 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 11
  Statement: boolean boolean11 = grafo9.listaAdjVazia(97);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1324 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 174 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 51 methods.
getSequencesForType(java.lang.Object) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1325 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.peso();
java.lang.Class<?> wildcardClass5 = aresta3.getClass();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 5 active.
Adding sequence #21 of type java.lang.Class<?> of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1326 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 174 methods.
getSequencesForType(ds.Grafo) => 174 sequences.
number of candidate components: 174
randoop.util.Randomness called by nextRandomInt: 1327 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 1328 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1329 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 1330 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1331 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta17 = grafo1.retiraAresta(97, (int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 17
  Statement: ds.Grafo.Aresta aresta17 = grafo1.retiraAresta(97, (int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1332 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 174 methods.
getSequencesForType(ds.Grafo) => 174 sequences.
number of candidate components: 174
randoop.util.Randomness called by nextRandomInt: 1333 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
int int17 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 17 inactive (value is a primitive)
Adding sequence #175 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1334 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 175 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 51 methods.
getSequencesForType(java.lang.Object) => 227 sequences.
number of candidate components: 227
randoop.util.Randomness called by nextRandomInt: 1335 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');
java.lang.Class<?> wildcardClass19 = grafo13.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6e374fbf [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 19 active.
Adding sequence #22 of type java.lang.Class<?> of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1336 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 175 methods.
getSequencesForType(ds.Grafo) => 175 sequences.
number of candidate components: 175
randoop.util.Randomness called by nextRandomInt: 1337 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo1.proxAdj((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 1338 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1339 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1340 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1341 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 1342 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1343 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo1.proxAdj((int)(short)0);
grafo1.insereAresta((int)(byte)1, (int)(byte)0, (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@42a8e609 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 4 [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 11 active.
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #176 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1344 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 176 methods.
getSequencesForType(ds.Grafo) => 176 sequences.
number of candidate components: 176
randoop.util.Randomness called by nextRandomInt: 1345 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 1346 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1347 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1348 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1349 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 1350 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1351 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)1, (int)(byte)-1, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #177 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1352 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 177 methods.
getSequencesForType(ds.Grafo) => 177 sequences.
number of candidate components: 177
randoop.util.Randomness called by nextRandomInt: 1353 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1354 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1355 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo1.numVertices();
ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj((int)(byte)-1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@647c32e9 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj((int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1356 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 177 methods.
getSequencesForType(ds.Grafo) => 177 sequences.
number of candidate components: 177
randoop.util.Randomness called by nextRandomInt: 1357 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1358 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1359 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1360 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 1361 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1362 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();
boolean boolean12 = grafo3.existeAresta((-1), (-1));

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6587bc34 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6af807d7 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@11493e93 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 12
  Statement: boolean boolean12 = grafo3.existeAresta((-1), (-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1363 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 51 methods.
getSequencesForType(ds.Grafo$Aresta) => 51 sequences.
number of candidate components: 51
randoop.util.Randomness called by nextRandomInt: 1364 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #52 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1365 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 52 methods.
getSequencesForType(ds.Grafo$Aresta) => 52 sequences.
number of candidate components: 52
randoop.util.Randomness called by nextRandomInt: 1366 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.peso();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #53 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1367 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 53 methods.
getSequencesForType(ds.Grafo$Aresta) => 53 sequences.
number of candidate components: 53
randoop.util.Randomness called by nextRandomInt: 1368 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1369 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 53 methods.
getSequencesForType(ds.Grafo$Aresta) => 53 sequences.
number of candidate components: 53
randoop.util.Randomness called by nextRandomInt: 1370 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #54 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1371 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 177 methods.
getSequencesForType(ds.Grafo) => 177 sequences.
number of candidate components: 177
randoop.util.Randomness called by nextRandomInt: 1372 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');

randoop.util.Randomness called by weightedCoinFlip: 1373 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1374 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');
boolean boolean20 = grafo13.listaAdjVazia(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5dc99dde [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 20 inactive (value is a primitive)
Adding sequence #178 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1375 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 54 methods.
getSequencesForType(ds.Grafo$Aresta) => 54 sequences.
number of candidate components: 54
randoop.util.Randomness called by nextRandomInt: 1376 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();
int int5 = aresta3.v1();
int int6 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #55 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1377 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 178 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 55 methods.
getSequencesForType(java.lang.Object) => 234 sequences.
number of candidate components: 234
randoop.util.Randomness called by nextRandomInt: 1378 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)' ');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)' ');
java.lang.Class<?> wildcardClass2 = grafo1.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 2 active.
Adding sequence #23 of type java.lang.Class<?> of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1379 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 178 methods.
getSequencesForType(ds.Grafo) => 178 sequences.
number of candidate components: 178
randoop.util.Randomness called by nextRandomInt: 1380 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7d78cb53 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@743286e0 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence #179 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1381 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1382 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1383 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(35);

isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #180 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1384 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 55 methods.
getSequencesForType(ds.Grafo$Aresta) => 55 sequences.
number of candidate components: 55
randoop.util.Randomness called by nextRandomInt: 1385 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #56 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1386 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 56 methods.
getSequencesForType(ds.Grafo$Aresta) => 56 sequences.
number of candidate components: 56
randoop.util.Randomness called by nextRandomInt: 1387 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1388 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 56 methods.
getSequencesForType(ds.Grafo$Aresta) => 56 sequences.
number of candidate components: 56
randoop.util.Randomness called by nextRandomInt: 1389 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'a', (int)(short)10, 0);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1390 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 180 methods.
getSequencesForType(ds.Grafo) => 180 sequences.
number of candidate components: 180
randoop.util.Randomness called by nextRandomInt: 1391 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1392 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1393 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1394 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();
ds.Grafo.Aresta aresta20 = grafo14.primeiroListaAdj((int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@196cbcee [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@8b6a90 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo14.primeiroListaAdj((int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1395 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 180 methods.
getSequencesForType(ds.Grafo) => 180 sequences.
number of candidate components: 180
randoop.util.Randomness called by nextRandomInt: 1396 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

randoop.util.Randomness called by weightedCoinFlip: 1397 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1398 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj(100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj(100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1399 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 180 methods.
getSequencesForType(ds.Grafo) => 180 sequences.
number of candidate components: 180
randoop.util.Randomness called by nextRandomInt: 1400 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1401 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1402 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1403 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1404 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 56 methods.
getSequencesForType(ds.Grafo$Aresta) => 56 sequences.
number of candidate components: 56
randoop.util.Randomness called by nextRandomInt: 1405 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');
int int4 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');
int int4 = aresta3.v1();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #57 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1406 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 180 methods.
getSequencesForType(ds.Grafo) => 180 sequences.
number of candidate components: 180
randoop.util.Randomness called by nextRandomInt: 1407 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);

randoop.util.Randomness called by weightedCoinFlip: 1408 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1409 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 1410 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1411 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 1412 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1413 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
grafo1.insereAresta((int)'4', (int)(short)0, (int)(byte)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 4 [class java.lang.Character]
  Param 1 = 0 [class java.lang.Short]
  Param 2 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence #181 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1414 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 181 methods.
getSequencesForType(ds.Grafo) => 181 sequences.
number of candidate components: 181
randoop.util.Randomness called by nextRandomInt: 1415 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
boolean boolean4 = grafo1.listaAdjVazia(1);

randoop.util.Randomness called by weightedCoinFlip: 1416 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1417 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
boolean boolean4 = grafo1.listaAdjVazia(1);
ds.Grafo.Aresta aresta6 = grafo1.proxAdj((int)(byte)-1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@11c32 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: ds.Grafo.Aresta aresta6 = grafo1.proxAdj((int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1418 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 57 methods.
getSequencesForType(ds.Grafo$Aresta) => 57 sequences.
number of candidate components: 57
randoop.util.Randomness called by nextRandomInt: 1419 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)'a', (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)'a', (int)(byte)10);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #58 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1420 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 181 methods.
getSequencesForType(ds.Grafo) => 181 sequences.
number of candidate components: 181
randoop.util.Randomness called by nextRandomInt: 1421 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@28b7d2b1 [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #182 of type ds.Grafo of length 4
Adding sequence #183 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1422 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1423 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 1424 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1425 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 1426 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1427 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (-1), (int)(short)1);

isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #59 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1428 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1429 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1430 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1431 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1432 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1433 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1434 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)10, (int)'4');

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #60 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1435 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 183 methods.
getSequencesForType(ds.Grafo) => 183 sequences.
number of candidate components: 183
randoop.util.Randomness called by nextRandomInt: 1436 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
grafo1.imprime();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
Adding sequence #184 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1437 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 184 methods.
getSequencesForType(ds.Grafo) => 184 sequences.
number of candidate components: 184
randoop.util.Randomness called by nextRandomInt: 1438 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1439 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@676825aa [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1d50a6bc [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #185 of type ds.Grafo of length 4
Adding sequence #186 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1440 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 186 methods.
getSequencesForType(ds.Grafo) => 186 sequences.
number of candidate components: 186
randoop.util.Randomness called by nextRandomInt: 1441 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);

randoop.util.Randomness called by weightedCoinFlip: 1442 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1443 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
ds.Grafo.Aresta aresta8 = grafo1.proxAdj(0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence #187 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1444 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 187 methods.
getSequencesForType(ds.Grafo) => 187 sequences.
number of candidate components: 187
randoop.util.Randomness called by nextRandomInt: 1445 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1446 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1447 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1448 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 1449 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1450 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 1451 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1452 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo1.insereAresta((int)(byte)10, 35, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@74dab369 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 35 [class java.lang.Integer]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #188 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1453 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 188 methods.
getSequencesForType(ds.Grafo) => 188 sequences.
number of candidate components: 188
randoop.util.Randomness called by nextRandomInt: 1454 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 1455 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1456 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)(short)0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
Adding sequence #189 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1457 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 189 methods.
getSequencesForType(ds.Grafo) => 189 sequences.
number of candidate components: 189
randoop.util.Randomness called by nextRandomInt: 1458 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);

randoop.util.Randomness called by weightedCoinFlip: 1459 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1460 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo14.proxAdj((int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2723ec92 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6d169273 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 19
  Statement: ds.Grafo.Aresta aresta19 = grafo14.proxAdj((int)(short)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1461 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 189 methods.
getSequencesForType(ds.Grafo) => 189 sequences.
number of candidate components: 189
randoop.util.Randomness called by nextRandomInt: 1462 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
Adding sequence #190 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1463 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 190 methods.
getSequencesForType(ds.Grafo) => 190 sequences.
number of candidate components: 190
randoop.util.Randomness called by nextRandomInt: 1464 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1465 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1466 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(short)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1467 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1468 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1469 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 1470 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1471 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1472 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1473 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(35, (int)(short)-1, (int)(short)10);

isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #61 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1474 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 190 methods.
getSequencesForType(ds.Grafo) => 190 sequences.
number of candidate components: 190
randoop.util.Randomness called by nextRandomInt: 1475 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1476 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
grafo4.imprime();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@39c303f9 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
Making index 5 inactive (value is null)
Adding sequence #191 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1477 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1478 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1479 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1480 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1481 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 1482 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1483 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)-1, (int)(short)0, (int)(short)1);

isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #62 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1484 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 191 methods.
getSequencesForType(ds.Grafo) => 191 sequences.
number of candidate components: 191
randoop.util.Randomness called by nextRandomInt: 1485 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1486 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
grafo18.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2243e8a6 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
Making index 19 inactive (value is null)
Adding sequence #192 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1487 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 192 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 62 methods.
getSequencesForType(java.lang.Object) => 255 sequences.
number of candidate components: 255
randoop.util.Randomness called by nextRandomInt: 1488 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);
java.lang.Class<?> wildcardClass10 = grafo1.getClass();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 10 active.
Adding sequence #24 of type java.lang.Class<?> of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1489 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 192 methods.
getSequencesForType(ds.Grafo) => 192 sequences.
number of candidate components: 192
randoop.util.Randomness called by nextRandomInt: 1490 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1491 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1492 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1493 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 1494 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1495 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 1496 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1497 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
grafo10.insereAresta((int)(byte)-1, (int)(byte)0, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@22b1ead7 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 14
  Statement: grafo10.insereAresta((int)(byte)-1, (int)(byte)0, (int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1498 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 192 methods.
getSequencesForType(ds.Grafo) => 192 sequences.
number of candidate components: 192
randoop.util.Randomness called by nextRandomInt: 1499 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)'#', (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)'#', (int)(byte)10);
int int21 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 21 inactive (value is a primitive)
Adding sequence #193 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1500 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 62 methods.
getSequencesForType(ds.Grafo$Aresta) => 62 sequences.
number of candidate components: 62
randoop.util.Randomness called by nextRandomInt: 1501 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #63 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1502 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 193 methods.
getSequencesForType(ds.Grafo) => 193 sequences.
number of candidate components: 193
randoop.util.Randomness called by nextRandomInt: 1503 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1504 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1505 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(35);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(35);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1506 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 193 methods.
getSequencesForType(ds.Grafo) => 193 sequences.
number of candidate components: 193
randoop.util.Randomness called by nextRandomInt: 1507 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 1508 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1509 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence #194 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1510 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 63 methods.
getSequencesForType(ds.Grafo$Aresta) => 63 sequences.
number of candidate components: 63
randoop.util.Randomness called by nextRandomInt: 1511 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #64 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1512 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 194 methods.
getSequencesForType(ds.Grafo) => 194 sequences.
number of candidate components: 194
randoop.util.Randomness called by nextRandomInt: 1513 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1514 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1515 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 1516 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1517 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();
ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((-1), 100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((-1), 100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1518 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 64 methods.
getSequencesForType(ds.Grafo$Aresta) => 64 sequences.
number of candidate components: 64
randoop.util.Randomness called by nextRandomInt: 1519 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #65 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1520 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 194 methods.
getSequencesForType(ds.Grafo) => 194 sequences.
number of candidate components: 194
randoop.util.Randomness called by nextRandomInt: 1521 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta19 = grafo1.primeiroListaAdj((int)' ');

randoop.util.Randomness called by weightedCoinFlip: 1522 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1523 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1524 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1525 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta19 = grafo1.primeiroListaAdj((int)' ');
boolean boolean22 = grafo1.existeAresta((int)(short)10, (int)(short)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 22 inactive (value is a primitive)
Adding sequence #195 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1526 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 195 methods.
getSequencesForType(ds.Grafo) => 195 sequences.
number of candidate components: 195
randoop.util.Randomness called by nextRandomInt: 1527 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1528 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1529 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1530 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1531 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 1532 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1533 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta((int)(short)10, (int)' ', (-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@694b7886 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #196 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1534 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 65 methods.
getSequencesForType(ds.Grafo$Aresta) => 65 sequences.
number of candidate components: 65
randoop.util.Randomness called by nextRandomInt: 1535 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
int int4 = aresta3.peso();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #66 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1536 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 196 methods.
getSequencesForType(ds.Grafo) => 196 sequences.
number of candidate components: 196
randoop.util.Randomness called by nextRandomInt: 1537 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);

randoop.util.Randomness called by weightedCoinFlip: 1538 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1539 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1540 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1541 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@2afae5f2 [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta]
Making index 20 active.
Adding sequence #67 of type ds.Grafo$Aresta of length 21
Adding sequence #197 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1542 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 197 methods.
getSequencesForType(ds.Grafo) => 197 sequences.
number of candidate components: 197
randoop.util.Randomness called by nextRandomInt: 1543 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1544 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7b0deb12 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2f8a22d1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@f9c5aea [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
Adding sequence #198 of type ds.Grafo of length 5
Adding sequence #199 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1545 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 199 methods.
getSequencesForType(ds.Grafo) => 199 sequences.
number of candidate components: 199
randoop.util.Randomness called by nextRandomInt: 1546 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);

randoop.util.Randomness called by weightedCoinFlip: 1547 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1548 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@23f20c8b [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@7276c011 [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 19 active.
Adding sequence #68 of type ds.Grafo$Aresta of length 20
Adding sequence #200 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1549 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 200 methods.
getSequencesForType(ds.Grafo) => 200 sequences.
number of candidate components: 200
randoop.util.Randomness called by nextRandomInt: 1550 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1551 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1552 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1553 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
boolean boolean6 = grafo3.listaAdjVazia((int)(byte)100);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@513e320 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@432ad109 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4d52fba2 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: boolean boolean6 = grafo3.listaAdjVazia((int)(byte)100);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1554 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 200 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 68 methods.
getSequencesForType(java.lang.Object) => 269 sequences.
number of candidate components: 269
randoop.util.Randomness called by nextRandomInt: 1555 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)1, (int)'a', (int)'4');
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #25 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1556 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 200 methods.
getSequencesForType(ds.Grafo) => 200 sequences.
number of candidate components: 200
randoop.util.Randomness called by nextRandomInt: 1557 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo7 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3d59bfab [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@793dd0bc [class ds.Grafo]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
Adding sequence #201 of type ds.Grafo of length 8
Adding sequence #202 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1558 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1559 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1560 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 1561 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1562 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1563 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1564 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(short)10, (int)(byte)100);

isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #69 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1565 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 202 methods.
getSequencesForType(ds.Grafo) => 202 sequences.
number of candidate components: 202
randoop.util.Randomness called by nextRandomInt: 1566 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1567 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1568 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1569 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta4 = grafo2.proxAdj(100);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@42094dd2 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo2.proxAdj(100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1570 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1571 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1572 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1573 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1574 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 1575 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1576 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)-1, (int)(short)0, (int)(byte)10);

isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #70 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1577 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 202 methods.
getSequencesForType(ds.Grafo) => 202 sequences.
number of candidate components: 202
randoop.util.Randomness called by nextRandomInt: 1578 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 1579 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1580 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1581 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1582 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'4');
boolean boolean4 = grafo1.existeAresta((int)(short)-1, (int)(byte)10);

MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.existeAresta((int)(short)-1, (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1583 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 202 methods.
getSequencesForType(ds.Grafo) => 202 sequences.
number of candidate components: 202
randoop.util.Randomness called by nextRandomInt: 1584 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(35);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(35);
ds.Grafo grafo2 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@48f4e7fe [class ds.Grafo]
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Adding sequence #203 of type ds.Grafo of length 3
Adding sequence #204 of type ds.Grafo of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1585 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 204 methods.
getSequencesForType(ds.Grafo) => 204 sequences.
number of candidate components: 204
randoop.util.Randomness called by nextRandomInt: 1586 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1587 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1d918cae [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 3 inactive (value is a primitive)
Adding sequence #205 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1588 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 205 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 70 methods.
getSequencesForType(java.lang.Object) => 276 sequences.
number of candidate components: 276
randoop.util.Randomness called by nextRandomInt: 1589 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');
int int4 = aresta3.v2();
int int5 = aresta3.v1();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1590 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 205 methods.
getSequencesForType(ds.Grafo) => 205 sequences.
number of candidate components: 205
randoop.util.Randomness called by nextRandomInt: 1591 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1592 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@157580c0 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5342a85a [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #206 of type ds.Grafo of length 4
Adding sequence #207 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1593 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1594 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1595 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 1596 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1597 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 1598 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1599 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 35, 32);

isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #71 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1600 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 207 methods.
getSequencesForType(ds.Grafo) => 207 sequences.
number of candidate components: 207
randoop.util.Randomness called by nextRandomInt: 1601 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);

randoop.util.Randomness called by weightedCoinFlip: 1602 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1603 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);
boolean boolean19 = grafo13.listaAdjVazia((int)(byte)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4094f066 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
Adding sequence #208 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1604 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 71 methods.
getSequencesForType(ds.Grafo$Aresta) => 71 sequences.
number of candidate components: 71
randoop.util.Randomness called by nextRandomInt: 1605 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();
int int7 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();
int int7 = aresta3.peso();
int int8 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 8 inactive (value is a primitive)
Adding sequence #72 of type ds.Grafo$Aresta of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1606 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 208 methods.
getSequencesForType(ds.Grafo) => 208 sequences.
number of candidate components: 208
randoop.util.Randomness called by nextRandomInt: 1607 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1608 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1609 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1610 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1611 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1612 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();
boolean boolean21 = grafo14.existeAresta((int)(byte)1, (int)(short)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3da8ace8 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@45ae7a72 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #209 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1613 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 209 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 72 methods.
getSequencesForType(java.lang.Object) => 282 sequences.
number of candidate components: 282
randoop.util.Randomness called by nextRandomInt: 1614 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo grafo17 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1615 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo grafo17 = grafo1.grafoTransposto();
java.lang.Class<?> wildcardClass18 = grafo17.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@67c09b1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@ae79e24 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@505838df [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 17 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 18 active.
Adding sequence #26 of type java.lang.Class<?> of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1616 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 72 methods.
getSequencesForType(ds.Grafo$Aresta) => 72 sequences.
number of candidate components: 72
randoop.util.Randomness called by nextRandomInt: 1617 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1618 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 209 methods.
getSequencesForType(ds.Grafo) => 209 sequences.
number of candidate components: 209
randoop.util.Randomness called by nextRandomInt: 1619 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');

randoop.util.Randomness called by weightedCoinFlip: 1620 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1621 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');
ds.Grafo.Aresta aresta20 = grafo13.proxAdj((int)(byte)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@362f19d3 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #210 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1622 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 210 methods.
getSequencesForType(ds.Grafo) => 210 sequences.
number of candidate components: 210
randoop.util.Randomness called by nextRandomInt: 1623 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1624 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1625 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1626 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo1.proxAdj(35);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3533281c [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@306267a4 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Sequence has failure: excluding from extension pool.
Failing sequence: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();
// during test generation this statement threw an exception of type java.lang.NullPointerException in error
ds.Grafo.Aresta aresta18 = grafo1.proxAdj(35);


-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1627 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 210 methods.
getSequencesForType(ds.Grafo) => 210 sequences.
number of candidate components: 210
randoop.util.Randomness called by nextRandomInt: 1628 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');
boolean boolean20 = grafo1.listaAdjVazia((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 1629 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1630 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 1631 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1632 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');
boolean boolean20 = grafo1.listaAdjVazia((int)(byte)1);
ds.Grafo.Aresta aresta23 = grafo1.retiraAresta((int)(short)0, (int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Short]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 23
  Statement: ds.Grafo.Aresta aresta23 = grafo1.retiraAresta((int)(short)0, (int)(short)-1);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1633 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 210 methods.
getSequencesForType(ds.Grafo) => 210 sequences.
number of candidate components: 210
randoop.util.Randomness called by nextRandomInt: 1634 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1635 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 210 methods.
getSequencesForType(ds.Grafo) => 210 sequences.
number of candidate components: 210
randoop.util.Randomness called by nextRandomInt: 1636 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');

randoop.util.Randomness called by weightedCoinFlip: 1637 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1638 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 1639 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1640 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 1641 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1642 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');
grafo7.insereAresta((int)(short)100, (int)(byte)0, (int)(short)10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2156b3ed [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@576816ee [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 100 [class java.lang.Short]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 15
  Statement: grafo7.insereAresta((int)(short)100, (int)(byte)0, (int)(short)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1643 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1644 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1645 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1646 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1647 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1648 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1649 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(byte)100, 35);

isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #73 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1650 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 210 methods.
getSequencesForType(ds.Grafo) => 210 sequences.
number of candidate components: 210
randoop.util.Randomness called by nextRandomInt: 1651 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo10.retiraAresta((int)' ', 10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo10.retiraAresta((int)' ', 10);
grafo10.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4deda38a [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Making index 14 inactive (value is null)
Adding sequence #211 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1652 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 211 methods.
getSequencesForType(ds.Grafo) => 211 sequences.
number of candidate components: 211
randoop.util.Randomness called by nextRandomInt: 1653 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1654 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1655 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();
ds.Grafo.Aresta aresta21 = grafo1.proxAdj((int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7a53037 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Sequence has failure: excluding from extension pool.
Failing sequence: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();
// during test generation this statement threw an exception of type java.lang.NullPointerException in error
ds.Grafo.Aresta aresta21 = grafo1.proxAdj((int)'4');


-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1656 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1657 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1658 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1659 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1660 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1661 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1662 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)10, (int)(short)1, (int)(short)100);

isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #74 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1663 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 74 methods.
getSequencesForType(ds.Grafo$Aresta) => 74 sequences.
number of candidate components: 74
randoop.util.Randomness called by nextRandomInt: 1664 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #75 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1665 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 211 methods.
getSequencesForType(ds.Grafo) => 211 sequences.
number of candidate components: 211
randoop.util.Randomness called by nextRandomInt: 1666 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 1667 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1668 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);
ds.Grafo.Aresta aresta19 = grafo1.proxAdj(32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@25d30db7 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #212 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1669 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1670 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1671 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1672 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1673 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 1674 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1675 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'a', (int)(short)100, (-1));

isSideEffectFree => false for Statement [ a : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #76 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1676 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 212 methods.
getSequencesForType(ds.Grafo) => 212 sequences.
number of candidate components: 212
randoop.util.Randomness called by nextRandomInt: 1677 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.proxAdj(97);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.proxAdj(97);
int int17 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 17 inactive (value is a primitive)
Adding sequence #213 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1678 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 213 methods.
getSequencesForType(ds.Grafo) => 213 sequences.
number of candidate components: 213
randoop.util.Randomness called by nextRandomInt: 1679 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1680 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1681 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1682 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo16.primeiroListaAdj(100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@674f7b75 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3c0fb397 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 18
  Statement: ds.Grafo.Aresta aresta18 = grafo16.primeiroListaAdj(100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1683 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 76 methods.
getSequencesForType(ds.Grafo$Aresta) => 76 sequences.
number of candidate components: 76
randoop.util.Randomness called by nextRandomInt: 1684 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, 0, (int)' ');

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1685 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 213 methods.
getSequencesForType(ds.Grafo) => 213 sequences.
number of candidate components: 213
randoop.util.Randomness called by nextRandomInt: 1686 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 1687 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1688 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1689 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1690 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
boolean boolean8 = grafo1.existeAresta((int)(short)-1, (int)(byte)10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 8
  Statement: boolean boolean8 = grafo1.existeAresta((int)(short)-1, (int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1691 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1692 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1693 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1694 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1695 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1696 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1697 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'#', (int)(short)10, (int)' ');

isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #77 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1698 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 213 methods.
getSequencesForType(ds.Grafo) => 213 sequences.
number of candidate components: 213
randoop.util.Randomness called by nextRandomInt: 1699 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1700 calls to Random so far
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1701 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 213 methods.
getSequencesForType(ds.Grafo) => 213 sequences.
number of candidate components: 213
randoop.util.Randomness called by nextRandomInt: 1702 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1703 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1704 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1705 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo1.proxAdj((int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2ac7983 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #214 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1706 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 214 methods.
getSequencesForType(ds.Grafo) => 214 sequences.
number of candidate components: 214
randoop.util.Randomness called by nextRandomInt: 1707 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1708 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 214 methods.
getSequencesForType(ds.Grafo) => 214 sequences.
number of candidate components: 214
randoop.util.Randomness called by nextRandomInt: 1709 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta(32, (int)(byte)-1, (int)'a');
ds.Grafo grafo19 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
Excluding from extension pool due to exception or failure in statement 19
  Statement: ds.Grafo grafo19 = grafo1.grafoTransposto();
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1710 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1711 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1712 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1713 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1714 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 1715 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1716 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 100, 35);

isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #78 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1717 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 214 methods.
getSequencesForType(ds.Grafo) => 214 sequences.
number of candidate components: 214
randoop.util.Randomness called by nextRandomInt: 1718 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1719 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 214 methods.
getSequencesForType(ds.Grafo) => 214 sequences.
number of candidate components: 214
randoop.util.Randomness called by nextRandomInt: 1720 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1721 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
int int17 = grafo16.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2fa45890 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 17 inactive (value is a primitive)
Adding sequence #215 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1722 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 78 methods.
getSequencesForType(ds.Grafo$Aresta) => 78 sequences.
number of candidate components: 78
randoop.util.Randomness called by nextRandomInt: 1723 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();
int int5 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #79 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1724 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1725 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1726 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)100);

isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #216 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1727 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 216 methods.
getSequencesForType(ds.Grafo) => 216 sequences.
number of candidate components: 216
randoop.util.Randomness called by nextRandomInt: 1728 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 1729 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1730 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1731 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1732 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 1733 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1734 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');
grafo1.insereAresta((int)(byte)100, (int)(byte)0, (int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 100 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 19
  Statement: grafo1.insereAresta((int)(byte)100, (int)(byte)0, (int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1735 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 216 methods.
getSequencesForType(ds.Grafo) => 216 sequences.
number of candidate components: 216
randoop.util.Randomness called by nextRandomInt: 1736 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);

randoop.util.Randomness called by weightedCoinFlip: 1737 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1738 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@35a4590e [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 21 active.
Adding sequence #80 of type ds.Grafo$Aresta of length 22
Adding sequence #217 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1739 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 217 methods.
getSequencesForType(ds.Grafo) => 217 sequences.
number of candidate components: 217
randoop.util.Randomness called by nextRandomInt: 1740 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1741 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1742 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 1743 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1744 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(32, 35);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Adding sequence #218 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1745 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 218 methods.
getSequencesForType(ds.Grafo) => 218 sequences.
number of candidate components: 218
randoop.util.Randomness called by nextRandomInt: 1746 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1747 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1748 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1749 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo3.primeiroListaAdj((int)(short)0);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@db1f6ad [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@53ac7900 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence #219 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1750 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 219 methods.
getSequencesForType(ds.Grafo) => 219 sequences.
number of candidate components: 219
randoop.util.Randomness called by nextRandomInt: 1751 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1752 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1753 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.proxAdj((int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@614a4b5e [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 18
  Statement: ds.Grafo.Aresta aresta18 = grafo15.proxAdj((int)(short)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1754 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 219 methods.
getSequencesForType(ds.Grafo) => 219 sequences.
number of candidate components: 219
randoop.util.Randomness called by nextRandomInt: 1755 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 1756 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1757 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1758 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1759 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
ds.Grafo.Aresta aresta12 = grafo7.retiraAresta((int)(short)1, 100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@68e0f0fb [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5d1dde00 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 1 [class java.lang.Short]
  Param 1 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 12
  Statement: ds.Grafo.Aresta aresta12 = grafo7.retiraAresta((int)(short)1, 100);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1760 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 219 methods.
getSequencesForType(ds.Grafo) => 219 sequences.
number of candidate components: 219
randoop.util.Randomness called by nextRandomInt: 1761 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1762 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@22338828 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
Making index 19 inactive (value is null)
Adding sequence #220 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1763 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 220 methods.
getSequencesForType(ds.Grafo) => 220 sequences.
number of candidate components: 220
randoop.util.Randomness called by nextRandomInt: 1764 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 1765 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1766 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1767 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1768 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');
boolean boolean20 = grafo13.existeAresta((int)'#', (int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@a958f92 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 20 inactive (value is a primitive)
Adding sequence #221 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1769 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 221 methods.
getSequencesForType(ds.Grafo) => 221 sequences.
number of candidate components: 221
randoop.util.Randomness called by nextRandomInt: 1770 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
boolean boolean21 = grafo13.existeAresta((int)(byte)1, 97);

randoop.util.Randomness called by weightedCoinFlip: 1771 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1772 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1773 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1774 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
boolean boolean21 = grafo13.existeAresta((int)(byte)1, 97);
ds.Grafo.Aresta aresta24 = grafo13.retiraAresta((int)'#', (int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@81b60a1 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 24
  Statement: ds.Grafo.Aresta aresta24 = grafo13.retiraAresta((int)'#', (int)(short)0);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1775 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1776 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1777 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1778 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1779 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 1780 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1781 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)10, (int)(byte)1, (int)(short)10);

isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #81 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1782 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 221 methods.
getSequencesForType(ds.Grafo) => 221 sequences.
number of candidate components: 221
randoop.util.Randomness called by nextRandomInt: 1783 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');
grafo1.insereAresta(0, (int)'a', (int)'a');

randoop.util.Randomness called by weightedCoinFlip: 1784 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1785 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 1786 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1787 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');
grafo1.insereAresta(0, (int)'a', (int)'a');
ds.Grafo.Aresta aresta22 = grafo1.retiraAresta(100, (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = a [class java.lang.Character]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 100 [class java.lang.Integer]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 22
  Statement: ds.Grafo.Aresta aresta22 = grafo1.retiraAresta(100, (int)'4');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1788 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 221 methods.
getSequencesForType(ds.Grafo) => 221 sequences.
number of candidate components: 221
randoop.util.Randomness called by nextRandomInt: 1789 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1790 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
ds.Grafo grafo9 = grafo3.grafoTransposto();
grafo9.imprime();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7f3b4f60 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@21ff0fde [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2dc09e8f [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 9 active.
Making index 10 inactive (value is null)
Adding sequence #222 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1791 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 222 methods.
getSequencesForType(ds.Grafo) => 222 sequences.
number of candidate components: 222
randoop.util.Randomness called by nextRandomInt: 1792 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
ds.Grafo grafo14 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1793 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1794 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1795 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
ds.Grafo grafo14 = grafo1.grafoTransposto();
boolean boolean16 = grafo14.listaAdjVazia((int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6cea9668 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 16 inactive (value is a primitive)
Adding sequence #223 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1796 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 223 methods.
getSequencesForType(ds.Grafo) => 223 sequences.
number of candidate components: 223
randoop.util.Randomness called by nextRandomInt: 1797 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1798 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1799 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1800 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo2.proxAdj(32);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@425efda1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6c2797e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo2.proxAdj(32);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1801 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1802 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1803 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1804 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 223 methods.
getSequencesForType(ds.Grafo) => 223 sequences.
number of candidate components: 223
randoop.util.Randomness called by nextRandomInt: 1805 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo1.proxAdj((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 1806 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1807 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 1808 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1809 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo1.proxAdj((int)(short)0);
ds.Grafo.Aresta aresta21 = grafo1.retiraAresta((int)(short)100, (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@367798f1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 100 [class java.lang.Short]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 21
  Statement: ds.Grafo.Aresta aresta21 = grafo1.retiraAresta((int)(short)100, (int)(byte)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1810 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1811 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1812 calls to Random so far
chosenSeq: int int0 = 35;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1813 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1814 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1815 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 1816 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1817 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1818 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1819 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (int)'#', 1);

isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #82 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1820 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1821 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1822 calls to Random so far
chosenSeq: int int0 = 0;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1823 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1824 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1825 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 1826 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1827 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 1828 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1829 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, 0, (int)(byte)10);

isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #83 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1830 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 223 methods.
getSequencesForType(ds.Grafo) => 223 sequences.
number of candidate components: 223
randoop.util.Randomness called by nextRandomInt: 1831 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1832 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1833 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1834 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1835 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo.Aresta aresta5 = grafo1.retiraAresta((int)'#', (int)(short)0);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.retiraAresta((int)'#', (int)(short)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1836 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 223 methods.
getSequencesForType(ds.Grafo) => 223 sequences.
number of candidate components: 223
randoop.util.Randomness called by nextRandomInt: 1837 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 1838 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1839 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1840 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1841 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 1842 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1843 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)100);
grafo1.insereAresta((int)(byte)100, 32, (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 100 [class java.lang.Byte]
  Param 1 = 32 [class java.lang.Integer]
  Param 2 = 4 [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: grafo1.insereAresta((int)(byte)100, 32, (int)'4');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1844 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 223 methods.
getSequencesForType(ds.Grafo) => 223 sequences.
number of candidate components: 223
randoop.util.Randomness called by nextRandomInt: 1845 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.imprime();
int int3 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 3 inactive (value is a primitive)
Adding sequence #224 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1846 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 224 methods.
getSequencesForType(ds.Grafo) => 224 sequences.
number of candidate components: 224
randoop.util.Randomness called by nextRandomInt: 1847 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 1848 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1849 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.proxAdj((int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 14
  Statement: ds.Grafo.Aresta aresta14 = grafo1.proxAdj((int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1850 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 224 methods.
getSequencesForType(ds.Grafo) => 224 sequences.
number of candidate components: 224
randoop.util.Randomness called by nextRandomInt: 1851 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #225 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1852 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1853 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1854 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 1855 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1856 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 1857 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1858 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, 35, (int)(short)0);

isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #84 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1859 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1860 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1861 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 1862 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1863 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 1864 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1865 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)10, (int)'4', 0);

isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #85 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1866 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1867 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1868 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1869 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1870 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 1871 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1872 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'a', (int)(short)1, (int)(short)1);

isSideEffectFree => false for Statement [ a : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #86 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1873 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 225 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 86 methods.
getSequencesForType(java.lang.Object) => 312 sequences.
number of candidate components: 312
randoop.util.Randomness called by nextRandomInt: 1874 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'#');

randoop.util.Randomness called by nextRandomInt: 1875 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'#');
java.lang.Class<?> wildcardClass22 = aresta21.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@3241e69b [class ds.Grafo$Aresta]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 21 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 22 active.
Adding sequence #27 of type java.lang.Class<?> of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1876 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 225 methods.
getSequencesForType(ds.Grafo) => 225 sequences.
number of candidate components: 225
randoop.util.Randomness called by nextRandomInt: 1877 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1878 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
int int4 = grafo2.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@e82212e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@c97bd26 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #226 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1879 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1880 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 1881 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1882 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1883 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1884 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1885 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1886 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)(short)-1, (int)'a', 97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
  Param 2 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: grafo1.insereAresta((int)(short)-1, (int)'a', 97);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1887 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1888 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1889 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1890 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 1891 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1892 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();
boolean boolean6 = grafo2.existeAresta(0, 35);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@32c1cb0f [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: boolean boolean6 = grafo2.existeAresta(0, 35);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1893 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1894 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1895 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1896 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1897 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 1898 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1899 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 1900 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1901 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
grafo4.insereAresta((int)(short)-1, (int)(short)100, (int)(short)100);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4dba6f29 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 100 [class java.lang.Short]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 8
  Statement: grafo4.insereAresta((int)(short)-1, (int)(short)100, (int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1902 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1903 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1904 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1905 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1906 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 1907 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1908 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
boolean boolean13 = grafo10.existeAresta(100, 35);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@443281c [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 100 [class java.lang.Integer]
  Param 1 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 13
  Statement: boolean boolean13 = grafo10.existeAresta(100, 35);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1909 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1910 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 1911 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1912 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 1913 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1914 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
boolean boolean4 = grafo1.existeAresta((int)(byte)0, (int)(short)0);

MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.existeAresta((int)(byte)0, (int)(short)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1915 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1916 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1917 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1918 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1919 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 1920 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1921 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 1922 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1923 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo15.insereAresta((-1), 32, (int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7faf2dd5 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 32 [class java.lang.Integer]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 19
  Statement: grafo15.insereAresta((-1), 32, (int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1924 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 226 methods.
getSequencesForType(ds.Grafo) => 226 sequences.
number of candidate components: 226
randoop.util.Randomness called by nextRandomInt: 1925 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1926 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1927 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1928 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo16.proxAdj(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5f3ddb80 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 16 active.
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #227 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1929 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1930 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1931 calls to Random so far
chosenSeq: char char0 = 'a';

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1932 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 227 methods.
getSequencesForType(ds.Grafo) => 227 sequences.
number of candidate components: 227
randoop.util.Randomness called by nextRandomInt: 1933 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 1934 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1935 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
grafo1.imprime();
ds.Grafo.Aresta aresta9 = grafo1.primeiroListaAdj((int)'a');

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is null)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence #228 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1936 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1937 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1938 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 1939 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1940 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 1941 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1942 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (int)'a', 35);

isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #87 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1943 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 1944 calls to Random so far
Using null as input.
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1945 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1946 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1947 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 1948 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 1949 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1950 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, 0, (int)' ');

isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #88 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1951 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 228 methods.
getSequencesForType(ds.Grafo) => 228 sequences.
number of candidate components: 228
randoop.util.Randomness called by nextRandomInt: 1952 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);

randoop.util.Randomness called by weightedCoinFlip: 1953 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1954 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta19 = grafo1.proxAdj((int)(short)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #229 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1955 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 229 methods.
getSequencesForType(ds.Grafo) => 229 sequences.
number of candidate components: 229
randoop.util.Randomness called by nextRandomInt: 1956 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
int int17 = grafo16.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 1957 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1958 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 1959 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1960 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo grafo16 = grafo1.grafoTransposto();
int int17 = grafo16.numVertices();
ds.Grafo.Aresta aresta20 = grafo16.retiraAresta((int)'#', 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1950a5fd [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo16.retiraAresta((int)'#', 32);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1961 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 229 methods.
getSequencesForType(ds.Grafo) => 229 sequences.
number of candidate components: 229
randoop.util.Randomness called by nextRandomInt: 1962 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1963 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4ac4d9c7 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@63715f3a [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
Adding sequence #230 of type ds.Grafo of length 5
Adding sequence #231 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1964 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 231 methods.
getSequencesForType(ds.Grafo) => 231 sequences.
number of candidate components: 231
randoop.util.Randomness called by nextRandomInt: 1965 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo7 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1966 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo7 = grafo1.grafoTransposto();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1790f003 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1d962e29 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
Making index 8 inactive (value is null)
Adding sequence #232 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1967 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 88 methods.
getSequencesForType(ds.Grafo$Aresta) => 88 sequences.
number of candidate components: 88
randoop.util.Randomness called by nextRandomInt: 1968 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (int)'#', 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (int)'#', 1);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #89 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1969 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 232 methods.
getSequencesForType(ds.Grafo) => 232 sequences.
number of candidate components: 232
randoop.util.Randomness called by nextRandomInt: 1970 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();
ds.Grafo grafo18 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@30d20487 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
Adding sequence #233 of type ds.Grafo of length 19
Adding sequence #234 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1971 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 234 methods.
getSequencesForType(ds.Grafo) => 234 sequences.
number of candidate components: 234
randoop.util.Randomness called by nextRandomInt: 1972 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);

randoop.util.Randomness called by weightedCoinFlip: 1973 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1974 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1975 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 89 methods.
getSequencesForType(ds.Grafo$Aresta) => 89 sequences.
number of candidate components: 89
randoop.util.Randomness called by nextRandomInt: 1976 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1977 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 234 methods.
getSequencesForType(ds.Grafo) => 234 sequences.
number of candidate components: 234
randoop.util.Randomness called by nextRandomInt: 1978 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1979 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 1980 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 1981 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1982 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean18 = grafo1.existeAresta(0, (-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@775f054c [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
Adding sequence #235 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1983 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 235 methods.
getSequencesForType(ds.Grafo) => 235 sequences.
number of candidate components: 235
randoop.util.Randomness called by nextRandomInt: 1984 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4d0bfaf7 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1064be3e [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 10 inactive (value is a primitive)
Adding sequence #236 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1985 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 236 methods.
getSequencesForType(ds.Grafo) => 236 sequences.
number of candidate components: 236
randoop.util.Randomness called by nextRandomInt: 1986 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 1987 calls to Random so far
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1988 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 1989 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1990 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 1991 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1992 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 1993 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1994 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, 0, (int)(byte)-1);

isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #90 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1995 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 236 methods.
getSequencesForType(ds.Grafo) => 236 sequences.
number of candidate components: 236
randoop.util.Randomness called by nextRandomInt: 1996 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

randoop.util.Randomness called by weightedCoinFlip: 1997 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 1998 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo.Aresta aresta11 = grafo1.proxAdj((int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence #237 of type ds.Grafo of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1999 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 237 methods.
getSequencesForType(ds.Grafo) => 237 sequences.
number of candidate components: 237
randoop.util.Randomness called by nextRandomInt: 2000 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)1, (int)(byte)-1, (int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 2001 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2002 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 2003 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2004 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)1, (int)(byte)-1, (int)(byte)100);
boolean boolean21 = grafo1.existeAresta((int)(short)10, 10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #238 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2005 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 238 methods.
getSequencesForType(ds.Grafo) => 238 sequences.
number of candidate components: 238
randoop.util.Randomness called by nextRandomInt: 2006 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 2007 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2008 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);
boolean boolean21 = grafo13.listaAdjVazia(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@758774bf [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@78bf2c61 [class ds.Grafo$Aresta]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 19 active.
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #239 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2009 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 239 methods.
getSequencesForType(ds.Grafo) => 239 sequences.
number of candidate components: 239
randoop.util.Randomness called by nextRandomInt: 2010 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2011 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2012 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2013 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2014 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2015 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2016 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();
grafo1.insereAresta(10, (int)(short)100, (int)' ');

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Short]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: grafo1.insereAresta(10, (int)(short)100, (int)' ');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2017 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 239 methods.
getSequencesForType(ds.Grafo) => 239 sequences.
number of candidate components: 239
randoop.util.Randomness called by nextRandomInt: 2018 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2019 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2020 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 2021 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2022 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();
boolean boolean7 = grafo1.existeAresta((int)(byte)10, (int)(short)100);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 7 inactive (value is a primitive)
Adding sequence #240 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2023 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 240 methods.
getSequencesForType(ds.Grafo) => 240 sequences.
number of candidate components: 240
randoop.util.Randomness called by nextRandomInt: 2024 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2025 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
int int5 = grafo4.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6f90d7cf [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@74f0e7c2 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4d0ad04e [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #241 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2026 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 241 methods.
getSequencesForType(ds.Grafo) => 241 sequences.
number of candidate components: 241
randoop.util.Randomness called by nextRandomInt: 2027 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);

randoop.util.Randomness called by weightedCoinFlip: 2028 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2029 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
boolean boolean21 = grafo1.listaAdjVazia(32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #242 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2030 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 242 methods.
getSequencesForType(ds.Grafo) => 242 sequences.
number of candidate components: 242
randoop.util.Randomness called by nextRandomInt: 2031 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo1.insereAresta((int)(byte)10, 35, 32);

randoop.util.Randomness called by weightedCoinFlip: 2032 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2033 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo1.insereAresta((int)(byte)10, 35, 32);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6d04e989 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 35 [class java.lang.Integer]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@1948b489 [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 21 active.
Adding sequence #91 of type ds.Grafo$Aresta of length 22
Adding sequence #243 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2034 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 91 methods.
getSequencesForType(ds.Grafo$Aresta) => 91 sequences.
number of candidate components: 91
randoop.util.Randomness called by nextRandomInt: 2035 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(35, (int)(short)-1, (int)(short)10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(35, (int)(short)-1, (int)(short)10);
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #92 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2036 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 243 methods.
getSequencesForType(ds.Grafo) => 243 sequences.
number of candidate components: 243
randoop.util.Randomness called by nextRandomInt: 2037 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);

randoop.util.Randomness called by weightedCoinFlip: 2038 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@20d12c0 [class ds.Grafo$Aresta]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta]
Making index 20 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Adding sequence #244 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2039 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 244 methods.
getSequencesForType(ds.Grafo) => 244 sequences.
number of candidate components: 244
randoop.util.Randomness called by nextRandomInt: 2040 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');

randoop.util.Randomness called by weightedCoinFlip: 2041 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2042 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 2043 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2044 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2045 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2046 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj((int)'4');
grafo1.insereAresta((int)(short)-1, (int)(short)100, 0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Short]
  Param 1 = 100 [class java.lang.Short]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 19
  Statement: grafo1.insereAresta((int)(short)-1, (int)(short)100, 0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2047 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 244 methods.
getSequencesForType(ds.Grafo) => 244 sequences.
number of candidate components: 244
randoop.util.Randomness called by nextRandomInt: 2048 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
grafo1.insereAresta((int)'a', 0, 100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
grafo1.insereAresta((int)'a', 0, 100);
grafo1.imprime();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5ddca8a [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence #245 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2049 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 245 methods.
getSequencesForType(ds.Grafo) => 245 sequences.
number of candidate components: 245
randoop.util.Randomness called by nextRandomInt: 2050 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2051 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2052 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2053 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2054 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
boolean boolean5 = grafo1.existeAresta((int)'a', (int)(short)100);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: boolean boolean5 = grafo1.existeAresta((int)'a', (int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2055 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 245 methods.
getSequencesForType(ds.Grafo) => 245 sequences.
number of candidate components: 245
randoop.util.Randomness called by nextRandomInt: 2056 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2057 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2058 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2059 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(short)10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@67aaec2d [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7f69b763 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
Adding sequence #246 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2060 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 92 methods.
getSequencesForType(ds.Grafo$Aresta) => 92 sequences.
number of candidate components: 92
randoop.util.Randomness called by nextRandomInt: 2061 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v1();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2062 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 92 methods.
getSequencesForType(ds.Grafo$Aresta) => 92 sequences.
number of candidate components: 92
randoop.util.Randomness called by nextRandomInt: 2063 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();
int int5 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();
int int5 = aresta3.v2();
int int6 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #93 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2064 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2065 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2066 calls to Random so far
chosenSeq: int int0 = 32;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2067 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 246 methods.
getSequencesForType(ds.Grafo) => 246 sequences.
number of candidate components: 246
randoop.util.Randomness called by nextRandomInt: 2068 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2069 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2070 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
ds.Grafo.Aresta aresta15 = grafo1.proxAdj(1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Sequence has failure: excluding from extension pool.
Failing sequence: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
// during test generation this statement threw an exception of type java.lang.NullPointerException in error
ds.Grafo.Aresta aresta15 = grafo1.proxAdj(1);


-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2071 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 246 methods.
getSequencesForType(ds.Grafo) => 246 sequences.
number of candidate components: 246
randoop.util.Randomness called by nextRandomInt: 2072 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);

randoop.util.Randomness called by weightedCoinFlip: 2073 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2074 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 22 inactive (value is a primitive)
Adding sequence #247 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2075 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 247 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 93 methods.
getSequencesForType(java.lang.Object) => 341 sequences.
number of candidate components: 341
randoop.util.Randomness called by nextRandomInt: 2076 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
java.lang.Class<?> wildcardClass10 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 10 active.
Adding sequence #28 of type java.lang.Class<?> of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2077 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 247 methods.
getSequencesForType(ds.Grafo) => 247 sequences.
number of candidate components: 247
randoop.util.Randomness called by nextRandomInt: 2078 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);
ds.Grafo.Aresta aresta19 = grafo1.proxAdj(32);

randoop.util.Randomness called by weightedCoinFlip: 2079 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2080 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 2081 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2082 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 2083 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2084 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);
ds.Grafo.Aresta aresta19 = grafo1.proxAdj(32);
grafo1.insereAresta((int)(byte)10, (int)(byte)100, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@44a25b00 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Adding sequence #248 of type ds.Grafo of length 24
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2085 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 248 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 93 methods.
getSequencesForType(java.lang.Object) => 342 sequences.
number of candidate components: 342
randoop.util.Randomness called by nextRandomInt: 2086 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');
java.lang.Class<?> wildcardClass18 = grafo13.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6b820847 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 18 active.
Adding sequence #29 of type java.lang.Class<?> of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2087 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 248 methods.
getSequencesForType(ds.Grafo) => 248 sequences.
number of candidate components: 248
randoop.util.Randomness called by nextRandomInt: 2088 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2089 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2090 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2091 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta20 = grafo1.primeiroListaAdj((int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@643d96fa [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #249 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2092 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 249 methods.
getSequencesForType(ds.Grafo) => 249 sequences.
number of candidate components: 249
randoop.util.Randomness called by nextRandomInt: 2093 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 2094 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2095 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
boolean boolean7 = grafo1.listaAdjVazia(0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 7 inactive (value is a primitive)
Adding sequence #250 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2096 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 250 methods.
getSequencesForType(ds.Grafo) => 250 sequences.
number of candidate components: 250
randoop.util.Randomness called by nextRandomInt: 2097 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2098 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2099 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2100 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 250 methods.
getSequencesForType(ds.Grafo) => 250 sequences.
number of candidate components: 250
randoop.util.Randomness called by nextRandomInt: 2101 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2102 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2103 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 2104 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2105 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 2106 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2107 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
grafo13.imprime();
grafo13.insereAresta(0, (int)(byte)100, 1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@22d8f731 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
Adding sequence #251 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2108 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 93 methods.
getSequencesForType(ds.Grafo$Aresta) => 93 sequences.
number of candidate components: 93
randoop.util.Randomness called by nextRandomInt: 2109 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, 0, (-1));
int int4 = aresta3.v2();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #94 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2110 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 251 methods.
getSequencesForType(ds.Grafo) => 251 sequences.
number of candidate components: 251
randoop.util.Randomness called by nextRandomInt: 2111 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)0, (int)(short)10, 100);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)0, (int)(short)10, 100);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence #252 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2112 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 252 methods.
getSequencesForType(ds.Grafo) => 252 sequences.
number of candidate components: 252
randoop.util.Randomness called by nextRandomInt: 2113 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2114 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 252 methods.
getSequencesForType(ds.Grafo) => 252 sequences.
number of candidate components: 252
randoop.util.Randomness called by nextRandomInt: 2115 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);

randoop.util.Randomness called by weightedCoinFlip: 2116 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2117 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(0);
grafo1.insereAresta((int)'#', (-1), 1);
ds.Grafo.Aresta aresta11 = grafo1.primeiroListaAdj(10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is null)
Adding sequence #253 of type ds.Grafo of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2118 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 253 methods.
getSequencesForType(ds.Grafo) => 253 sequences.
number of candidate components: 253
randoop.util.Randomness called by nextRandomInt: 2119 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 2120 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2121 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);
ds.Grafo.Aresta aresta24 = grafo1.proxAdj(32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@1bca66bd [class ds.Grafo$Aresta]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => ds.Grafo$Aresta@2a39c49a [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta]
Making index 20 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 23 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 24 active.
Adding sequence #95 of type ds.Grafo$Aresta of length 25
Adding sequence #254 of type ds.Grafo of length 25
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2122 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 254 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 95 methods.
getSequencesForType(java.lang.Object) => 350 sequences.
number of candidate components: 350
randoop.util.Randomness called by nextRandomInt: 2123 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2124 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
java.lang.Class<?> wildcardClass4 = grafo2.getClass();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@35401d43 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@76dcd7b9 [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #30 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2125 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 254 methods.
getSequencesForType(ds.Grafo) => 254 sequences.
number of candidate components: 254
randoop.util.Randomness called by nextRandomInt: 2126 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean17 = grafo13.listaAdjVazia((int)'4');
int int18 = grafo13.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4c8552d9 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
Adding sequence #255 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2127 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 255 methods.
getSequencesForType(ds.Grafo) => 255 sequences.
number of candidate components: 255
randoop.util.Randomness called by nextRandomInt: 2128 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();
int int11 = grafo3.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3ff58692 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@19d41c92 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 11 inactive (value is a primitive)
Adding sequence #256 of type ds.Grafo of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2129 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 256 methods.
getSequencesForType(ds.Grafo) => 256 sequences.
number of candidate components: 256
randoop.util.Randomness called by nextRandomInt: 2130 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2131 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2132 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2133 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2134 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2135 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
ds.Grafo.Aresta aresta7 = grafo3.retiraAresta((int)(short)100, (int)'a');

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@72d8ecf7 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@76f03231 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 100 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo3.retiraAresta((int)(short)100, (int)'a');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2136 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 95 methods.
getSequencesForType(ds.Grafo$Aresta) => 95 sequences.
number of candidate components: 95
randoop.util.Randomness called by nextRandomInt: 2137 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.v2();
int int6 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #96 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2138 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 96 methods.
getSequencesForType(ds.Grafo$Aresta) => 96 sequences.
number of candidate components: 96
randoop.util.Randomness called by nextRandomInt: 2139 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();
int int6 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();
int int6 = aresta3.v1();
int int7 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #97 of type ds.Grafo$Aresta of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2140 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2141 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2142 calls to Random so far
chosenSeq: int int0 = 97;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2143 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 97 methods.
getSequencesForType(ds.Grafo$Aresta) => 97 sequences.
number of candidate components: 97
randoop.util.Randomness called by nextRandomInt: 2144 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (-1), (int)(short)1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (-1), (int)(short)1);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #98 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2145 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 256 methods.
getSequencesForType(ds.Grafo) => 256 sequences.
number of candidate components: 256
randoop.util.Randomness called by nextRandomInt: 2146 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2147 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2148 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 2149 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta5 = grafo1.retiraAresta((-1), 0);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.retiraAresta((-1), 0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2150 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 98 methods.
getSequencesForType(ds.Grafo$Aresta) => 98 sequences.
number of candidate components: 98
randoop.util.Randomness called by nextRandomInt: 2151 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'#', 97, 10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'#', 97, 10);
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #99 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2152 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 256 methods.
getSequencesForType(ds.Grafo) => 256 sequences.
number of candidate components: 256
randoop.util.Randomness called by nextRandomInt: 2153 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
boolean boolean14 = grafo1.listaAdjVazia((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 2154 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2155 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 2156 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2157 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 2158 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2159 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
boolean boolean14 = grafo1.listaAdjVazia((int)'#');
grafo1.insereAresta((int)(byte)-1, (int)(short)0, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Short]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 18
  Statement: grafo1.insereAresta((int)(byte)-1, (int)(short)0, 32);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2160 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 256 methods.
getSequencesForType(ds.Grafo) => 256 sequences.
number of candidate components: 256
randoop.util.Randomness called by nextRandomInt: 2161 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));

randoop.util.Randomness called by weightedCoinFlip: 2162 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2163 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
ds.Grafo.Aresta aresta17 = grafo1.proxAdj(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
Adding sequence #257 of type ds.Grafo of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2164 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 99 methods.
getSequencesForType(ds.Grafo$Aresta) => 99 sequences.
number of candidate components: 99
randoop.util.Randomness called by nextRandomInt: 2165 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2166 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 257 methods.
getSequencesForType(ds.Grafo) => 257 sequences.
number of candidate components: 257
randoop.util.Randomness called by nextRandomInt: 2167 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);
boolean boolean19 = grafo1.existeAresta((int)'a', 100);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'a');

randoop.util.Randomness called by weightedCoinFlip: 2168 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2169 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)1, 1);
boolean boolean19 = grafo1.existeAresta((int)'a', 100);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'a');
ds.Grafo.Aresta aresta23 = grafo1.primeiroListaAdj((-1));

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 23
  Statement: ds.Grafo.Aresta aresta23 = grafo1.primeiroListaAdj((-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2170 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 99 methods.
getSequencesForType(ds.Grafo$Aresta) => 99 sequences.
number of candidate components: 99
randoop.util.Randomness called by nextRandomInt: 2171 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();
int int7 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #100 of type ds.Grafo$Aresta of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2172 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 257 methods.
getSequencesForType(ds.Grafo) => 257 sequences.
number of candidate components: 257
randoop.util.Randomness called by nextRandomInt: 2173 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2174 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2175 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();
ds.Grafo.Aresta aresta5 = grafo2.primeiroListaAdj((int)(byte)10);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@11d2304 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo2.primeiroListaAdj((int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2176 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 257 methods.
getSequencesForType(ds.Grafo) => 257 sequences.
number of candidate components: 257
randoop.util.Randomness called by nextRandomInt: 2177 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();
ds.Grafo.Aresta aresta18 = grafo1.primeiroListaAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 2178 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2179 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();
ds.Grafo.Aresta aresta18 = grafo1.primeiroListaAdj(0);
ds.Grafo.Aresta aresta20 = grafo1.primeiroListaAdj(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #258 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2180 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 258 methods.
getSequencesForType(ds.Grafo) => 258 sequences.
number of candidate components: 258
randoop.util.Randomness called by nextRandomInt: 2181 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);

randoop.util.Randomness called by weightedCoinFlip: 2182 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2183 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2184 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2185 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);
ds.Grafo.Aresta aresta25 = grafo1.retiraAresta(10, (int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@92cd883 [class ds.Grafo$Aresta]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Integer]
  Param 1 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 25
  Statement: ds.Grafo.Aresta aresta25 = grafo1.retiraAresta(10, (int)' ');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2186 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 258 methods.
getSequencesForType(ds.Grafo) => 258 sequences.
number of candidate components: 258
randoop.util.Randomness called by nextRandomInt: 2187 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 2188 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2189 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 2190 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2191 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta16 = grafo1.retiraAresta((int)(short)10, (int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo1.retiraAresta((int)(short)10, (int)'a');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2192 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 258 methods.
getSequencesForType(ds.Grafo) => 258 sequences.
number of candidate components: 258
randoop.util.Randomness called by nextRandomInt: 2193 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');

randoop.util.Randomness called by weightedCoinFlip: 2194 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2195 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');
ds.Grafo.Aresta aresta13 = grafo7.primeiroListaAdj(0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@15ebd273 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@9bafaa6 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
Adding sequence #259 of type ds.Grafo of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2196 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 259 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 100 methods.
getSequencesForType(java.lang.Object) => 360 sequences.
number of candidate components: 360
randoop.util.Randomness called by nextRandomInt: 2197 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2198 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
java.lang.Class<?> wildcardClass5 = grafo1.getClass();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@76aa82bd [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 5 active.
Adding sequence #31 of type java.lang.Class<?> of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2199 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 259 methods.
getSequencesForType(ds.Grafo) => 259 sequences.
number of candidate components: 259
randoop.util.Randomness called by nextRandomInt: 2200 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
int int9 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 9 inactive (value is a primitive)
Adding sequence #260 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2201 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2202 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2203 calls to Random so far
chosenSeq: int int0 = 100;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2204 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 100 methods.
getSequencesForType(ds.Grafo$Aresta) => 100 sequences.
number of candidate components: 100
randoop.util.Randomness called by nextRandomInt: 2205 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, (int)(byte)0, (int)'a');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, (int)(byte)0, (int)'a');
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #101 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2206 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 260 methods.
getSequencesForType(ds.Grafo) => 260 sequences.
number of candidate components: 260
randoop.util.Randomness called by nextRandomInt: 2207 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2208 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 260 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 101 methods.
getSequencesForType(java.lang.Object) => 362 sequences.
number of candidate components: 362
randoop.util.Randomness called by nextRandomInt: 2209 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo7 = grafo1.grafoTransposto();
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo7 = grafo1.grafoTransposto();
grafo1.imprime();
java.lang.Class<?> wildcardClass9 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@26b5b084 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@21d9aa3a [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
Making index 8 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 9 active.
Adding sequence #32 of type java.lang.Class<?> of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2210 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 260 methods.
getSequencesForType(ds.Grafo) => 260 sequences.
number of candidate components: 260
randoop.util.Randomness called by nextRandomInt: 2211 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2212 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2213 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)'a');

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj((int)'a');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2214 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2215 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2216 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 2217 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2218 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 2219 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)0, (int)(byte)1, 0);

isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #102 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2220 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 260 methods.
getSequencesForType(ds.Grafo) => 260 sequences.
number of candidate components: 260
randoop.util.Randomness called by nextRandomInt: 2221 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();
boolean boolean21 = grafo1.listaAdjVazia(10);

randoop.util.Randomness called by weightedCoinFlip: 2222 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2223 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2224 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2225 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();
boolean boolean21 = grafo1.listaAdjVazia(10);
boolean boolean24 = grafo1.existeAresta((int)(short)100, (int)(byte)0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7254ddcc [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 100 [class java.lang.Short]
  Param 1 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 24
  Statement: boolean boolean24 = grafo1.existeAresta((int)(short)100, (int)(byte)0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2226 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2227 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2228 calls to Random so far
chosenSeq: int int0 = 97;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2229 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 260 methods.
getSequencesForType(ds.Grafo) => 260 sequences.
number of candidate components: 260
randoop.util.Randomness called by nextRandomInt: 2230 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');
ds.Grafo.Aresta aresta20 = grafo13.proxAdj((int)(byte)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo13.listaAdjVazia(10);
boolean boolean18 = grafo13.existeAresta((int)(short)1, (int)'a');
ds.Grafo.Aresta aresta20 = grafo13.proxAdj((int)(byte)10);
grafo13.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2997e47f [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is null)
Adding sequence #261 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2231 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 261 methods.
getSequencesForType(ds.Grafo) => 261 sequences.
number of candidate components: 261
randoop.util.Randomness called by nextRandomInt: 2232 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2233 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2234 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2235 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 2236 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2237 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta16 = grafo1.retiraAresta((-1), 1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4f4969dc [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 16
  Statement: ds.Grafo.Aresta aresta16 = grafo1.retiraAresta((-1), 1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2238 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 261 methods.
getSequencesForType(ds.Grafo) => 261 sequences.
number of candidate components: 261
randoop.util.Randomness called by nextRandomInt: 2239 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);
ds.Grafo grafo23 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1ae95276 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 23 active.
Adding sequence #262 of type ds.Grafo of length 24
Adding sequence #263 of type ds.Grafo of length 24
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2240 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 263 methods.
getSequencesForType(ds.Grafo) => 263 sequences.
number of candidate components: 263
randoop.util.Randomness called by nextRandomInt: 2241 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
int int7 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
int int7 = grafo1.numVertices();
int int8 = grafo1.numVertices();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 8 inactive (value is a primitive)
Adding sequence #264 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2242 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2243 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2244 calls to Random so far
chosenSeq: char char0 = ' ';

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2245 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 102 methods.
getSequencesForType(ds.Grafo$Aresta) => 102 sequences.
number of candidate components: 102
randoop.util.Randomness called by nextRandomInt: 2246 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.peso();
int int6 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #103 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2247 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 103 methods.
getSequencesForType(ds.Grafo$Aresta) => 103 sequences.
number of candidate components: 103
randoop.util.Randomness called by nextRandomInt: 2248 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
int int4 = aresta3.peso();
int int5 = aresta3.v1();
int int6 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #104 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2249 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 264 methods.
getSequencesForType(ds.Grafo) => 264 sequences.
number of candidate components: 264
randoop.util.Randomness called by nextRandomInt: 2250 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 2251 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2252 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 2253 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2254 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 2255 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2256 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
boolean boolean6 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.insereAresta(32, 1, 0);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6750b41c [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence #265 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2257 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 265 methods.
getSequencesForType(ds.Grafo) => 265 sequences.
number of candidate components: 265
randoop.util.Randomness called by nextRandomInt: 2258 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo1.insereAresta((int)(byte)10, 35, 32);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo1.insereAresta((int)(byte)10, 35, 32);
ds.Grafo grafo20 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4f0f939f [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 35 [class java.lang.Integer]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6c0152cb [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 20 active.
Adding sequence #266 of type ds.Grafo of length 21
Adding sequence #267 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2259 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2260 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2261 calls to Random so far
chosenSeq: int int0 = (-1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2262 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 267 methods.
getSequencesForType(ds.Grafo) => 267 sequences.
number of candidate components: 267
randoop.util.Randomness called by nextRandomInt: 2263 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
grafo1.insereAresta(0, (int)(byte)100, 32);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
grafo1.insereAresta(0, (int)(byte)100, 32);
ds.Grafo grafo23 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
  Param 2 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
Excluding from extension pool due to exception or failure in statement 23
  Statement: ds.Grafo grafo23 = grafo1.grafoTransposto();
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2264 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 267 methods.
getSequencesForType(ds.Grafo) => 267 sequences.
number of candidate components: 267
randoop.util.Randomness called by nextRandomInt: 2265 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo1.listaAdjVazia((int)'a');

randoop.util.Randomness called by weightedCoinFlip: 2266 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2267 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2268 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2269 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean15 = grafo1.listaAdjVazia((int)'a');
boolean boolean18 = grafo1.existeAresta(10, (int)'4');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@61ee6f82 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 4 [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 18 inactive (value is a primitive)
Adding sequence #268 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2270 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 268 methods.
getSequencesForType(ds.Grafo) => 268 sequences.
number of candidate components: 268
randoop.util.Randomness called by nextRandomInt: 2271 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2272 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
int int5 = grafo3.numVertices();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7c3c5fab [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6554db8d [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #269 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2273 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 269 methods.
getSequencesForType(ds.Grafo) => 269 sequences.
number of candidate components: 269
randoop.util.Randomness called by nextRandomInt: 2274 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2275 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2276 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2277 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 2278 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2279 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo.Aresta aresta6 = grafo3.retiraAresta(0, (int)' ');

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3b269972 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2750027e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 6
  Statement: ds.Grafo.Aresta aresta6 = grafo3.retiraAresta(0, (int)' ');
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2280 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 269 methods.
getSequencesForType(ds.Grafo) => 269 sequences.
number of candidate components: 269
randoop.util.Randomness called by nextRandomInt: 2281 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2282 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo15.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1a8e2a0c [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@47ba9f2d [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
Making index 16 inactive (value is null)
Adding sequence #270 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2283 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 270 methods.
getSequencesForType(ds.Grafo) => 270 sequences.
number of candidate components: 270
randoop.util.Randomness called by nextRandomInt: 2284 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2285 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
int int8 = grafo7.numVertices();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2df93874 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@313bbf8a [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 8 inactive (value is a primitive)
Adding sequence #271 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2286 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 104 methods.
getSequencesForType(ds.Grafo$Aresta) => 104 sequences.
number of candidate components: 104
randoop.util.Randomness called by nextRandomInt: 2287 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)0, (int)(byte)10);
int int4 = aresta3.v1();
int int5 = aresta3.v1();
int int6 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #105 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2288 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 105 methods.
getSequencesForType(ds.Grafo$Aresta) => 105 sequences.
number of candidate components: 105
randoop.util.Randomness called by nextRandomInt: 2289 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2290 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2291 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2292 calls to Random so far
chosenSeq: char char0 = 'a';

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2293 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 271 methods.
getSequencesForType(ds.Grafo) => 271 sequences.
number of candidate components: 271
randoop.util.Randomness called by nextRandomInt: 2294 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2295 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2296 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2297 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 2298 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2299 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo.Aresta aresta6 = grafo2.retiraAresta((int)(short)0, (int)(byte)-1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@88e357c [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@298d42c2 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Short]
  Param 1 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 6
  Statement: ds.Grafo.Aresta aresta6 = grafo2.retiraAresta((int)(short)0, (int)(byte)-1);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2300 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 271 methods.
getSequencesForType(ds.Grafo) => 271 sequences.
number of candidate components: 271
randoop.util.Randomness called by nextRandomInt: 2301 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);
boolean boolean19 = grafo13.listaAdjVazia((int)(byte)0);

randoop.util.Randomness called by weightedCoinFlip: 2302 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2303 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 2304 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2305 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 2306 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2307 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);
boolean boolean19 = grafo13.listaAdjVazia((int)(byte)0);
grafo13.insereAresta((int)'#', 0, (int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3d28f854 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is null)
Adding sequence #272 of type ds.Grafo of length 24
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2308 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 105 methods.
getSequencesForType(java.lang.Object) => 378 sequences.
number of candidate components: 378
randoop.util.Randomness called by nextRandomInt: 2309 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(100, (int)(byte)0, (int)(byte)1);
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #33 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2310 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2311 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2312 calls to Random so far
chosenSeq: char char0 = '#';

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2313 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2314 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2315 calls to Random so far
chosenSeq: int int0 = 97;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2316 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 105 methods.
getSequencesForType(ds.Grafo$Aresta) => 105 sequences.
number of candidate components: 105
randoop.util.Randomness called by nextRandomInt: 2317 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #106 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2318 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
getSequencesForType(ds.Grafo) => 272 sequences.
number of candidate components: 272
randoop.util.Randomness called by nextRandomInt: 2319 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2320 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2321 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 2322 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2323 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();
ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((int)(short)1, (int)(short)-1);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 1 [class java.lang.Short]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((int)(short)1, (int)(short)-1);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2324 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 106 methods.
getSequencesForType(java.lang.Object) => 379 sequences.
number of candidate components: 379
randoop.util.Randomness called by nextRandomInt: 2325 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'#', 97, 10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'#', 97, 10);
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #34 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2326 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 106 methods.
getSequencesForType(ds.Grafo$Aresta) => 106 sequences.
number of candidate components: 106
randoop.util.Randomness called by nextRandomInt: 2327 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2328 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 106 methods.
getSequencesForType(ds.Grafo$Aresta) => 106 sequences.
number of candidate components: 106
randoop.util.Randomness called by nextRandomInt: 2329 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (int)'a', 35);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (int)'a', 35);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #107 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2330 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 107 methods.
getSequencesForType(ds.Grafo$Aresta) => 107 sequences.
number of candidate components: 107
randoop.util.Randomness called by nextRandomInt: 2331 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, (int)(byte)0, (int)'a');
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(32, (int)(byte)0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #108 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2332 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
getSequencesForType(ds.Grafo) => 272 sequences.
number of candidate components: 272
randoop.util.Randomness called by nextRandomInt: 2333 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2334 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2335 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
ds.Grafo.Aresta aresta11 = grafo3.proxAdj((int)(byte)10);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2118803d [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@699d7ac3 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 11
  Statement: ds.Grafo.Aresta aresta11 = grafo3.proxAdj((int)(byte)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2336 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
getSequencesForType(ds.Grafo) => 272 sequences.
number of candidate components: 272
randoop.util.Randomness called by nextRandomInt: 2337 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 2338 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2339 calls to Random so far
chosenSeq: int int0 = 0;

randoop.util.Randomness called by weightedCoinFlip: 2340 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2341 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta(0, (int)(short)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 15
  Statement: ds.Grafo.Aresta aresta15 = grafo1.retiraAresta(0, (int)(short)100);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2342 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
getSequencesForType(ds.Grafo) => 272 sequences.
number of candidate components: 272
randoop.util.Randomness called by nextRandomInt: 2343 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2344 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2345 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2346 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 2347 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2348 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo2.existeAresta((int)'#', (int)(byte)1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@74a8e5f1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6e082c88 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: boolean boolean6 = grafo2.existeAresta((int)'#', (int)(byte)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.existeAresta(Grafo.java:33)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2349 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 272 methods.
getSequencesForType(ds.Grafo) => 272 sequences.
number of candidate components: 272
randoop.util.Randomness called by nextRandomInt: 2350 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2351 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
grafo2.imprime();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@28e0e9e3 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
Making index 3 inactive (value is null)
Adding sequence #273 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2352 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 273 methods.
getSequencesForType(ds.Grafo) => 273 sequences.
number of candidate components: 273
randoop.util.Randomness called by nextRandomInt: 2353 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2354 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2355 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 2356 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2357 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 2358 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2359 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(byte)1);
int int2 = grafo1.numVertices();
grafo1.insereAresta((-1), (int)(short)1, 35);

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Short]
  Param 2 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 6
  Statement: grafo1.insereAresta((-1), (int)(short)1, 35);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2360 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 108 methods.
getSequencesForType(ds.Grafo$Aresta) => 108 sequences.
number of candidate components: 108
randoop.util.Randomness called by nextRandomInt: 2361 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();
int int7 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #109 of type ds.Grafo$Aresta of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2362 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2363 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2364 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2365 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2366 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 2367 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2368 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)100, (int)' ', (int)(short)1);

isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #110 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2369 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 110 methods.
getSequencesForType(ds.Grafo$Aresta) => 110 sequences.
number of candidate components: 110
randoop.util.Randomness called by nextRandomInt: 2370 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v2();
int int5 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #111 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2371 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 273 methods.
getSequencesForType(ds.Grafo) => 273 sequences.
number of candidate components: 273
randoop.util.Randomness called by nextRandomInt: 2372 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);

randoop.util.Randomness called by weightedCoinFlip: 2373 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2374 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
boolean boolean3 = grafo1.listaAdjVazia(97);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 3
  Statement: boolean boolean3 = grafo1.listaAdjVazia(97);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2375 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 273 methods.
getSequencesForType(ds.Grafo) => 273 sequences.
number of candidate components: 273
randoop.util.Randomness called by nextRandomInt: 2376 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');
grafo7.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2377 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2378 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 2379 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 2380 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(byte)1);
boolean boolean11 = grafo7.listaAdjVazia((int)' ');
grafo7.imprime();
grafo7.insereAresta((int)(byte)-1, 0, 0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@48add18f [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6cf1546d [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 16
  Statement: grafo7.insereAresta((int)(byte)-1, 0, 0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2381 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2382 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2383 calls to Random so far
chosenSeq: int int0 = 35;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2384 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 273 methods.
getSequencesForType(ds.Grafo) => 273 sequences.
number of candidate components: 273
randoop.util.Randomness called by nextRandomInt: 2385 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 2386 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2387 calls to Random so far
chosenSeq: int int0 = 10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj(10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Adding sequence #274 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2388 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 274 methods.
getSequencesForType(ds.Grafo) => 274 sequences.
number of candidate components: 274
randoop.util.Randomness called by nextRandomInt: 2389 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);

randoop.util.Randomness called by weightedCoinFlip: 2390 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2391 calls to Random so far
chosenSeq: int int0 = 100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
boolean boolean17 = grafo14.existeAresta((int)(short)10, (int)(short)10);
boolean boolean19 = grafo14.listaAdjVazia(100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@29a2cfcd [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@21e243a7 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 19
  Statement: boolean boolean19 = grafo14.listaAdjVazia(100);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2392 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 274 methods.
getSequencesForType(ds.Grafo) => 274 sequences.
number of candidate components: 274
randoop.util.Randomness called by nextRandomInt: 2393 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2394 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2395 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2396 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta19 = grafo17.proxAdj((int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@40dd680d [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7fbdf933 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 17 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #275 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2397 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2398 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2399 calls to Random so far
chosenSeq: char char0 = 'a';

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2400 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2401 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2402 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)1);

isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Adding sequence #276 of type ds.Grafo of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2403 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 111 methods.
getSequencesForType(ds.Grafo$Aresta) => 111 sequences.
number of candidate components: 111
randoop.util.Randomness called by nextRandomInt: 2404 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v1();
int int5 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v1();
int int5 = aresta3.v2();
int int6 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #112 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2405 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 276 methods.
getSequencesForType(ds.Grafo) => 276 sequences.
number of candidate components: 276
randoop.util.Randomness called by nextRandomInt: 2406 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2407 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
ds.Grafo grafo5 = grafo3.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@155aaa75 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7fe5d202 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7ac7890b [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 5 active.
Adding sequence #277 of type ds.Grafo of length 6
Adding sequence #278 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2408 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 112 methods.
getSequencesForType(ds.Grafo$Aresta) => 112 sequences.
number of candidate components: 112
randoop.util.Randomness called by nextRandomInt: 2409 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #113 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2410 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 278 methods.
getSequencesForType(ds.Grafo) => 278 sequences.
number of candidate components: 278
randoop.util.Randomness called by nextRandomInt: 2411 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2412 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2413 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2414 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
boolean boolean4 = grafo1.listaAdjVazia(35);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6363b791 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.listaAdjVazia(35);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2415 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 278 methods.
getSequencesForType(ds.Grafo) => 278 sequences.
number of candidate components: 278
randoop.util.Randomness called by nextRandomInt: 2416 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 2417 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2418 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2419 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2420 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);
ds.Grafo.Aresta aresta22 = grafo13.retiraAresta(10, 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6726f3dc [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@120c7269 [class ds.Grafo$Aresta]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 22
  Statement: ds.Grafo.Aresta aresta22 = grafo13.retiraAresta(10, 32);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2421 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 113 methods.
getSequencesForType(ds.Grafo$Aresta) => 113 sequences.
number of candidate components: 113
randoop.util.Randomness called by nextRandomInt: 2422 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
int int21 = aresta20.v1();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@66a8a668 [class ds.Grafo$Aresta]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta]
Making index 20 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 21 inactive (value is a primitive)
Adding sequence #114 of type ds.Grafo$Aresta of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2423 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 278 methods.
getSequencesForType(ds.Grafo) => 278 sequences.
number of candidate components: 278
randoop.util.Randomness called by nextRandomInt: 2424 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2425 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2426 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();
boolean boolean12 = grafo3.listaAdjVazia((int)(byte)1);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2aaf74f1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@680881d [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
Adding sequence #279 of type ds.Grafo of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2427 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 279 methods.
getSequencesForType(ds.Grafo) => 279 sequences.
number of candidate components: 279
randoop.util.Randomness called by nextRandomInt: 2428 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)0, (-1));

randoop.util.Randomness called by weightedCoinFlip: 2429 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2430 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 2431 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2432 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 2433 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2434 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
boolean boolean16 = grafo1.existeAresta((int)(byte)0, (-1));
grafo1.insereAresta((int)(byte)1, 35, (int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 35 [class java.lang.Integer]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Adding sequence #280 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2435 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 280 methods.
getSequencesForType(ds.Grafo) => 280 sequences.
number of candidate components: 280
randoop.util.Randomness called by nextRandomInt: 2436 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo1.imprime();
grafo1.insereAresta(10, 97, (int)' ');
grafo1.imprime();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7cbb8ad2 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Making index 19 inactive (value is null)
Making index 20 inactive (value is null)
Adding sequence #281 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2437 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 281 methods.
getSequencesForType(ds.Grafo) => 281 sequences.
number of candidate components: 281
randoop.util.Randomness called by nextRandomInt: 2438 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2439 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2440 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2441 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta4 = grafo1.proxAdj(32);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3eab0f6b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Grafo.Aresta aresta4 = grafo1.proxAdj(32);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2442 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 281 methods.
getSequencesForType(ds.Grafo) => 281 sequences.
number of candidate components: 281
randoop.util.Randomness called by nextRandomInt: 2443 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
int int5 = grafo4.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();
int int5 = grafo4.numVertices();
int int6 = grafo4.numVertices();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5034184c [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@72eb9923 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3b41834c [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #282 of type ds.Grafo of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2444 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 282 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 114 methods.
getSequencesForType(java.lang.Object) => 397 sequences.
number of candidate components: 397
randoop.util.Randomness called by nextRandomInt: 2445 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #35 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2446 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 282 methods.
getSequencesForType(ds.Grafo) => 282 sequences.
number of candidate components: 282
randoop.util.Randomness called by nextRandomInt: 2447 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);

randoop.util.Randomness called by weightedCoinFlip: 2448 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2449 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2450 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2451 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 2452 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2453 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean17 = grafo1.listaAdjVazia((int)(byte)10);
grafo1.insereAresta((int)'a', (-1), (int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1164e95d [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence #283 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2454 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2455 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2456 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2457 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 2458 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2459 calls to Random so far
chosenSeq: int int0 = 0;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, 0, 0);

isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #115 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2460 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 283 methods.
getSequencesForType(ds.Grafo) => 283 sequences.
number of candidate components: 283
randoop.util.Randomness called by nextRandomInt: 2461 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)0, (int)(short)10, 100);

randoop.util.Randomness called by weightedCoinFlip: 2462 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2463 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 2464 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 2465 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2466 calls to Random so far
chosenSeq: char char0 = '4';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
grafo1.insereAresta((int)(byte)0, (int)(short)10, 100);
grafo1.insereAresta((int)(byte)-1, 0, (int)'4');

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 100 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 4 [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 12
  Statement: grafo1.insereAresta((int)(byte)-1, 0, (int)'4');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2467 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 115 methods.
getSequencesForType(ds.Grafo$Aresta) => 115 sequences.
number of candidate components: 115
randoop.util.Randomness called by nextRandomInt: 2468 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
int int21 = aresta20.v1();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
int int21 = aresta20.v1();
int int22 = aresta20.v1();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@268c0a8c [class ds.Grafo$Aresta]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta]
Making index 20 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 22 inactive (value is a primitive)
Adding sequence #116 of type ds.Grafo$Aresta of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2469 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 283 methods.
getSequencesForType(ds.Grafo) => 283 sequences.
number of candidate components: 283
randoop.util.Randomness called by nextRandomInt: 2470 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
int int2 = grafo1.numVertices();
ds.Grafo grafo3 = grafo1.grafoTransposto();

MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2ce89b53 [class ds.Grafo]
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #284 of type ds.Grafo of length 4
Adding sequence #285 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2471 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 285 methods.
getSequencesForType(ds.Grafo) => 285 sequences.
number of candidate components: 285
randoop.util.Randomness called by nextRandomInt: 2472 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2473 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2474 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2475 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 2476 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2477 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 2478 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2479 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
ds.Grafo grafo14 = grafo13.grafoTransposto();
grafo13.insereAresta(97, 97, (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3be42849 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@463903f8 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #286 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2480 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 286 methods.
getSequencesForType(ds.Grafo) => 286 sequences.
number of candidate components: 286
randoop.util.Randomness called by nextRandomInt: 2481 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2482 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2483 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2484 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo1.proxAdj((-1));

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@53c607f8 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.proxAdj((-1));
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2485 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 286 methods.
getSequencesForType(ds.Grafo) => 286 sequences.
number of candidate components: 286
randoop.util.Randomness called by nextRandomInt: 2486 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)'#', (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)'#', (int)(byte)10);
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
Making index 21 inactive (value is null)
Adding sequence #287 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2487 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 287 methods.
getSequencesForType(ds.Grafo) => 287 sequences.
number of candidate components: 287
randoop.util.Randomness called by nextRandomInt: 2488 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 2489 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2490 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 2491 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2492 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');
boolean boolean21 = grafo15.existeAresta(1, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4d517c82 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
Adding sequence #288 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2493 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 288 methods.
getSequencesForType(ds.Grafo) => 288 sequences.
number of candidate components: 288
randoop.util.Randomness called by nextRandomInt: 2494 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Adding sequence #289 of type ds.Grafo of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2495 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 289 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 116 methods.
getSequencesForType(java.lang.Object) => 406 sequences.
number of candidate components: 406
randoop.util.Randomness called by nextRandomInt: 2496 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2497 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)' ', (int)(byte)1, (int)(byte)100);
ds.Grafo grafo13 = grafo1.grafoTransposto();
java.lang.Class<?> wildcardClass14 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1d3bb0ea [class ds.Grafo]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 14 active.
Adding sequence #36 of type java.lang.Class<?> of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2498 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 289 methods.
getSequencesForType(ds.Grafo) => 289 sequences.
number of candidate components: 289
randoop.util.Randomness called by nextRandomInt: 2499 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia(0);

randoop.util.Randomness called by weightedCoinFlip: 2500 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2501 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia(0);
ds.Grafo.Aresta aresta5 = grafo1.primeiroListaAdj(97);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence #290 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2502 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 290 methods.
getSequencesForType(ds.Grafo) => 290 sequences.
number of candidate components: 290
randoop.util.Randomness called by nextRandomInt: 2503 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2504 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2505 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2506 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2507 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2508 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2509 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2510 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
grafo10.insereAresta((int)'a', 10, (int)'a');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@c56f941 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 10 [class java.lang.Integer]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
Adding sequence #291 of type ds.Grafo of length 15
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2511 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 291 methods.
getSequencesForType(ds.Grafo) => 291 sequences.
number of candidate components: 291
randoop.util.Randomness called by nextRandomInt: 2512 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);
ds.Grafo grafo23 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2513 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2514 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2515 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 2516 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2517 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);
ds.Grafo grafo23 = grafo1.grafoTransposto();
boolean boolean26 = grafo1.existeAresta((int)(short)1, (int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7086ca81 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 23 active.
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 24 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 25 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 26 inactive (value is a primitive)
Adding sequence #292 of type ds.Grafo of length 27
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2518 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 116 methods.
getSequencesForType(ds.Grafo$Aresta) => 116 sequences.
number of candidate components: 116
randoop.util.Randomness called by nextRandomInt: 2519 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 35, 32);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 35, 32);
int int4 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #117 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2520 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 292 methods.
getSequencesForType(ds.Grafo) => 292 sequences.
number of candidate components: 292
randoop.util.Randomness called by nextRandomInt: 2521 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.proxAdj(97);

randoop.util.Randomness called by weightedCoinFlip: 2522 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2523 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta16 = grafo1.proxAdj(97);
ds.Grafo.Aresta aresta18 = grafo1.proxAdj(35);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => ds.Grafo$Aresta@16750fb3 [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 18 active.
Adding sequence #118 of type ds.Grafo$Aresta of length 19
Adding sequence #293 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2524 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2525 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2526 calls to Random so far
chosenSeq: short short0 = (short)-1;

randoop.util.Randomness called by weightedCoinFlip: 2527 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2528 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 2529 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2530 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)-1, 100, (int)(short)-1);

isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #119 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2531 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 293 methods.
getSequencesForType(ds.Grafo) => 293 sequences.
number of candidate components: 293
randoop.util.Randomness called by nextRandomInt: 2532 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta19 = grafo1.proxAdj((int)(short)0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta19 = grafo1.proxAdj((int)(short)0);
int int20 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 20 inactive (value is a primitive)
Adding sequence #294 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2533 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 294 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 119 methods.
getSequencesForType(java.lang.Object) => 414 sequences.
number of candidate components: 414
randoop.util.Randomness called by nextRandomInt: 2534 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);

randoop.util.Randomness called by nextRandomInt: 2535 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);
java.lang.Class<?> wildcardClass20 = aresta19.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7f01d3d5 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@1ae51599 [class ds.Grafo$Aresta]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 19 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 20 active.
Adding sequence #37 of type java.lang.Class<?> of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2536 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2537 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2538 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 2539 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2540 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2541 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2542 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)100, (-1));

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #120 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2543 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 294 methods.
getSequencesForType(ds.Grafo) => 294 sequences.
number of candidate components: 294
randoop.util.Randomness called by nextRandomInt: 2544 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo1.proxAdj((int)(short)0);

randoop.util.Randomness called by weightedCoinFlip: 2545 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2546 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta13 = grafo1.proxAdj((int)(short)0);
ds.Grafo.Aresta aresta15 = grafo1.primeiroListaAdj(32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7dd1fa6a [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 11 active.
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is null)
Adding sequence #295 of type ds.Grafo of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2547 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2548 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2549 calls to Random so far
chosenSeq: char char0 = '4';

randoop.util.Randomness called by weightedCoinFlip: 2550 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2551 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 2552 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2553 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', (int)(byte)100, (-1));

isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #121 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2554 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 121 methods.
getSequencesForType(ds.Grafo$Aresta) => 121 sequences.
number of candidate components: 121
randoop.util.Randomness called by nextRandomInt: 2555 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v1();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #122 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2556 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 295 methods.
getSequencesForType(ds.Grafo) => 295 sequences.
number of candidate components: 295
randoop.util.Randomness called by nextRandomInt: 2557 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo grafo9 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@c2c697b [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 9 active.
Adding sequence #296 of type ds.Grafo of length 10
Adding sequence #297 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2558 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 297 methods.
getSequencesForType(ds.Grafo) => 297 sequences.
number of candidate components: 297
randoop.util.Randomness called by nextRandomInt: 2559 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
int int5 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
int int5 = grafo1.numVertices();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ # : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
Making index 2 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is null)
Adding sequence #298 of type ds.Grafo of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2560 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 298 methods.
getSequencesForType(ds.Grafo) => 298 sequences.
number of candidate components: 298
randoop.util.Randomness called by nextRandomInt: 2561 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2562 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2563 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
boolean boolean4 = grafo1.listaAdjVazia((int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 4
  Statement: boolean boolean4 = grafo1.listaAdjVazia((int)(byte)-1);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2564 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 298 methods.
getSequencesForType(ds.Grafo) => 298 sequences.
number of candidate components: 298
randoop.util.Randomness called by nextRandomInt: 2565 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(97);

randoop.util.Randomness called by weightedCoinFlip: 2566 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2567 calls to Random so far
chosenSeq: int int0 = (-1);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(97);
boolean boolean3 = grafo1.listaAdjVazia((-1));

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 3
  Statement: boolean boolean3 = grafo1.listaAdjVazia((-1));
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2568 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 298 methods.
getSequencesForType(ds.Grafo) => 298 sequences.
number of candidate components: 298
randoop.util.Randomness called by nextRandomInt: 2569 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2570 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2571 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2572 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 2573 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2574 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
ds.Grafo grafo11 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta14 = grafo11.retiraAresta(97, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@111a75ce [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 14
  Statement: ds.Grafo.Aresta aresta14 = grafo11.retiraAresta(97, (int)(byte)100);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2575 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 298 methods.
getSequencesForType(ds.Grafo) => 298 sequences.
number of candidate components: 298
randoop.util.Randomness called by nextRandomInt: 2576 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);

randoop.util.Randomness called by weightedCoinFlip: 2577 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2578 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
ds.Grafo.Aresta aresta8 = grafo1.primeiroListaAdj((int)(byte)0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Adding sequence #299 of type ds.Grafo of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2579 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2580 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2581 calls to Random so far
chosenSeq: int int0 = 0;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2582 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 299 methods.
getSequencesForType(ds.Grafo) => 299 sequences.
number of candidate components: 299
randoop.util.Randomness called by nextRandomInt: 2583 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
ds.Grafo.Aresta aresta8 = grafo1.proxAdj(0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
boolean boolean6 = grafo1.existeAresta(35, (int)(short)-1);
ds.Grafo.Aresta aresta8 = grafo1.proxAdj(0);
grafo1.imprime();

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 35 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Adding sequence #300 of type ds.Grafo of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2584 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 300 methods.
getSequencesForType(ds.Grafo) => 300 sequences.
number of candidate components: 300
randoop.util.Randomness called by nextRandomInt: 2585 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2586 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6f539b4e [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
Making index 16 inactive (value is null)
Adding sequence #301 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2587 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 122 methods.
getSequencesForType(ds.Grafo$Aresta) => 122 sequences.
number of candidate components: 122
randoop.util.Randomness called by nextRandomInt: 2588 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, (int)(byte)-1, (int)(byte)0);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, (int)(byte)-1, (int)(byte)0);
int int4 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 10 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #123 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2589 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 301 methods.
getSequencesForType(ds.Grafo) => 301 sequences.
number of candidate components: 301
randoop.util.Randomness called by nextRandomInt: 2590 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta19 = grafo17.proxAdj((int)(byte)1);

randoop.util.Randomness called by weightedCoinFlip: 2591 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2592 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 2593 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2594 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
boolean boolean16 = grafo1.existeAresta(0, (int)(byte)1);
ds.Grafo grafo17 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta19 = grafo17.proxAdj((int)(byte)1);
ds.Grafo.Aresta aresta22 = grafo17.retiraAresta(97, (int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4f7c0ed9 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@17305ccb [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 22
  Statement: ds.Grafo.Aresta aresta22 = grafo17.retiraAresta(97, (int)(short)-1);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2595 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 123 methods.
getSequencesForType(ds.Grafo$Aresta) => 123 sequences.
number of candidate components: 123
randoop.util.Randomness called by nextRandomInt: 2596 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();
int int5 = aresta3.v1();
int int6 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 35 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #124 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2597 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 301 methods.
getSequencesForType(ds.Grafo) => 301 sequences.
number of candidate components: 301
randoop.util.Randomness called by nextRandomInt: 2598 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2599 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2600 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2601 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2602 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2603 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta18 = grafo15.retiraAresta((int)'a', 32);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5527eacb [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = a [class java.lang.Character]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 18
  Statement: ds.Grafo.Aresta aresta18 = grafo15.retiraAresta((int)'a', 32);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2604 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 301 methods.
getSequencesForType(ds.Grafo) => 301 sequences.
number of candidate components: 301
randoop.util.Randomness called by nextRandomInt: 2605 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
grafo1.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2606 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2607 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 2608 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2609 calls to Random so far
chosenSeq: short short0 = (short)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
grafo1.imprime();
boolean boolean22 = grafo1.existeAresta((int)'#', (int)(short)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 22 inactive (value is a primitive)
Adding sequence #302 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2610 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 124 methods.
getSequencesForType(ds.Grafo$Aresta) => 124 sequences.
number of candidate components: 124
randoop.util.Randomness called by nextRandomInt: 2611 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2612 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 302 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 124 methods.
getSequencesForType(java.lang.Object) => 427 sequences.
number of candidate components: 427
randoop.util.Randomness called by nextRandomInt: 2613 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2614 calls to Random so far
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2615 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 302 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 124 methods.
getSequencesForType(java.lang.Object) => 427 sequences.
number of candidate components: 427
randoop.util.Randomness called by nextRandomInt: 2616 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', (-1), 1);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', (-1), 1);
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #38 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2617 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2618 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2619 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 2620 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2621 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

randoop.util.Randomness called by weightedCoinFlip: 2622 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2623 calls to Random so far
chosenSeq: int int0 = 1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(byte)100, 1);

isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #125 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2624 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2625 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2626 calls to Random so far
chosenSeq: short short0 = (short)10;

randoop.util.Randomness called by weightedCoinFlip: 2627 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2628 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 2629 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2630 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)10, (-1), (int)(short)-1);

isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #126 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2631 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2632 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2633 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2634 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 126 methods.
getSequencesForType(ds.Grafo$Aresta) => 126 sequences.
number of candidate components: 126
randoop.util.Randomness called by nextRandomInt: 2635 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)-1, (int)(byte)-1, (int)'#');
int int4 = aresta3.peso();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2636 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 302 methods.
getSequencesForType(ds.Grafo) => 302 sequences.
number of candidate components: 302
randoop.util.Randomness called by nextRandomInt: 2637 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean18 = grafo1.existeAresta(0, (-1));

randoop.util.Randomness called by weightedCoinFlip: 2638 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2639 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
boolean boolean18 = grafo1.existeAresta(0, (-1));
ds.Grafo.Aresta aresta20 = grafo1.primeiroListaAdj((int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@746fc6d4 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 20
  Statement: ds.Grafo.Aresta aresta20 = grafo1.primeiroListaAdj((int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2640 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 126 methods.
getSequencesForType(ds.Grafo$Aresta) => 126 sequences.
number of candidate components: 126
randoop.util.Randomness called by nextRandomInt: 2641 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();
int int7 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();
int int7 = aresta3.v2();
int int8 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 8 inactive (value is a primitive)
Adding sequence #127 of type ds.Grafo$Aresta of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2642 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 302 methods.
getSequencesForType(ds.Grafo) => 302 sequences.
number of candidate components: 302
randoop.util.Randomness called by nextRandomInt: 2643 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2644 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo1.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@40dac610 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1e636c69 [class ds.Grafo]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
Adding sequence #303 of type ds.Grafo of length 4
Adding sequence #304 of type ds.Grafo of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2645 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 304 methods.
getSequencesForType(ds.Grafo) => 304 sequences.
number of candidate components: 304
randoop.util.Randomness called by nextRandomInt: 2646 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
int int4 = grafo2.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
int int4 = grafo2.numVertices();
grafo2.imprime();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3469183e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@740c8214 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
Adding sequence #305 of type ds.Grafo of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2647 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 305 methods.
getSequencesForType(ds.Grafo) => 305 sequences.
number of candidate components: 305
randoop.util.Randomness called by nextRandomInt: 2648 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2649 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2650 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

randoop.util.Randomness called by weightedCoinFlip: 2651 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2652 calls to Random so far
chosenSeq: int int0 = (-1);

randoop.util.Randomness called by weightedCoinFlip: 2653 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
int int3 = grafo2.numVertices();
grafo2.insereAresta((int)(byte)1, (-1), 0);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5bb44631 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = -1 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 7
  Statement: grafo2.insereAresta((int)(byte)1, (-1), 0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2654 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 305 methods.
getSequencesForType(ds.Grafo) => 305 sequences.
number of candidate components: 305
randoop.util.Randomness called by nextRandomInt: 2655 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2656 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2657 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2658 calls to Random so far
chosenSeq: char char0 = '#';

randoop.util.Randomness called by weightedCoinFlip: 2659 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2660 calls to Random so far
chosenSeq: short short0 = (short)0;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
boolean boolean10 = grafo7.existeAresta((int)'#', (int)(short)0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6b202b79 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@55a4e145 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 7 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 10 inactive (value is a primitive)
Adding sequence #306 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2661 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 306 methods.
getSequencesForType(ds.Grafo) => 306 sequences.
number of candidate components: 306
randoop.util.Randomness called by nextRandomInt: 2662 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
boolean boolean14 = grafo1.listaAdjVazia((int)'#');

randoop.util.Randomness called by weightedCoinFlip: 2663 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2664 calls to Random so far
chosenSeq: short short0 = (short)1;

randoop.util.Randomness called by weightedCoinFlip: 2665 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2666 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 2667 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2668 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
ds.Grafo.Aresta aresta10 = grafo1.primeiroListaAdj((int)'4');
boolean boolean12 = grafo1.listaAdjVazia((int)(byte)1);
boolean boolean14 = grafo1.listaAdjVazia((int)'#');
grafo1.insereAresta((int)(short)1, 100, (int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 4 [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Short]
  Param 1 = 100 [class java.lang.Integer]
  Param 2 = # [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
Adding sequence #307 of type ds.Grafo of length 19
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2669 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 307 methods.
getSequencesForType(ds.Grafo) => 307 sequences.
number of candidate components: 307
randoop.util.Randomness called by nextRandomInt: 2670 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();
ds.Grafo grafo18 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2671 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();
ds.Grafo grafo18 = grafo1.grafoTransposto();
ds.Grafo grafo19 = grafo18.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@414ff9b6 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7b70534 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 19 active.
Adding sequence #308 of type ds.Grafo of length 20
Adding sequence #309 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2672 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 309 methods.
getSequencesForType(ds.Grafo) => 309 sequences.
number of candidate components: 309
randoop.util.Randomness called by nextRandomInt: 2673 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);

randoop.util.Randomness called by weightedCoinFlip: 2674 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2675 calls to Random so far
chosenSeq: int int0 = 97;

randoop.util.Randomness called by weightedCoinFlip: 2676 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2677 calls to Random so far
chosenSeq: int int0 = 1;

randoop.util.Randomness called by weightedCoinFlip: 2678 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2679 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
grafo1.insereAresta(97, 1, (int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 97 [class java.lang.Integer]
  Param 1 = 1 [class java.lang.Integer]
  Param 2 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: grafo1.insereAresta(97, 1, (int)(byte)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2680 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 309 methods.
getSequencesForType(ds.Grafo) => 309 sequences.
number of candidate components: 309
randoop.util.Randomness called by nextRandomInt: 2681 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();
boolean boolean7 = grafo1.existeAresta((int)(byte)10, (int)(short)100);

randoop.util.Randomness called by weightedCoinFlip: 2682 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2683 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
boolean boolean3 = grafo1.listaAdjVazia((int)(byte)1);
int int4 = grafo1.numVertices();
boolean boolean7 = grafo1.existeAresta((int)(byte)10, (int)(short)100);
boolean boolean9 = grafo1.listaAdjVazia((int)(byte)-1);

MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
Excluding from extension pool due to exception or failure in statement 9
  Statement: boolean boolean9 = grafo1.listaAdjVazia((int)(byte)-1);
A user-defined toString() method failed.
  fmt =   Result: %s%n
  arg types = [class randoop.ExceptionalExecution]
java.lang.ArrayIndexOutOfBoundsException: 0
	at randoop.ExceptionalExecution.toString(ExceptionalExecution.java:37)
	at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at randoop.util.Log.logPrintf(Log.java:39)
	at randoop.generation.ForwardGenerator.determineActiveIndices(ForwardGenerator.java:296)
	at randoop.generation.ForwardGenerator.step(ForwardGenerator.java:217)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:316)
	at randoop.main.GenTests.handle(GenTests.java:495)
	at randoop.main.Main.nonStaticMain(Main.java:70)
	at randoop.main.Main.main(Main.java:30)
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2684 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 127 methods.
getSequencesForType(ds.Grafo$Aresta) => 127 sequences.
number of candidate components: 127
randoop.util.Randomness called by nextRandomInt: 2685 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.peso();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #128 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2686 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 309 methods.
getSequencesForType(ds.Grafo) => 309 sequences.
number of candidate components: 309
randoop.util.Randomness called by nextRandomInt: 2687 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2688 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2689 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2690 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
boolean boolean12 = grafo1.listaAdjVazia((int)' ');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2cd73927 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
Adding sequence #310 of type ds.Grafo of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2691 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 128 methods.
getSequencesForType(ds.Grafo$Aresta) => 128 sequences.
number of candidate components: 128
randoop.util.Randomness called by nextRandomInt: 2692 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 35, 32);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 35, 32);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 32 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #129 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2693 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 129 methods.
getSequencesForType(ds.Grafo$Aresta) => 129 sequences.
number of candidate components: 129
randoop.util.Randomness called by nextRandomInt: 2694 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 32, 97);

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)'4', 32, 97);
int int4 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
Adding sequence #130 of type ds.Grafo$Aresta of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2695 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 310 methods.
getSequencesForType(ds.Grafo) => 310 sequences.
number of candidate components: 310
randoop.util.Randomness called by nextRandomInt: 2696 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
int int9 = grafo1.numVertices();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
int int9 = grafo1.numVertices();
grafo1.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is null)
Adding sequence #311 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2697 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 130 methods.
getSequencesForType(ds.Grafo$Aresta) => 130 sequences.
number of candidate components: 130
randoop.util.Randomness called by nextRandomInt: 2698 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(1, (-1), 1);
int int4 = aresta3.v2();
int int5 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #131 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2699 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2700 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2701 calls to Random so far
chosenSeq: byte byte0 = (byte)10;

randoop.util.Randomness called by weightedCoinFlip: 2702 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2703 calls to Random so far
chosenSeq: int int0 = 35;

randoop.util.Randomness called by weightedCoinFlip: 2704 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2705 calls to Random so far
chosenSeq: char char0 = 'a';

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)10, 35, (int)'a');

isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #132 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2706 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 311 methods.
getSequencesForType(ds.Grafo) => 311 sequences.
number of candidate components: 311
randoop.util.Randomness called by nextRandomInt: 2707 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);

randoop.util.Randomness called by weightedCoinFlip: 2708 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2709 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);
ds.Grafo.Aresta aresta24 = grafo1.proxAdj((int)(short)10);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => ds.Grafo$Aresta@25ec399c [class ds.Grafo$Aresta]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 23 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 24 active.
Adding sequence #133 of type ds.Grafo$Aresta of length 25
Adding sequence #312 of type ds.Grafo of length 25
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2710 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 312 methods.
getSequencesForType(ds.Grafo) => 312 sequences.
number of candidate components: 312
randoop.util.Randomness called by nextRandomInt: 2711 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2712 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2713 calls to Random so far
chosenSeq: int int0 = 100;

randoop.util.Randomness called by weightedCoinFlip: 2714 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta15 = grafo1.retiraAresta((int)'#', (-1));
int int16 = grafo1.numVertices();
ds.Grafo.Aresta aresta19 = grafo1.retiraAresta(100, 0);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = # [class java.lang.Character]
  Param 1 = -1 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 100 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 19
  Statement: ds.Grafo.Aresta aresta19 = grafo1.retiraAresta(100, 0);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2715 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 312 methods.
getSequencesForType(ds.Grafo) => 312 sequences.
number of candidate components: 312
randoop.util.Randomness called by nextRandomInt: 2716 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);

randoop.util.Randomness called by weightedCoinFlip: 2717 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2718 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
boolean boolean17 = grafo13.existeAresta(32, 10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(byte)1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@72877fa1 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 17 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is null)
Adding sequence #313 of type ds.Grafo of length 20
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2719 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 133 methods.
getSequencesForType(ds.Grafo$Aresta) => 133 sequences.
number of candidate components: 133
randoop.util.Randomness called by nextRandomInt: 2720 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();
int int5 = aresta3.v1();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();
int int5 = aresta3.v1();
int int6 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 32 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #134 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2721 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 313 methods.
getSequencesForType(ds.Grafo) => 313 sequences.
number of candidate components: 313
randoop.util.Randomness called by nextRandomInt: 2722 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2723 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2724 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2725 calls to Random so far
chosenSeq: short short0 = (short)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo2.primeiroListaAdj((int)(short)100);

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@61d8c79d [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@118f0418 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo2.primeiroListaAdj((int)(short)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2726 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 313 methods.
getSequencesForType(ds.Grafo) => 313 sequences.
number of candidate components: 313
randoop.util.Randomness called by nextRandomInt: 2727 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2728 calls to Random so far
randoop.util.Randomness called by weightedCoinFlip: 2729 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2730 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
grafo1.imprime();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta5 = grafo1.proxAdj(97);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@33bbdb52 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Grafo.Aresta aresta5 = grafo1.proxAdj(97);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2731 calls to Random so far
Selected operation: ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 313 methods.
getSequencesForType(ds.Grafo) => 313 sequences.
number of candidate components: 313
randoop.util.Randomness called by nextRandomInt: 2732 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2733 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2734 calls to Random so far
chosenSeq: int int0 = 32;

randoop.util.Randomness called by weightedCoinFlip: 2735 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2736 calls to Random so far
chosenSeq: int int0 = 35;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();
boolean boolean7 = grafo1.existeAresta(32, 35);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 35 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 7 inactive (value is a primitive)
Adding sequence #314 of type ds.Grafo of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2737 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 314 methods.
getSequencesForType(ds.Grafo) => 314 sequences.
number of candidate components: 314
randoop.util.Randomness called by nextRandomInt: 2738 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();
boolean boolean21 = grafo14.existeAresta((int)(byte)1, (int)(short)1);

randoop.util.Randomness called by weightedCoinFlip: 2739 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2740 calls to Random so far
chosenSeq: char char0 = ' ';

randoop.util.Randomness called by weightedCoinFlip: 2741 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2742 calls to Random so far
chosenSeq: short short0 = (short)0;

randoop.util.Randomness called by weightedCoinFlip: 2743 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2744 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
ds.Grafo grafo18 = grafo14.grafoTransposto();
boolean boolean21 = grafo14.existeAresta((int)(byte)1, (int)(short)1);
grafo14.insereAresta((int)' ', (int)(short)0, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4c2d69b [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5170e043 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 0 [class java.lang.Short]
  Param 2 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 23 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is null)
Adding sequence #315 of type ds.Grafo of length 26
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2745 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 315 methods.
getSequencesForType(ds.Grafo) => 315 sequences.
number of candidate components: 315
randoop.util.Randomness called by nextRandomInt: 2746 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
ds.Grafo grafo10 = grafo3.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@3c6b2d52 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1d2be878 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@54a6dda2 [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
Adding sequence #316 of type ds.Grafo of length 11
Adding sequence #317 of type ds.Grafo of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2747 calls to Random so far
Selected operation: ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 317 methods.
getSequencesForType(ds.Grafo) => 317 sequences.
number of candidate components: 317
randoop.util.Randomness called by nextRandomInt: 2748 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');
boolean boolean21 = grafo15.existeAresta(1, (int)(byte)100);

randoop.util.Randomness called by weightedCoinFlip: 2749 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2750 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo.Aresta aresta14 = grafo1.primeiroListaAdj(10);
ds.Grafo grafo15 = grafo1.grafoTransposto();
int int16 = grafo15.numVertices();
ds.Grafo.Aresta aresta18 = grafo15.primeiroListaAdj((int)'#');
boolean boolean21 = grafo15.existeAresta(1, (int)(byte)100);
boolean boolean23 = grafo15.listaAdjVazia((int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1b4ed7e1 [class ds.Grafo]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 15 active.
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 16 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 23 inactive (value is a primitive)
Adding sequence #318 of type ds.Grafo of length 24
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2751 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 318 methods.
getSequencesForType(ds.Grafo) => 318 sequences.
number of candidate components: 318
randoop.util.Randomness called by nextRandomInt: 2752 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(short)10);

randoop.util.Randomness called by weightedCoinFlip: 2753 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2754 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2755 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2756 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2757 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2758 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
ds.Grafo grafo4 = grafo1.grafoTransposto();
boolean boolean6 = grafo4.listaAdjVazia(0);
ds.Grafo grafo7 = grafo4.grafoTransposto();
ds.Grafo.Aresta aresta9 = grafo7.primeiroListaAdj((int)(short)10);
grafo7.insereAresta((int)(short)100, (int)'a', (int)(byte)1);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@1592b912 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4346cce8 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 100 [class java.lang.Short]
  Param 1 = a [class java.lang.Character]
  Param 2 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
Excluding from extension pool due to exception or failure in statement 13
  Statement: grafo7.insereAresta((int)(short)100, (int)'a', (int)(byte)1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.insereAresta(Grafo.java:29)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2759 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 318 methods.
getSequencesForType(ds.Grafo) => 318 sequences.
number of candidate components: 318
randoop.util.Randomness called by nextRandomInt: 2760 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2761 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@304c800 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@4dfc73b5 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@7b68f6d8 [class ds.Grafo]
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
Adding sequence #319 of type ds.Grafo of length 5
Adding sequence #320 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2762 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 320 methods.
getSequencesForType(ds.Grafo) => 320 sequences.
number of candidate components: 320
randoop.util.Randomness called by nextRandomInt: 2763 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo1.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2764 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(0);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo1.grafoTransposto();
ds.Grafo grafo4 = grafo3.grafoTransposto();

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@67854f30 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@d84567e [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@27f621b1 [class ds.Grafo]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 2 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 4 active.
Adding sequence #321 of type ds.Grafo of length 5
Adding sequence #322 of type ds.Grafo of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2765 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
getSequencesForType(ds.Grafo) => 322 sequences.
number of candidate components: 322
randoop.util.Randomness called by nextRandomInt: 2766 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);

randoop.util.Randomness called by weightedCoinFlip: 2767 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2768 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 2769 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2770 calls to Random so far
chosenSeq: byte byte0 = (byte)100;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)'#');
grafo1.imprime();
ds.Grafo.Aresta aresta4 = grafo1.primeiroListaAdj(10);
ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((int)(byte)-1, (int)(byte)100);

MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = -1 [class java.lang.Byte]
  Param 1 = 100 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((int)(byte)-1, (int)(byte)100);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.retiraAresta(Grafo.java:52)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2771 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 134 methods.
getSequencesForType(ds.Grafo$Aresta) => 134 sequences.
number of candidate components: 134
randoop.util.Randomness called by nextRandomInt: 2772 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);
ds.Grafo.Aresta aresta24 = grafo1.proxAdj((int)(short)10);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
int int18 = grafo1.numVertices();
ds.Grafo.Aresta aresta20 = grafo1.proxAdj((int)(byte)0);
boolean boolean22 = grafo1.listaAdjVazia(10);
ds.Grafo.Aresta aresta24 = grafo1.proxAdj((int)(short)10);
int int25 = aresta24.v2();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Byte]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => ds.Grafo$Aresta@117bda0b [class ds.Grafo$Aresta]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 21 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 22 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 23 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 24 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 25 inactive (value is a primitive)
Adding sequence #135 of type ds.Grafo$Aresta of length 26
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2773 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
getSequencesForType(ds.Grafo) => 322 sequences.
number of candidate components: 322
randoop.util.Randomness called by nextRandomInt: 2774 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);

randoop.util.Randomness called by weightedCoinFlip: 2775 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2776 calls to Random so far
chosenSeq: short short0 = (short)10;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)(short)10);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 3
  Statement: ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)(short)10);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2777 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 135 methods.
getSequencesForType(ds.Grafo$Aresta) => 135 sequences.
number of candidate components: 135
randoop.util.Randomness called by nextRandomInt: 2778 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
ds.Grafo grafo13 = grafo1.grafoTransposto();
grafo13.imprime();
ds.Grafo.Aresta aresta17 = grafo13.retiraAresta(0, (int)(short)10);
ds.Grafo.Aresta aresta19 = grafo13.primeiroListaAdj((int)(short)0);
int int20 = aresta19.v2();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@6aa84e61 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@238f0f2f [class ds.Grafo$Aresta]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 35 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 13 active.
Making index 14 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 19 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 20 inactive (value is a primitive)
Adding sequence #136 of type ds.Grafo$Aresta of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2779 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 136 methods.
getSequencesForType(java.lang.Object) => 459 sequences.
number of candidate components: 459
randoop.util.Randomness called by nextRandomInt: 2780 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
grafo10.insereAresta((int)'a', 10, (int)'a');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
grafo10.insereAresta((int)'a', 10, (int)'a');
java.lang.Class<?> wildcardClass15 = grafo10.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@76d45c01 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = 10 [class java.lang.Integer]
  Param 2 = a [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 15 active.
Adding sequence #39 of type java.lang.Class<?> of length 16
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2781 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 136 methods.
getSequencesForType(java.lang.Object) => 459 sequences.
number of candidate components: 459
randoop.util.Randomness called by nextRandomInt: 2782 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)10, (int)'4');

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', (int)(short)10, (int)'4');
java.lang.Class<?> wildcardClass4 = aresta3.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo$Aresta [class java.lang.Class]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 4 : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #40 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2783 calls to Random so far
Selected operation: ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
getSequencesForType(ds.Grafo) => 322 sequences.
number of candidate components: 322
randoop.util.Randomness called by nextRandomInt: 2784 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2785 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2786 calls to Random so far
chosenSeq: byte byte0 = (byte)0;

randoop.util.Randomness called by weightedCoinFlip: 2787 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
ds.Grafo.Aresta aresta3 = grafo1.proxAdj((int)'a');
int int4 = grafo1.numVertices();
ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((int)(byte)0, 0);

MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = a [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Grafo.Aresta aresta7 = grafo1.retiraAresta((int)(byte)0, 0);
  Result: [ExceptionalExecution, java.lang.Exception, at ds.Lista.retira(Lista.java:32)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2788 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2789 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2790 calls to Random so far
chosenSeq: byte byte0 = (byte)1;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2791 calls to Random so far
Selected operation: ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
getSequencesForType(ds.Grafo) => 322 sequences.
number of candidate components: 322
randoop.util.Randomness called by nextRandomInt: 2792 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();
int int11 = grafo3.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2793 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2794 calls to Random so far
chosenSeq: char char0 = ' ';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo((int)(short)10);
ds.Grafo grafo2 = grafo1.grafoTransposto();
ds.Grafo grafo3 = grafo2.grafoTransposto();
boolean boolean6 = grafo3.existeAresta(0, 10);
ds.Grafo.Aresta aresta8 = grafo3.proxAdj((int)(short)0);
grafo3.imprime();
int int10 = grafo3.numVertices();
int int11 = grafo3.numVertices();
ds.Grafo.Aresta aresta13 = grafo3.proxAdj((int)' ');

MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2eb029e1 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@45dbba91 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 0 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => null
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 10 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
Excluding from extension pool due to exception or failure in statement 13
  Statement: ds.Grafo.Aresta aresta13 = grafo3.proxAdj((int)' ');
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.proxAdj(Grafo.java:47)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2795 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 136 methods.
getSequencesForType(java.lang.Object) => 459 sequences.
number of candidate components: 459
randoop.util.Randomness called by nextRandomInt: 2796 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
java.lang.Class<?> wildcardClass17 = grafo1.getClass();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.Grafo [class java.lang.Class]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 17 active.
Adding sequence #41 of type java.lang.Class<?> of length 18
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2797 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 322 methods.
getSequencesForType(ds.Grafo) => 322 sequences.
number of candidate components: 322
randoop.util.Randomness called by nextRandomInt: 2798 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);

randoop.util.Randomness called by weightedCoinFlip: 2799 calls to Random so far
Using null as input.
randoop.util.Randomness called by weightedCoinFlip: 2800 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2801 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2802 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2803 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
int int13 = grafo1.numVertices();
ds.Grafo grafo14 = grafo1.grafoTransposto();
ds.Grafo.Aresta aresta17 = grafo14.retiraAresta((int)' ', (int)(short)100);
grafo14.insereAresta(0, (int)'a', (int)(byte)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5e381e27 [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 =   [class java.lang.Character]
  Param 1 = 100 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 0 [class java.lang.Integer]
  Param 1 = a [class java.lang.Character]
  Param 2 = -1 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 14 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is null)
Adding sequence #323 of type ds.Grafo of length 22
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2804 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 136 methods.
getSequencesForType(ds.Grafo$Aresta) => 136 sequences.
number of candidate components: 136
randoop.util.Randomness called by nextRandomInt: 2805 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.v2();
int int7 = aresta3.v1();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v1()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v1()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #137 of type ds.Grafo$Aresta of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2806 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 137 methods.
getSequencesForType(ds.Grafo$Aresta) => 137 sequences.
number of candidate components: 137
randoop.util.Randomness called by nextRandomInt: 2807 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (-1), (int)(short)1);
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(0, (-1), (int)(short)1);
int int4 = aresta3.v2();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => -1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #138 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2808 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 138 methods.
getSequencesForType(ds.Grafo$Aresta) => 138 sequences.
number of candidate components: 138
randoop.util.Randomness called by nextRandomInt: 2809 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();
int int5 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)' ', 35, 1);
int int4 = aresta3.peso();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [   : () -> char]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 35 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
Adding sequence #139 of type ds.Grafo$Aresta of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2810 calls to Random so far
Selected operation: ds.Grafo.imprime : (ds.Grafo) -> void
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 323 methods.
getSequencesForType(ds.Grafo) => 323 sequences.
number of candidate components: 323
randoop.util.Randomness called by nextRandomInt: 2811 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();
ds.Grafo grafo18 = grafo1.grafoTransposto();
ds.Grafo grafo19 = grafo18.grafoTransposto();

randoop.util.Randomness called by nextRandomInt: 2812 calls to Random so far
Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
boolean boolean12 = grafo1.existeAresta((int)' ', (int)(byte)1);
grafo1.imprime();
boolean boolean16 = grafo1.existeAresta(10, 97);
grafo1.imprime();
ds.Grafo grafo18 = grafo1.grafoTransposto();
ds.Grafo grafo19 = grafo18.grafoTransposto();
grafo18.imprime();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 =   [class java.lang.Character]
  Param 1 = 1 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 10 [class java.lang.Integer]
  Param 1 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@2542365f [class ds.Grafo]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@71b9f45 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [   : () -> char]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 18 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 19 active.
Making index 20 inactive (value is null)
Adding sequence #324 of type ds.Grafo of length 21
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2813 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 324 methods.
getSequencesForType(ds.Grafo) => 324 sequences.
number of candidate components: 324
randoop.util.Randomness called by nextRandomInt: 2814 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');
int int14 = grafo1.numVertices();

randoop.util.Randomness called by weightedCoinFlip: 2815 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2816 calls to Random so far
chosenSeq: int int0 = 97;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
boolean boolean8 = grafo1.existeAresta((int)(byte)0, (int)(byte)10);
boolean boolean10 = grafo1.listaAdjVazia(0);
boolean boolean13 = grafo1.existeAresta((int)(byte)1, (int)'#');
int int14 = grafo1.numVertices();
ds.Grafo.Aresta aresta16 = grafo1.primeiroListaAdj(97);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 0 [class java.lang.Byte]
  Param 1 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public boolean ds.Grafo.existeAresta(int,int)
  Param 0 = 1 [class java.lang.Byte]
  Param 1 = # [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.existeAresta(int,int)
runReflectionCodeRaw(public boolean ds.Grafo.existeAresta(int,int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 97 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 8 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 9 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.existeAresta : (ds.Grafo, int, int) -> boolean]
Making index 13 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 97 : () -> int]
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is null)
Adding sequence #325 of type ds.Grafo of length 17
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2817 calls to Random so far
Selected operation: ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(int, int, int)
randoop.util.Randomness called by weightedCoinFlip: 2818 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2819 calls to Random so far
chosenSeq: int int0 = 10;

randoop.util.Randomness called by weightedCoinFlip: 2820 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2821 calls to Random so far
chosenSeq: short short0 = (short)100;

randoop.util.Randomness called by weightedCoinFlip: 2822 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2823 calls to Random so far
chosenSeq: int int0 = 32;

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(10, (int)(short)100, 32);

isSideEffectFree => false for Statement [ 10 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
Adding sequence #140 of type ds.Grafo$Aresta of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2824 calls to Random so far
Selected operation: ds.Grafo.<init> : (int) -> ds.Grafo
selectInputs:  inputTypes=(int)
randoop.util.Randomness called by weightedCoinFlip: 2825 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2826 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2827 calls to Random so far
Selected operation: ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 140 methods.
getSequencesForType(ds.Grafo$Aresta) => 140 sequences.
number of candidate components: 140
randoop.util.Randomness called by nextRandomInt: 2828 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
int int4 = aresta3.v2();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(byte)100, (int)(short)1, (int)(short)10);
int int4 = aresta3.v2();
int int5 = aresta3.v2();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 1 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 1 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> byte]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
Adding sequence #141 of type ds.Grafo$Aresta of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2829 calls to Random so far
Selected operation: ds.Grafo.insereAresta : (ds.Grafo, int, int, int) -> void
selectInputs:  inputTypes=(ds.Grafo, int, int, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 325 methods.
getSequencesForType(ds.Grafo) => 325 sequences.
number of candidate components: 325
randoop.util.Randomness called by nextRandomInt: 2830 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);
ds.Grafo.Aresta aresta24 = grafo1.proxAdj(32);

randoop.util.Randomness called by weightedCoinFlip: 2831 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2832 calls to Random so far
chosenSeq: char char0 = 'a';

randoop.util.Randomness called by weightedCoinFlip: 2833 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2834 calls to Random so far
chosenSeq: byte byte0 = (byte)-1;

randoop.util.Randomness called by weightedCoinFlip: 2835 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2836 calls to Random so far
chosenSeq: char char0 = '#';

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(32, (int)(byte)0, (int)(byte)10);
grafo1.insereAresta((int)(short)10, (int)' ', (int)(short)-1);
ds.Grafo.Aresta aresta20 = grafo1.retiraAresta((int)(short)10, 32);
ds.Grafo.Aresta aresta22 = grafo1.primeiroListaAdj(0);
ds.Grafo.Aresta aresta24 = grafo1.proxAdj(32);
grafo1.insereAresta((int)'a', (int)(byte)-1, (int)'#');

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 32 [class java.lang.Integer]
  Param 1 = 0 [class java.lang.Byte]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Short]
  Param 1 =   [class java.lang.Character]
  Param 2 = -1 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
  Param 0 = 10 [class java.lang.Short]
  Param 1 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.retiraAresta(int,int) throws java.lang.Exception) => ds.Grafo$Aresta@cc45e1e [class ds.Grafo$Aresta]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
  Param 0 = 32 [class java.lang.Integer]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.proxAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.proxAdj(int)) => ds.Grafo$Aresta@64ff71ec [class ds.Grafo$Aresta]
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = a [class java.lang.Character]
  Param 1 = -1 [class java.lang.Byte]
  Param 2 = # [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> byte]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.retiraAresta : (ds.Grafo, int, int) -> ds.Grafo$Aresta]
Making index 20 active.
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is null)
isSideEffectFree => false for Statement [ 32 : () -> int]
Making index 23 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.proxAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 24 active.
isSideEffectFree => false for Statement [ a : () -> char]
Making index 25 inactive (value is a primitive)
isSideEffectFree => false for Statement [ -1 : () -> byte]
Making index 26 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 27 inactive (value is a primitive)
Making index 28 inactive (value is null)
Adding sequence #326 of type ds.Grafo of length 29
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2837 calls to Random so far
Selected operation: ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 326 methods.
getSequencesForType(ds.Grafo) => 326 sequences.
number of candidate components: 326
randoop.util.Randomness called by nextRandomInt: 2838 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'#');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
boolean boolean19 = grafo1.listaAdjVazia((int)(short)1);
ds.Grafo.Aresta aresta21 = grafo1.primeiroListaAdj((int)'#');
ds.Grafo grafo22 = grafo1.grafoTransposto();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 = 1 [class java.lang.Short]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => false [class java.lang.Boolean]
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = # [class java.lang.Character]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
runReflectionCodeRaw(public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)) => ds.Grafo$Aresta@74e8eb95 [class ds.Grafo$Aresta]
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@5acd9f11 [class ds.Grafo]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> int]
Making index 10 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> short]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is null)
isSideEffectFree => false for Statement [ 10 : () -> byte]
Making index 14 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 1 : () -> byte]
Making index 15 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 100 : () -> short]
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is null)
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 18 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 19 inactive (value is a primitive)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 20 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta]
Making index 21 active.
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 22 active.
Adding sequence #327 of type ds.Grafo of length 23
Adding sequence #328 of type ds.Grafo of length 23
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2839 calls to Random so far
Selected operation: ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 141 methods.
getSequencesForType(ds.Grafo$Aresta) => 141 sequences.
number of candidate components: 141
randoop.util.Randomness called by nextRandomInt: 2840 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();

Successfully created new unique sequence:
ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta((int)(short)1, 0, (int)'a');
int int4 = aresta3.v2();
int int5 = aresta3.peso();
int int6 = aresta3.peso();
int int7 = aresta3.peso();

MethodCall.execute: this = public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw: public int ds.Grafo$Aresta.v2()
runReflectionCodeRaw(public int ds.Grafo$Aresta.v2()) => 0 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
MethodCall.execute: this = public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw: public int ds.Grafo$Aresta.peso()
runReflectionCodeRaw(public int ds.Grafo$Aresta.peso()) => 97 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 1 : () -> short]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 1 inactive (value is a primitive)
isSideEffectFree => false for Statement [ a : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.<init> : (int, int, int) -> ds.Grafo$Aresta]
Making index 3 active.
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.v2 : (ds.Grafo$Aresta) -> int]
Making index 4 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 5 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo$Aresta.peso : (ds.Grafo$Aresta) -> int]
Making index 7 inactive (value is a primitive)
Adding sequence #142 of type ds.Grafo$Aresta of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2841 calls to Random so far
Selected operation: ds.Grafo.primeiroListaAdj : (ds.Grafo, int) -> ds.Grafo$Aresta
selectInputs:  inputTypes=(ds.Grafo, int)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 328 methods.
getSequencesForType(ds.Grafo) => 328 sequences.
number of candidate components: 328
randoop.util.Randomness called by nextRandomInt: 2842 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
grafo18.imprime();

randoop.util.Randomness called by weightedCoinFlip: 2843 calls to Random so far
Will query component set for objects of type int
getSequencesForType(int, false, false)
candidate compatibleType (isNonreceiverType=true): byte
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): short
  Adding 5 methods.
candidate compatibleType (isNonreceiverType=true): int
  Adding 8 methods.
candidate compatibleType (isNonreceiverType=true): char
  Adding 4 methods.
getSequencesForType(int) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 2844 calls to Random so far
chosenSeq: short short0 = (short)-1;

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
grafo1.insereAresta(1, (int)(short)10, (int)(byte)10);
grafo1.insereAresta((int)(byte)10, (int)(byte)1, (int)(short)100);
ds.Grafo grafo18 = grafo1.grafoTransposto();
grafo18.imprime();
ds.Grafo.Aresta aresta21 = grafo18.primeiroListaAdj((int)(short)-1);

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 1 [class java.lang.Integer]
  Param 1 = 10 [class java.lang.Short]
  Param 2 = 10 [class java.lang.Byte]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = 10 [class java.lang.Byte]
  Param 1 = 1 [class java.lang.Byte]
  Param 2 = 100 [class java.lang.Short]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@527fec47 [class ds.Grafo]
MethodCall.execute: this = public void ds.Grafo.imprime()
runReflectionCodeRaw: public void ds.Grafo.imprime()
runReflectionCodeRaw(public void ds.Grafo.imprime()) => null
MethodCall.execute: this = public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
  Param 0 = -1 [class java.lang.Short]
runReflectionCodeRaw: public ds.Grafo$Aresta ds.Grafo.primeiroListaAdj(int)
Excluding from extension pool due to exception or failure in statement 21
  Statement: ds.Grafo.Aresta aresta21 = grafo18.primeiroListaAdj((int)(short)-1);
  Result: [ExceptionalExecution, java.lang.ArrayIndexOutOfBoundsException, at ds.Grafo.primeiroListaAdj(Grafo.java:41)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2845 calls to Random so far
Selected operation: ds.Grafo$Aresta.v1 : (ds.Grafo$Aresta) -> int
selectInputs:  inputTypes=(ds.Grafo$Aresta)
Will query component set for objects of type ds.Grafo$Aresta
getSequencesForType(ds.Grafo$Aresta, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo$Aresta
  Adding 142 methods.
getSequencesForType(ds.Grafo$Aresta) => 142 sequences.
number of candidate components: 142
randoop.util.Randomness called by nextRandomInt: 2846 calls to Random so far
chosenSeq: ds.Grafo.Aresta aresta3 = new ds.Grafo.Aresta(35, (int)(short)-1, (int)(short)10);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2847 calls to Random so far
Selected operation: ds.Grafo.numVertices : (ds.Grafo) -> int
selectInputs:  inputTypes=(ds.Grafo)
Will query component set for objects of type ds.Grafo
getSequencesForType(ds.Grafo, false, true)
candidate compatibleType (isNonreceiverType=false): ds.Grafo
  Adding 328 methods.
getSequencesForType(ds.Grafo) => 328 sequences.
number of candidate components: 328
randoop.util.Randomness called by nextRandomInt: 2848 calls to Random so far
chosenSeq: ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
boolean boolean12 = grafo1.listaAdjVazia((int)' ');

Successfully created new unique sequence:
ds.Grafo grafo1 = new ds.Grafo(100);
grafo1.insereAresta((int)'#', (int)' ', (int)' ');
grafo1.insereAresta((int)'#', 0, 0);
ds.Grafo grafo10 = grafo1.grafoTransposto();
boolean boolean12 = grafo1.listaAdjVazia((int)' ');
int int13 = grafo1.numVertices();

MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 =   [class java.lang.Character]
  Param 2 =   [class java.lang.Character]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public void ds.Grafo.insereAresta(int,int,int)
  Param 0 = # [class java.lang.Character]
  Param 1 = 0 [class java.lang.Integer]
  Param 2 = 0 [class java.lang.Integer]
runReflectionCodeRaw: public void ds.Grafo.insereAresta(int,int,int)
runReflectionCodeRaw(public void ds.Grafo.insereAresta(int,int,int)) => null
MethodCall.execute: this = public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw: public ds.Grafo ds.Grafo.grafoTransposto()
runReflectionCodeRaw(public ds.Grafo ds.Grafo.grafoTransposto()) => ds.Grafo@29131d32 [class ds.Grafo]
MethodCall.execute: this = public boolean ds.Grafo.listaAdjVazia(int)
  Param 0 =   [class java.lang.Character]
runReflectionCodeRaw: public boolean ds.Grafo.listaAdjVazia(int)
runReflectionCodeRaw(public boolean ds.Grafo.listaAdjVazia(int)) => true [class java.lang.Boolean]
MethodCall.execute: this = public int ds.Grafo.numVertices()
runReflectionCodeRaw: public int ds.Grafo.numVertices()
runReflectionCodeRaw(public int ds.Grafo.numVertices()) => 100 [class java.lang.Integer]
isSideEffectFree => false for Statement [ 100 : () -> int]
Making index 0 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.<init> : (int) -> ds.Grafo]
Making index 1 active.
isSideEffectFree => false for Statement [ # : () -> char]
Making index 2 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 3 inactive (value is a primitive)
isSideEffectFree => false for Statement [   : () -> char]
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is null)
isSideEffectFree => false for Statement [ # : () -> char]
Making index 6 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 7 inactive (value is a primitive)
isSideEffectFree => false for Statement [ 0 : () -> int]
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is null)
isSideEffectFree => false for Statement [ ds.Grafo.grafoTransposto : (ds.Grafo) -> ds.Grafo]
Making index 10 active.
isSideEffectFree => false for Statement [   : () -> char]
Making index 11 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.listaAdjVazia : (ds.Grafo, int) -> boolean]
Making index 12 inactive (value is a primitive)
isSideEffectFree => false for Statement [ ds.Grafo.numVertices : (ds.Grafo) -> int]
Making index 13 inactive (value is a primitive)
Adding sequence #329 of type ds.Grafo of length 14
RunCommand.run():
  cd /tmp/checkRandoop006670864483612169006; java -ea -Xmx3000m -XX:+HeapDumpOnOutOfMemoryError -classpath .:/home/chenyuwen/test/initial-investigation-chatgpt-unit-tests/projetos/27Grafo/target/classes:/home/chenyuwen/randoop-4.2.4/randoop-all-4.2.4.jar org.junit.runner.JUnitCore ds.RandoopTest.Randoop0
  timeout=900000, environment: {PATH=/home/chenyuwen/perl5/bin:/home/chenyuwen/anaconda3/envs/initial-investigation-chatgpt-unit-tests/bin:/home/chenyuwen/anaconda3/condabin:/usr/lib/jvm/java-8-openjdk-amd64/bin:/usr/lib/jvm/java-8-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/chenyuwen/Defects4J/defects4j/framework/bin:/home/chenyuwen/apache-maven-3.9.9/bin:/home/chenyuwen/Defects4J/defects4j/framework/bin:/home/chenyuwen/apache-maven-3.9.9/bin, LC_MEASUREMENT=zh_CN.UTF-8, XAUTHORITY=/run/user/1000/gdm/Xauthority, INVOCATION_ID=53d0e7af006f4846ba30f95f61719e07, PERL_MM_OPT=INSTALL_BASE=/home/chenyuwen/perl5, XMODIFIERS=@im=fcitx, LC_TELEPHONE=zh_CN.UTF-8, XDG_DATA_DIRS=/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop, GDMSESSION=ubuntu, LC_TIME=zh_CN.UTF-8, CONDA_DEFAULT_ENV=initial-investigation-chatgpt-unit-tests, PAPERSIZE=a4, GTK_IM_MODULE=fcitx, CONDA_PYTHON_EXE=/home/chenyuwen/anaconda3/bin/python, DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus,guid=e890267afd074eeabbbf677c6774c555, CONDA_PREFIX=/home/chenyuwen/anaconda3/envs/initial-investigation-chatgpt-unit-tests, XDG_CURRENT_DESKTOP=ubuntu:GNOME, PERL_MB_OPT=--install_base "/home/chenyuwen/perl5", JOURNAL_STREAM=8:43776, MAVEN_HOME=/home/chenyuwen/apache-maven-3.9.9, SSH_AGENT_PID=1393, COLORTERM=truecolor, QT4_IM_MODULE=fcitx, LC_PAPER=zh_CN.UTF-8, SESSION_MANAGER=local/chenyuwen-ThinkBook-15-G4-IAP:@/tmp/.ICE-unix/1439,unix/chenyuwen-ThinkBook-15-G4-IAP:/tmp/.ICE-unix/1439, USERNAME=chenyuwen, LOGNAME=chenyuwen, PWD=/home/chenyuwen/test/initial-investigation-chatgpt-unit-tests/projetos/27Grafo, MANAGERPID=1212, PYCHARM_HOSTED=1, IM_CONFIG_PHASE=1, LANGUAGE=zh_CN:en, PYTHONPATH=/home/chenyuwen/test/initial-investigation-chatgpt-unit-tests:/home/chenyuwen/桌面/pycharm/pycharm-professional-2024.3/pycharm-2024.3/plugins/python-ce/helpers/pycharm_plotly_backend:/home/chenyuwen/桌面/pycharm/pycharm-professional-2024.3/pycharm-2024.3/plugins/python-ce/helpers/pycharm_matplotlib_backend:/home/chenyuwen/桌面/pycharm/pycharm-professional-2024.3/pycharm-2024.3/plugins/python-ce/helpers/pycharm_display, SHELL=/bin/bash, LESSOPEN=| /usr/bin/lesspipe %s, LC_ADDRESS=zh_CN.UTF-8, OLDPWD=/home/chenyuwen/test/initial-investigation-chatgpt-unit-tests/scripts, PYCHARM_PROJECT_ID=28f3c729, GNOME_DESKTOP_SESSION_ID=this-is-deprecated, GNOME_TERMINAL_SCREEN=/org/gnome/Terminal/screen/7095a9bf_d8c9_4194_972f_ef6f4e23b41b, GTK_MODULES=gail:atk-bridge, CLUTTER_IM_MODULE=fcitx, M2_HOME=/home/chenyuwen/apache-maven-3.9.9, DBUS_STARTER_ADDRESS=unix:path=/run/user/1000/bus,guid=e890267afd074eeabbbf677c6774c555, CONDA_PROMPT_MODIFIER=(initial-investigation-chatgpt-unit-tests) , PYCHARM_UUID=61433237-49a3-3d7f-bc43-9cf3a540f585, XDG_SESSION_DESKTOP=ubuntu, LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:, SHLVL=1, LC_IDENTIFICATION=zh_CN.UTF-8, GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=, LESSCLOSE=/usr/bin/lesspipe %s %s, LC_MONETARY=zh_CN.UTF-8, QT_IM_MODULE=fcitx, CONDA_EXE=/home/chenyuwen/anaconda3/bin/conda, JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64, TERM=xterm-256color, XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg, GNOME_TERMINAL_SERVICE=:1.84, LANG=zh_CN.UTF-8, XDG_SESSION_TYPE=x11, DISPLAY=:0, _CE_M=, LC_NAME=zh_CN.UTF-8, PERL5LIB=/home/chenyuwen/perl5/lib/perl5, PYCHARM_DISPLAY_PORT=63342, CONDA_SHLVL=2, XDG_SESSION_CLASS=user, _=./pycharm.sh, PYTHONIOENCODING=UTF-8, GPG_AGENT_INFO=/run/user/1000/gnupg/S.gpg-agent:0:1, DESKTOP_SESSION=ubuntu, USER=chenyuwen, XDG_MENU_PREFIX=gnome-, VTE_VERSION=6003, QT_ACCESSIBILITY=1, WINDOWPATH=2, LC_NUMERIC=zh_CN.UTF-8, SSH_AUTH_SOCK=/run/user/1000/keyring/ssh, PYCHARM_INTERACTIVE_PLOTS=1, _CE_CONDA=, PYTHONUNBUFFERED=1, GSETTINGS_SCHEMA_DIR=/home/chenyuwen/anaconda3/share/glib-2.0/schemas, GNOME_SHELL_SESSION_MODE=ubuntu, XDG_RUNTIME_DIR=/run/user/1000, DBUS_STARTER_BUS_TYPE=session, HOME=/home/chenyuwen, PERL_LOCAL_LIB_ROOT=/home/chenyuwen/perl5}
