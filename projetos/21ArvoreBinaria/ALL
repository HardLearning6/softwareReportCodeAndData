Applying visitor class randoop.reflection.DeclarationExtractor to class ds.ArvoreBinaria
ReflectionManager.apply
  class ds.ArvoreBinaria
  getMethods = 13
  getDeclaredMethods = 10
  visitor = class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.insere(ds.Item), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager visiting method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.retira(ds.Item), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.testa()
ReflectionManager visiting method public void ds.ArvoreBinaria.testa(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.DeclarationExtractor
ReflectionManager.apply done with getMethods for class class ds.ArvoreBinaria
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager.apply considering declared method private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.testa()
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
ReflectionManager.apply done with getDeclaredMethods for class class ds.ArvoreBinaria
Visiting constructor public ds.ArvoreBinaria()
Applying visitor class randoop.reflection.TypeExtractor to class ds.ArvoreBinaria
ReflectionManager.apply
  class ds.ArvoreBinaria
  getMethods = 13
  getDeclaredMethods = 10
  visitor = class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Object [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Boolean [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.insere(ds.Item), visitor=class randoop.reflection.TypeExtractor
Adding ds.Item [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager visiting method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item), visitor=class randoop.reflection.TypeExtractor
Adding ds.Item [class randoop.types.NonParameterizedType] as candidate parameter type
Adding ds.Item [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.retira(ds.Item), visitor=class randoop.reflection.TypeExtractor
Adding ds.Item [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public void ds.ArvoreBinaria.testa()
ReflectionManager visiting method public void ds.ArvoreBinaria.testa(), visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.TypeExtractor
Adding java.lang.String [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Long [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.TypeExtractor
Adding java.lang.Long [class randoop.types.NonParameterizedType] as candidate parameter type
Adding java.lang.Integer [class randoop.types.NonParameterizedType] as candidate parameter type
ReflectionManager.apply done with getMethods for class class ds.ArvoreBinaria
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager.apply considering declared method private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.testa()
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
ReflectionManager.apply done with getDeclaredMethods for class class ds.ArvoreBinaria
Visiting constructor public ds.ArvoreBinaria()
Applying visitor class randoop.reflection.TestValueExtractor to class ds.ArvoreBinaria
ReflectionManager.apply
  class ds.ArvoreBinaria
  getMethods = 13
  getDeclaredMethods = 10
  visitor = class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.insere(ds.Item), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager visiting method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.retira(ds.Item), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.testa()
ReflectionManager visiting method public void ds.ArvoreBinaria.testa(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.TestValueExtractor
ReflectionManager.apply done with getMethods for class class ds.ArvoreBinaria
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager.apply considering declared method private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.testa()
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
ReflectionManager.apply done with getDeclaredMethods for class class ds.ArvoreBinaria
Visiting constructor public ds.ArvoreBinaria()
Applying visitor class randoop.reflection.CheckRepExtractor to class ds.ArvoreBinaria
ReflectionManager.apply
  class ds.ArvoreBinaria
  getMethods = 13
  getDeclaredMethods = 10
  visitor = class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.insere(ds.Item), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager visiting method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.retira(ds.Item), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.testa()
ReflectionManager visiting method public void ds.ArvoreBinaria.testa(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.CheckRepExtractor
ReflectionManager.apply done with getMethods for class class ds.ArvoreBinaria
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager.apply considering declared method private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.testa()
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
ReflectionManager.apply done with getDeclaredMethods for class class ds.ArvoreBinaria
Visiting constructor public ds.ArvoreBinaria()
Applying visitor class randoop.reflection.OperationExtractor to class ds.ArvoreBinaria
ReflectionManager.apply
  class ds.ArvoreBinaria
  getMethods = 13
  getDeclaredMethods = 10
  visitor = class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public boolean java.lang.Object.equals(java.lang.Object)
ReflectionManager visiting method public boolean java.lang.Object.equals(java.lang.Object), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native java.lang.Class java.lang.Object.getClass()
ReflectionManager visiting method public final native java.lang.Class<?> java.lang.Object.getClass(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public native int java.lang.Object.hashCode()
ReflectionManager visiting method public native int java.lang.Object.hashCode(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.insere(ds.Item), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notify()
ReflectionManager visiting method public final native void java.lang.Object.notify(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.notifyAll()
ReflectionManager visiting method public final native void java.lang.Object.notifyAll(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager visiting method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager visiting method public void ds.ArvoreBinaria.retira(ds.Item), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public void ds.ArvoreBinaria.testa()
ReflectionManager visiting method public void ds.ArvoreBinaria.testa(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public java.lang.String java.lang.Object.toString()
ReflectionManager visiting method public java.lang.String java.lang.Object.toString(), visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait() throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait() throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
ReflectionManager visiting method public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply considering method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
ReflectionManager visiting method public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException, visitor=class randoop.reflection.OperationExtractor
ReflectionManager.apply done with getMethods for class class ds.ArvoreBinaria
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.antecessor(ds.ArvoreBinaria$No,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.central(ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.insere(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.insere(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
ReflectionManager.apply considering declared method private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.Item ds.ArvoreBinaria.pesquisa(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.retira(ds.Item)
ReflectionManager.apply considering declared method private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
Will not use non-visible method: private ds.ArvoreBinaria$No ds.ArvoreBinaria.retira(ds.Item,ds.ArvoreBinaria$No)
ReflectionManager.apply considering declared method public void ds.ArvoreBinaria.testa()
ReflectionManager.apply considering declared method private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
Will not use non-visible method: private void ds.ArvoreBinaria.testa(ds.ArvoreBinaria$No)
ReflectionManager.apply done with getDeclaredMethods for class class ds.ArvoreBinaria
Visiting constructor public ds.ArvoreBinaria()
Adding sequence #1 of type byte of length 1
Adding sequence #2 of type byte of length 1
Adding sequence #3 of type byte of length 1
Adding sequence #4 of type byte of length 1
Adding sequence #5 of type byte of length 1
Adding sequence #1 of type short of length 1
Adding sequence #2 of type short of length 1
Adding sequence #3 of type short of length 1
Adding sequence #4 of type short of length 1
Adding sequence #5 of type short of length 1
Adding sequence #1 of type int of length 1
Adding sequence #2 of type int of length 1
Adding sequence #3 of type int of length 1
Adding sequence #4 of type int of length 1
Adding sequence #5 of type int of length 1
Adding sequence #1 of type long of length 1
Adding sequence #2 of type long of length 1
Adding sequence #3 of type long of length 1
Adding sequence #4 of type long of length 1
Adding sequence #5 of type long of length 1
Adding sequence #1 of type float of length 1
Adding sequence #2 of type float of length 1
Adding sequence #3 of type float of length 1
Adding sequence #4 of type float of length 1
Adding sequence #5 of type float of length 1
Adding sequence #1 of type double of length 1
Adding sequence #2 of type double of length 1
Adding sequence #3 of type double of length 1
Adding sequence #4 of type double of length 1
Adding sequence #5 of type double of length 1
Adding sequence #1 of type char of length 1
Adding sequence #2 of type char of length 1
Adding sequence #3 of type char of length 1
Adding sequence #4 of type char of length 1
Adding sequence #1 of type boolean of length 1
Adding sequence #2 of type boolean of length 1
Adding sequence #1 of type java.lang.String of length 1
Adding sequence #2 of type java.lang.String of length 1
getSequencesForType(boolean, true, false)
getSequencesForType(boolean) => 2 sequences.
getSequencesForType(byte, true, false)
getSequencesForType(byte) => 5 sequences.
getSequencesForType(char, true, false)
getSequencesForType(char) => 4 sequences.
getSequencesForType(double, true, false)
getSequencesForType(double) => 5 sequences.
getSequencesForType(float, true, false)
getSequencesForType(float) => 5 sequences.
getSequencesForType(int, true, false)
getSequencesForType(int) => 5 sequences.
getSequencesForType(long, true, false)
getSequencesForType(long) => 5 sequences.
getSequencesForType(short, true, false)
getSequencesForType(short) => 5 sequences.
getSequencesForType(java.lang.String, true, false)
getSequencesForType(java.lang.String) => 2 sequences.
Operations: 
  ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria
  ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
  ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
  ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
  ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
  java.lang.Object.<init> : () -> java.lang.Object
  java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Initial sequences (seeds):
Type byte: 5 sequences
  #0: byte byte0 = (byte)-1;
  #1: byte byte0 = (byte)0;
  #2: byte byte0 = (byte)1;
  #3: byte byte0 = (byte)10;
  #4: byte byte0 = (byte)100;
Type short: 5 sequences
  #0: short short0 = (short)-1;
  #1: short short0 = (short)0;
  #2: short short0 = (short)1;
  #3: short short0 = (short)10;
  #4: short short0 = (short)100;
Type int: 5 sequences
  #0: int int0 = (-1);
  #1: int int0 = 0;
  #2: int int0 = 1;
  #3: int int0 = 10;
  #4: int int0 = 100;
Type long: 5 sequences
  #0: long long0 = (-1L);
  #1: long long0 = 0L;
  #2: long long0 = 1L;
  #3: long long0 = 10L;
  #4: long long0 = 100L;
Type float: 5 sequences
  #0: float float0 = (-1.0f);
  #1: float float0 = 0.0f;
  #2: float float0 = 1.0f;
  #3: float float0 = 10.0f;
  #4: float float0 = 100.0f;
Type double: 5 sequences
  #0: double double0 = (-1.0d);
  #1: double double0 = 0.0d;
  #2: double double0 = 1.0d;
  #3: double double0 = 10.0d;
  #4: double double0 = 100.0d;
Type char: 4 sequences
  #0: char char0 = '#';
  #1: char char0 = ' ';
  #2: char char0 = '4';
  #3: char char0 = 'a';
Type boolean: 2 sequences
  #0: boolean boolean0 = true;
  #1: boolean boolean0 = false;
Type java.lang.String: 2 sequences
  #0: java.lang.String str0 = "";
  #1: java.lang.String str0 = "hi!";
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 1 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
getSequencesForType: found no sequences matching type java.lang.Object
getSequencesForType(java.lang.Object) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 2 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 3 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 4 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 5 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 6 calls to Random so far
Selected operation: java.lang.Object.<init> : () -> java.lang.Object
selectInputs:  inputTypes=()
Successfully created new unique sequence:
java.lang.Object obj0 = new java.lang.Object();

isSideEffectFree => false for Statement [ java.lang.Object.<init> : () -> java.lang.Object]
Making index 0 active.
Adding sequence #1 of type java.lang.Object of length 1
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 7 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 8 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 9 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 10 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
getSequencesForType(java.lang.Object) => 1 sequences.
number of candidate components: 1
randoop.util.Randomness called by nextRandomInt: 11 calls to Random so far
chosenSeq: java.lang.Object obj0 = new java.lang.Object();

Successfully created new unique sequence:
java.lang.Object obj0 = new java.lang.Object();
java.lang.Class<?> wildcardClass1 = obj0.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class java.lang.Object [class java.lang.Class]
isSideEffectFree => false for Statement [ java.lang.Object.<init> : () -> java.lang.Object]
Making index 0 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 1 active.
Adding sequence #1 of type java.lang.Class<?> of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 12 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 13 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 14 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 15 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
getSequencesForType(java.lang.Object) => 1 sequences.
number of candidate components: 1
randoop.util.Randomness called by nextRandomInt: 16 calls to Random so far
chosenSeq: java.lang.Object obj0 = new java.lang.Object();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 17 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 18 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 19 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 20 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 21 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 22 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
getSequencesForType: found no sequences matching type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria) => 0 sequences.
number of candidate components: 0
No sequences of receiver type.
Failed to find inputs for operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 23 calls to Random so far
Selected operation: ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria
selectInputs:  inputTypes=()
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Adding sequence #1 of type ds.ArvoreBinaria of length 1
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 24 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 1 methods.
getSequencesForType(ds.ArvoreBinaria) => 1 sequences.
number of candidate components: 1
randoop.util.Randomness called by nextRandomInt: 25 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Adding sequence #2 of type ds.ArvoreBinaria of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 26 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 2 methods.
getSequencesForType(ds.ArvoreBinaria) => 2 sequences.
number of candidate components: 2
randoop.util.Randomness called by nextRandomInt: 27 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 28 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence #3 of type ds.ArvoreBinaria of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 29 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 3 methods.
getSequencesForType(ds.ArvoreBinaria) => 3 sequences.
number of candidate components: 3
randoop.util.Randomness called by nextRandomInt: 30 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

randoop.util.Randomness called by weightedCoinFlip: 31 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence #4 of type ds.ArvoreBinaria of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 32 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 4 methods.
getSequencesForType(ds.ArvoreBinaria) => 4 sequences.
number of candidate components: 4
randoop.util.Randomness called by nextRandomInt: 33 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 34 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 4 methods.
getSequencesForType(java.lang.Object) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 35 calls to Random so far
chosenSeq: java.lang.Object obj0 = new java.lang.Object();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 36 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 4 methods.
getSequencesForType(ds.ArvoreBinaria) => 4 sequences.
number of candidate components: 4
randoop.util.Randomness called by nextRandomInt: 37 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence #5 of type ds.ArvoreBinaria of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 38 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 5 methods.
getSequencesForType(ds.ArvoreBinaria) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 39 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 40 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 5 methods.
getSequencesForType(ds.ArvoreBinaria) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 41 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 42 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Item item5 = arvoreBinaria0.pesquisa(item4);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 43 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 5 methods.
getSequencesForType(ds.ArvoreBinaria) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 44 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 45 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 5 methods.
getSequencesForType(java.lang.Object) => 6 sequences.
number of candidate components: 6
randoop.util.Randomness called by nextRandomInt: 46 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
java.lang.Class<?> wildcardClass3 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 3 active.
Adding sequence #2 of type java.lang.Class<?> of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 47 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 5 methods.
getSequencesForType(ds.ArvoreBinaria) => 5 sequences.
number of candidate components: 5
randoop.util.Randomness called by nextRandomInt: 48 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence #6 of type ds.ArvoreBinaria of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 49 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 6 methods.
getSequencesForType(java.lang.Object) => 7 sequences.
number of candidate components: 7
randoop.util.Randomness called by nextRandomInt: 50 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
java.lang.Class<?> wildcardClass1 = arvoreBinaria0.getClass();

MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 1 active.
Adding sequence #3 of type java.lang.Class<?> of length 2
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 51 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 6 methods.
getSequencesForType(ds.ArvoreBinaria) => 6 sequences.
number of candidate components: 6
randoop.util.Randomness called by nextRandomInt: 52 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 53 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 6 methods.
getSequencesForType(ds.ArvoreBinaria) => 6 sequences.
number of candidate components: 6
randoop.util.Randomness called by nextRandomInt: 54 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

randoop.util.Randomness called by weightedCoinFlip: 55 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
ds.Item item3 = null;
arvoreBinaria0.retira(item3);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
Excluding from extension pool due to exception or failure in statement 4
  Statement: arvoreBinaria0.retira(item3);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.retira(ArvoreBinaria.java:40)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 56 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 6 methods.
getSequencesForType(ds.ArvoreBinaria) => 6 sequences.
number of candidate components: 6
randoop.util.Randomness called by nextRandomInt: 57 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

randoop.util.Randomness called by weightedCoinFlip: 58 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence #7 of type ds.ArvoreBinaria of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 59 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 7 methods.
getSequencesForType(java.lang.Object) => 8 sequences.
number of candidate components: 8
randoop.util.Randomness called by nextRandomInt: 60 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
java.lang.Class<?> wildcardClass5 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 5 active.
Adding sequence #4 of type java.lang.Class<?> of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 61 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 7 methods.
getSequencesForType(ds.ArvoreBinaria) => 7 sequences.
number of candidate components: 7
randoop.util.Randomness called by nextRandomInt: 62 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Adding sequence #8 of type ds.ArvoreBinaria of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 63 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 8 methods.
getSequencesForType(ds.ArvoreBinaria) => 8 sequences.
number of candidate components: 8
randoop.util.Randomness called by nextRandomInt: 64 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence #9 of type ds.ArvoreBinaria of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 65 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 9 methods.
getSequencesForType(ds.ArvoreBinaria) => 9 sequences.
number of candidate components: 9
randoop.util.Randomness called by nextRandomInt: 66 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 67 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item6 = null;
ds.Item item7 = arvoreBinaria0.pesquisa(item6);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 7
  Statement: ds.Item item7 = arvoreBinaria0.pesquisa(item6);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 68 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 9 methods.
getSequencesForType(ds.ArvoreBinaria) => 9 sequences.
number of candidate components: 9
randoop.util.Randomness called by nextRandomInt: 69 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);

randoop.util.Randomness called by weightedCoinFlip: 70 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence #10 of type ds.ArvoreBinaria of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 71 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 10 methods.
getSequencesForType(ds.ArvoreBinaria) => 10 sequences.
number of candidate components: 10
randoop.util.Randomness called by nextRandomInt: 72 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 73 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 10 methods.
getSequencesForType(java.lang.Object) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 74 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);
java.lang.Class<?> wildcardClass4 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #5 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 75 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 10 methods.
getSequencesForType(ds.ArvoreBinaria) => 10 sequences.
number of candidate components: 10
randoop.util.Randomness called by nextRandomInt: 76 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);

randoop.util.Randomness called by weightedCoinFlip: 77 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence #11 of type ds.ArvoreBinaria of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 78 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 11 methods.
getSequencesForType(ds.ArvoreBinaria) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 79 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

randoop.util.Randomness called by weightedCoinFlip: 80 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
ds.Item item3 = null;
arvoreBinaria0.insere(item3);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
Excluding from extension pool due to exception or failure in statement 4
  Statement: arvoreBinaria0.insere(item3);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.insere(ArvoreBinaria.java:28)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 81 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 11 methods.
getSequencesForType(ds.ArvoreBinaria) => 11 sequences.
number of candidate components: 11
randoop.util.Randomness called by nextRandomInt: 82 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence #12 of type ds.ArvoreBinaria of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 83 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 12 methods.
getSequencesForType(ds.ArvoreBinaria) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 84 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);

randoop.util.Randomness called by weightedCoinFlip: 85 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);
ds.Item item4 = null;
arvoreBinaria0.retira(item4);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
Excluding from extension pool due to exception or failure in statement 5
  Statement: arvoreBinaria0.retira(item4);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.retira(ArvoreBinaria.java:40)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 86 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 12 methods.
getSequencesForType(ds.ArvoreBinaria) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 87 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 88 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 89 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 12 methods.
getSequencesForType(ds.ArvoreBinaria) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 90 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 91 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 12 methods.
getSequencesForType(ds.ArvoreBinaria) => 12 sequences.
number of candidate components: 12
randoop.util.Randomness called by nextRandomInt: 92 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 93 calls to Random so far
Using null as input.
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence #13 of type ds.ArvoreBinaria of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 94 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 13 methods.
getSequencesForType(java.lang.Object) => 14 sequences.
number of candidate components: 14
randoop.util.Randomness called by nextRandomInt: 95 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 96 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 13 methods.
getSequencesForType(ds.ArvoreBinaria) => 13 sequences.
number of candidate components: 13
randoop.util.Randomness called by nextRandomInt: 97 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 98 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 13 methods.
getSequencesForType(ds.ArvoreBinaria) => 13 sequences.
number of candidate components: 13
randoop.util.Randomness called by nextRandomInt: 99 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);

randoop.util.Randomness called by weightedCoinFlip: 100 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Adding sequence #14 of type ds.ArvoreBinaria of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 101 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 14 methods.
getSequencesForType(ds.ArvoreBinaria) => 14 sequences.
number of candidate components: 14
randoop.util.Randomness called by nextRandomInt: 102 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence #15 of type ds.ArvoreBinaria of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 103 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 15 methods.
getSequencesForType(ds.ArvoreBinaria) => 15 sequences.
number of candidate components: 15
randoop.util.Randomness called by nextRandomInt: 104 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 105 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 15 methods.
getSequencesForType(ds.ArvoreBinaria) => 15 sequences.
number of candidate components: 15
randoop.util.Randomness called by nextRandomInt: 106 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence #16 of type ds.ArvoreBinaria of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 107 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 16 methods.
getSequencesForType(ds.ArvoreBinaria) => 16 sequences.
number of candidate components: 16
randoop.util.Randomness called by nextRandomInt: 108 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 109 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item5 = null;
arvoreBinaria0.insere(item5);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
Excluding from extension pool due to exception or failure in statement 6
  Statement: arvoreBinaria0.insere(item5);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.insere(ArvoreBinaria.java:28)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 110 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 16 methods.
getSequencesForType(ds.ArvoreBinaria) => 16 sequences.
number of candidate components: 16
randoop.util.Randomness called by nextRandomInt: 111 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);

randoop.util.Randomness called by weightedCoinFlip: 112 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);
ds.Item item9 = null;
ds.Item item10 = arvoreBinaria0.pesquisa(item9);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 10
  Statement: ds.Item item10 = arvoreBinaria0.pesquisa(item9);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 113 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 16 methods.
getSequencesForType(ds.ArvoreBinaria) => 16 sequences.
number of candidate components: 16
randoop.util.Randomness called by nextRandomInt: 114 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 115 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Adding sequence #17 of type ds.ArvoreBinaria of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 116 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 17 methods.
getSequencesForType(java.lang.Object) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 117 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);
java.lang.Class<?> wildcardClass9 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 9 active.
Adding sequence #6 of type java.lang.Class<?> of length 10
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 118 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 17 methods.
getSequencesForType(ds.ArvoreBinaria) => 17 sequences.
number of candidate components: 17
randoop.util.Randomness called by nextRandomInt: 119 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 120 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item6 = null;
arvoreBinaria0.retira(item6);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
Excluding from extension pool due to exception or failure in statement 7
  Statement: arvoreBinaria0.retira(item6);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.retira(ArvoreBinaria.java:40)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 121 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 17 methods.
getSequencesForType(ds.ArvoreBinaria) => 17 sequences.
number of candidate components: 17
randoop.util.Randomness called by nextRandomInt: 122 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 123 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Adding sequence #18 of type ds.ArvoreBinaria of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 124 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 18 methods.
getSequencesForType(ds.ArvoreBinaria) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 125 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 126 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 127 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 18 methods.
getSequencesForType(ds.ArvoreBinaria) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 128 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);

randoop.util.Randomness called by weightedCoinFlip: 129 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
ds.Item item2 = null;
arvoreBinaria0.insere(item2);
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 5
  Statement: ds.Item item5 = arvoreBinaria0.pesquisa(item4);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 130 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 18 methods.
getSequencesForType(java.lang.Object) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 131 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
java.lang.Class<?> wildcardClass4 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 4 active.
Adding sequence #7 of type java.lang.Class<?> of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 132 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 18 methods.
getSequencesForType(ds.ArvoreBinaria) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 133 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

randoop.util.Randomness called by weightedCoinFlip: 134 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 135 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 18 methods.
getSequencesForType(ds.ArvoreBinaria) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 136 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);

randoop.util.Randomness called by weightedCoinFlip: 137 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);
ds.Item item5 = null;
arvoreBinaria0.retira(item5);
ds.Item item7 = null;
arvoreBinaria0.insere(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
Excluding from extension pool due to exception or failure in statement 10
  Statement: arvoreBinaria0.insere(item9);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.insere(ArvoreBinaria.java:28)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 138 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 18 methods.
getSequencesForType(ds.ArvoreBinaria) => 18 sequences.
number of candidate components: 18
randoop.util.Randomness called by nextRandomInt: 139 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);

randoop.util.Randomness called by weightedCoinFlip: 140 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Adding sequence #19 of type ds.ArvoreBinaria of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 141 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 19 methods.
getSequencesForType(ds.ArvoreBinaria) => 19 sequences.
number of candidate components: 19
randoop.util.Randomness called by nextRandomInt: 142 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Adding sequence #20 of type ds.ArvoreBinaria of length 4
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 143 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 20 methods.
getSequencesForType(ds.ArvoreBinaria) => 20 sequences.
number of candidate components: 20
randoop.util.Randomness called by nextRandomInt: 144 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);

randoop.util.Randomness called by weightedCoinFlip: 145 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
arvoreBinaria0.insere(item3);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence #21 of type ds.ArvoreBinaria of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 146 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 21 methods.
getSequencesForType(ds.ArvoreBinaria) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 147 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
arvoreBinaria0.insere(item3);

randoop.util.Randomness called by weightedCoinFlip: 148 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
arvoreBinaria0.insere(item3);
ds.Item item5 = null;
ds.Item item6 = arvoreBinaria0.pesquisa(item5);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 6
  Statement: ds.Item item6 = arvoreBinaria0.pesquisa(item5);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 149 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 21 methods.
getSequencesForType(java.lang.Object) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 150 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 151 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 21 methods.
getSequencesForType(ds.ArvoreBinaria) => 21 sequences.
number of candidate components: 21
randoop.util.Randomness called by nextRandomInt: 152 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);

randoop.util.Randomness called by weightedCoinFlip: 153 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
arvoreBinaria0.retira(item3);

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Adding sequence #22 of type ds.ArvoreBinaria of length 5
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 154 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 22 methods.
getSequencesForType(ds.ArvoreBinaria) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 155 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 156 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 22 methods.
getSequencesForType(ds.ArvoreBinaria) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 157 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 158 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 159 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 22 methods.
getSequencesForType(ds.ArvoreBinaria) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 160 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 161 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 162 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 22 methods.
getSequencesForType(ds.ArvoreBinaria) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 163 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 164 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 22 methods.
getSequencesForType(ds.ArvoreBinaria) => 22 sequences.
number of candidate components: 22
randoop.util.Randomness called by nextRandomInt: 165 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Adding sequence #23 of type ds.ArvoreBinaria of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 166 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 23 methods.
getSequencesForType(java.lang.Object) => 24 sequences.
number of candidate components: 24
randoop.util.Randomness called by nextRandomInt: 167 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 168 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 23 methods.
getSequencesForType(ds.ArvoreBinaria) => 23 sequences.
number of candidate components: 23
randoop.util.Randomness called by nextRandomInt: 169 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 170 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item6 = null;
arvoreBinaria0.insere(item6);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
Excluding from extension pool due to exception or failure in statement 7
  Statement: arvoreBinaria0.insere(item6);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.insere(ArvoreBinaria.java:28)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 171 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 23 methods.
getSequencesForType(java.lang.Object) => 24 sequences.
number of candidate components: 24
randoop.util.Randomness called by nextRandomInt: 172 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
java.lang.Class<?> wildcardClass11 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 11 active.
Adding sequence #8 of type java.lang.Class<?> of length 12
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 173 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 23 methods.
getSequencesForType(ds.ArvoreBinaria) => 23 sequences.
number of candidate components: 23
randoop.util.Randomness called by nextRandomInt: 174 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);

randoop.util.Randomness called by weightedCoinFlip: 175 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 176 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 23 methods.
getSequencesForType(ds.ArvoreBinaria) => 23 sequences.
number of candidate components: 23
randoop.util.Randomness called by nextRandomInt: 177 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence #24 of type ds.ArvoreBinaria of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 178 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 24 methods.
getSequencesForType(java.lang.Object) => 25 sequences.
number of candidate components: 25
randoop.util.Randomness called by nextRandomInt: 179 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
java.lang.Class<?> wildcardClass6 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 6 active.
Adding sequence #9 of type java.lang.Class<?> of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 180 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 24 methods.
getSequencesForType(ds.ArvoreBinaria) => 24 sequences.
number of candidate components: 24
randoop.util.Randomness called by nextRandomInt: 181 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Adding sequence #25 of type ds.ArvoreBinaria of length 13
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 182 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 25 methods.
getSequencesForType(ds.ArvoreBinaria) => 25 sequences.
number of candidate components: 25
randoop.util.Randomness called by nextRandomInt: 183 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence #26 of type ds.ArvoreBinaria of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 184 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 26 methods.
getSequencesForType(ds.ArvoreBinaria) => 26 sequences.
number of candidate components: 26
randoop.util.Randomness called by nextRandomInt: 185 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Adding sequence #27 of type ds.ArvoreBinaria of length 7
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 186 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 27 methods.
getSequencesForType(java.lang.Object) => 28 sequences.
number of candidate components: 28
randoop.util.Randomness called by nextRandomInt: 187 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
java.lang.Class<?> wildcardClass2 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 2 active.
Adding sequence #10 of type java.lang.Class<?> of length 3
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 188 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 27 methods.
getSequencesForType(ds.ArvoreBinaria) => 27 sequences.
number of candidate components: 27
randoop.util.Randomness called by nextRandomInt: 189 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);

randoop.util.Randomness called by weightedCoinFlip: 190 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
ds.Item item6 = null;
arvoreBinaria0.insere(item6);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence #28 of type ds.ArvoreBinaria of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 191 calls to Random so far
Selected operation: ds.ArvoreBinaria.retira : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 28 methods.
getSequencesForType(ds.ArvoreBinaria) => 28 sequences.
number of candidate components: 28
randoop.util.Randomness called by nextRandomInt: 192 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

randoop.util.Randomness called by weightedCoinFlip: 193 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 194 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 28 methods.
getSequencesForType(java.lang.Object) => 29 sequences.
number of candidate components: 29
randoop.util.Randomness called by nextRandomInt: 195 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
arvoreBinaria0.retira(item3);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.retira(item1);
ds.Item item3 = null;
arvoreBinaria0.retira(item3);
java.lang.Class<?> wildcardClass5 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 5 active.
Adding sequence #11 of type java.lang.Class<?> of length 6
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 196 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 28 methods.
getSequencesForType(ds.ArvoreBinaria) => 28 sequences.
number of candidate components: 28
randoop.util.Randomness called by nextRandomInt: 197 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Making index 11 inactive (value is null)
Making index 12 inactive (value is null)
Making index 13 inactive (value is null)
Adding sequence #29 of type ds.ArvoreBinaria of length 14
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 198 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 29 methods.
getSequencesForType(ds.ArvoreBinaria) => 29 sequences.
number of candidate components: 29
randoop.util.Randomness called by nextRandomInt: 199 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);

randoop.util.Randomness called by weightedCoinFlip: 200 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
arvoreBinaria0.insere(item9);
ds.Item item11 = null;
ds.Item item12 = arvoreBinaria0.pesquisa(item11);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 12
  Statement: ds.Item item12 = arvoreBinaria0.pesquisa(item11);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 201 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 29 methods.
getSequencesForType(ds.ArvoreBinaria) => 29 sequences.
number of candidate components: 29
randoop.util.Randomness called by nextRandomInt: 202 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);

randoop.util.Randomness called by weightedCoinFlip: 203 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
ds.Item item3 = null;
ds.Item item4 = arvoreBinaria0.pesquisa(item3);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
Excluding from extension pool due to exception or failure in statement 4
  Statement: ds.Item item4 = arvoreBinaria0.pesquisa(item3);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.pesquisa(ArvoreBinaria.java:18)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 204 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 29 methods.
getSequencesForType(java.lang.Object) => 30 sequences.
number of candidate components: 30
randoop.util.Randomness called by nextRandomInt: 205 calls to Random so far
chosenSeq: java.lang.Object obj0 = new java.lang.Object();

Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 206 calls to Random so far
Selected operation: ds.ArvoreBinaria.testa : (ds.ArvoreBinaria) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 29 methods.
getSequencesForType(ds.ArvoreBinaria) => 29 sequences.
number of candidate components: 29
randoop.util.Randomness called by nextRandomInt: 207 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Adding sequence #30 of type ds.ArvoreBinaria of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 208 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 30 methods.
getSequencesForType(ds.ArvoreBinaria) => 30 sequences.
number of candidate components: 30
randoop.util.Randomness called by nextRandomInt: 209 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);

randoop.util.Randomness called by weightedCoinFlip: 210 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 211 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 30 methods.
getSequencesForType(ds.ArvoreBinaria) => 30 sequences.
number of candidate components: 30
randoop.util.Randomness called by nextRandomInt: 212 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 213 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.insere(item7);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Adding sequence #31 of type ds.ArvoreBinaria of length 9
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 214 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 31 methods.
getSequencesForType(ds.ArvoreBinaria) => 31 sequences.
number of candidate components: 31
randoop.util.Randomness called by nextRandomInt: 215 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);

randoop.util.Randomness called by weightedCoinFlip: 216 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Sequence discarded: the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 217 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 31 methods.
getSequencesForType(java.lang.Object) => 32 sequences.
number of candidate components: 32
randoop.util.Randomness called by nextRandomInt: 218 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);
arvoreBinaria0.testa();

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
ds.Item item5 = arvoreBinaria0.pesquisa(item4);
arvoreBinaria0.testa();
java.lang.Class<?> wildcardClass7 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 7 active.
Adding sequence #12 of type java.lang.Class<?> of length 8
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 219 calls to Random so far
Selected operation: ds.ArvoreBinaria.pesquisa : (ds.ArvoreBinaria, ds.Item) -> ds.Item
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 31 methods.
getSequencesForType(ds.ArvoreBinaria) => 31 sequences.
number of candidate components: 31
randoop.util.Randomness called by nextRandomInt: 220 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);

randoop.util.Randomness called by weightedCoinFlip: 221 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
ds.Item item9 = null;
ds.Item item10 = arvoreBinaria0.pesquisa(item9);

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)
runReflectionCodeRaw(public ds.Item ds.ArvoreBinaria.pesquisa(ds.Item)) => null
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
Making index 9 inactive (value is null)
Making index 10 inactive (value is null)
Adding sequence #32 of type ds.ArvoreBinaria of length 11
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 222 calls to Random so far
Selected operation: ds.ArvoreBinaria.insere : (ds.ArvoreBinaria, ds.Item) -> void
selectInputs:  inputTypes=(ds.ArvoreBinaria, ds.Item)
Will query component set for objects of type ds.ArvoreBinaria
getSequencesForType(ds.ArvoreBinaria, false, true)
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 32 methods.
getSequencesForType(ds.ArvoreBinaria) => 32 sequences.
number of candidate components: 32
randoop.util.Randomness called by nextRandomInt: 223 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();

randoop.util.Randomness called by weightedCoinFlip: 224 calls to Random so far
Will query component set for objects of type ds.Item
getSequencesForType(ds.Item, false, false)
getSequencesForType: found no sequences matching type ds.Item
getSequencesForType(ds.Item) => 0 sequences.
number of candidate components: 0
Found no sequences of required type; will use null as 1-th input
Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
ds.Item item1 = null;
arvoreBinaria0.insere(item1);
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.insere(item7);

MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.insere(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.insere(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.insere(ds.Item)
Excluding from extension pool due to exception or failure in statement 8
  Statement: arvoreBinaria0.insere(item7);
  Result: [ExceptionalExecution, java.lang.NullPointerException, at ds.ArvoreBinaria.insere(ArvoreBinaria.java:28)]
-------------------------------------------
randoop.util.Randomness called by nextRandomInt: 225 calls to Random so far
Selected operation: java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
Applying capture conversion to java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>
selectInputs:  inputTypes=(java.lang.Object)
Will query component set for objects of type java.lang.Object
getSequencesForType(java.lang.Object, false, true)
candidate compatibleType (isNonreceiverType=true): byte
candidate compatibleType (isNonreceiverType=true): short
candidate compatibleType (isNonreceiverType=true): int
candidate compatibleType (isNonreceiverType=true): long
candidate compatibleType (isNonreceiverType=true): float
candidate compatibleType (isNonreceiverType=true): double
candidate compatibleType (isNonreceiverType=true): char
candidate compatibleType (isNonreceiverType=true): boolean
candidate compatibleType (isNonreceiverType=true): java.lang.String
candidate compatibleType (isNonreceiverType=false): java.lang.Object
  Adding 1 methods.
candidate compatibleType (isNonreceiverType=true): java.lang.Class<?>
candidate compatibleType (isNonreceiverType=false): ds.ArvoreBinaria
  Adding 32 methods.
getSequencesForType(java.lang.Object) => 33 sequences.
number of candidate components: 33
randoop.util.Randomness called by nextRandomInt: 226 calls to Random so far
chosenSeq: ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);

Successfully created new unique sequence:
ds.ArvoreBinaria arvoreBinaria0 = new ds.ArvoreBinaria();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
arvoreBinaria0.testa();
ds.Item item4 = null;
arvoreBinaria0.retira(item4);
arvoreBinaria0.testa();
ds.Item item7 = null;
arvoreBinaria0.retira(item7);
java.lang.Class<?> wildcardClass9 = arvoreBinaria0.getClass();

MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw: public void ds.ArvoreBinaria.testa()
runReflectionCodeRaw(public void ds.ArvoreBinaria.testa()) => null
MethodCall.execute: this = public void ds.ArvoreBinaria.retira(ds.Item)
  Param 0 = null
runReflectionCodeRaw: public void ds.ArvoreBinaria.retira(ds.Item)
runReflectionCodeRaw(public void ds.ArvoreBinaria.retira(ds.Item)) => null
MethodCall.execute: this = public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw: public final native java.lang.Class java.lang.Object.getClass()
runReflectionCodeRaw(public final native java.lang.Class java.lang.Object.getClass()) => class ds.ArvoreBinaria [class java.lang.Class]
isSideEffectFree => false for Statement [ ds.ArvoreBinaria.<init> : () -> ds.ArvoreBinaria]
Making index 0 active.
Making index 1 inactive (value is null)
Making index 2 inactive (value is null)
Making index 3 inactive (value is null)
Making index 4 inactive (value is null)
Making index 5 inactive (value is null)
Making index 6 inactive (value is null)
Making index 7 inactive (value is null)
Making index 8 inactive (value is null)
isSideEffectFree => true for Statement [ java.lang.Object.getClass : (java.lang.Object) -> java.lang.Class<?>]
Making index 9 active.
Adding sequence #13 of type java.lang.Class<?> of length 10
